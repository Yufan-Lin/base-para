(()=>{var t={99:(t,e,n)=>{"use strict";n.d(e,{Z:()=>w});var i,r,o=n(655),s=n(589),a=n(909),u=n(594),c=((i={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",i["bad-app-name"]="Illegal App name: '{$appName}",i["duplicate-app"]="Firebase App named '{$appName}' already exists",i["app-deleted"]="Firebase App named '{$appName}' already deleted",i["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",i["invalid-log-argument"]="First argument to `onLog` must be null or a function.",i),l=new s.LL("app","Firebase",c),h="@firebase/app",f="[DEFAULT]",d=((r={})[h]="fire-core",r["@firebase/analytics"]="fire-analytics",r["@firebase/app-check"]="fire-app-check",r["@firebase/auth"]="fire-auth",r["@firebase/database"]="fire-rtdb",r["@firebase/functions"]="fire-fn",r["@firebase/installations"]="fire-iid",r["@firebase/messaging"]="fire-fcm",r["@firebase/performance"]="fire-perf",r["@firebase/remote-config"]="fire-rc",r["@firebase/storage"]="fire-gcs",r["@firebase/firestore"]="fire-fst",r["fire-js"]="fire-js",r["firebase-wrapper"]="fire-js-all",r),p=new u.Yd("@firebase/app"),v=function(){function t(t,e,n){var i=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=(0,s.p$)(t),this.container=new a.H0(e.name),this._addComponent(new a.wA("app",(function(){return i}),"PUBLIC")),this.firebase_.INTERNAL.components.forEach((function(t){return i._addComponent(t)}))}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){var n;void 0===e&&(e=f),this.checkDestroyed_();var i=this.container.getProvider(t);return i.isInitialized()||"EXPLICIT"!==(null===(n=i.getComponent())||void 0===n?void 0:n.instantiationMode)||i.initialize(),i.getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=f),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){p.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.toJSON=function(){return{name:this.name,automaticDataCollectionEnabled:this.automaticDataCollectionEnabled,options:this.options}},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw l.create("app-deleted",{appName:this.name_})},t}();v.prototype.name&&v.prototype.options||v.prototype.delete;var g=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function t(){var e=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t){var e={},n=new Map,i={__esModule:!0,initializeApp:function(n,r){void 0===r&&(r={}),"object"==typeof r&&null!==r||(r={name:r});var o=r;void 0===o.name&&(o.name=f);var a=o.name;if("string"!=typeof a||!a)throw l.create("bad-app-name",{appName:String(a)});if((0,s.r3)(e,a))throw l.create("duplicate-app",{appName:a});var u=new t(n,o,i);return e[a]=u,u},app:r,registerVersion:function(t,e,n){var i,r=null!==(i=d[t])&&void 0!==i?i:t;n&&(r+="-"+n);var s=r.match(/\s|\//),u=e.match(/\s|\//);if(s||u){var c=['Unable to register library "'+r+'" with version "'+e+'":'];return s&&c.push('library name "'+r+'" contains illegal characters (whitespace or "/")'),s&&u&&c.push("and"),u&&c.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void p.warn(c.join(" "))}o(new a.wA(r+"-version",(function(){return{library:r,version:e}}),"VERSION"))},setLogLevel:u.Ub,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw l.create("invalid-log-argument");(0,u.Am)(t,e)},apps:null,SDK_VERSION:"8.8.1",INTERNAL:{registerComponent:o,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function r(t){if(t=t||f,!(0,s.r3)(e,t))throw l.create("no-app",{appName:t});return e[t]}function o(o){var a=o.name;if(n.has(a))return p.debug("There were multiple attempts to register component "+a+"."),"PUBLIC"===o.type?i[a]:null;if(n.set(a,o),"PUBLIC"===o.type){var u=function(t){if(void 0===t&&(t=r()),"function"!=typeof t[a])throw l.create("invalid-app-argument",{appName:a});return t[a]()};void 0!==o.serviceProps&&(0,s.ZB)(u,o.serviceProps),i[a]=u,t.prototype[a]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,a).apply(this,o.multipleInstances?t:[])}}for(var c=0,h=Object.keys(e);c<h.length;c++){var f=h[c];e[f]._addComponent(o)}return"PUBLIC"===o.type?i[a]:null}return i.default=i,Object.defineProperty(i,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),r.App=t,i}(v);return e.INTERNAL=(0,o.pi)((0,o.pi)({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){(0,s.ZB)(e,t)},createSubscribe:s.ne,ErrorFactory:s.LL,deepExtend:s.ZB}),e}(),m=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if((0,s.jU)()&&void 0!==self.firebase){p.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var y=self.firebase.SDK_VERSION;y&&y.indexOf("LITE")>=0&&p.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var _=g.initializeApp;g.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,s.UG)()&&p.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),_.apply(void 0,t)};var b=g;!function(t,e){t.INTERNAL.registerComponent(new a.wA("platform-logger",(function(t){return new m(t)}),"PRIVATE")),t.registerVersion(h,"0.6.29",e),t.registerVersion("fire-js","")}(b);const w=b},909:(t,e,n)=>{"use strict";n.d(e,{wA:()=>o,H0:()=>u,zt:()=>a});var i=n(655),r=n(589),o=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t.prototype.setInstanceCreatedCallback=function(t){return this.onInstanceCreated=t,this},t}(),s="[DEFAULT]",a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.onInitCallbacks=new Map}return t.prototype.get=function(t){var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new r.BH;if(this.instancesDeferred.set(e,n),this.isInitialized(e)||this.shouldAutoInitialize())try{var i=this.getOrInitializeService({instanceIdentifier:e});i&&n.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e,n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t))try{this.getOrInitializeService({instanceIdentifier:s})}catch(t){}try{for(var r=(0,i.XA)(this.instancesDeferred.entries()),o=r.next();!o.done;o=r.next()){var a=(0,i.CR)(o.value,2),u=a[0],c=a[1],l=this.normalizeInstanceIdentifier(u);try{var h=this.getOrInitializeService({instanceIdentifier:l});c.resolve(h)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}}},t.prototype.clearInstance=function(t){void 0===t&&(t=s),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return(0,i.mG)(this,void 0,void 0,(function(){var t;return(0,i.Jh)(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all((0,i.ev)((0,i.ev)([],(0,i.CR)(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))),(0,i.CR)(t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()})))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.isInitialized=function(t){return void 0===t&&(t=s),this.instances.has(t)},t.prototype.initialize=function(t){var e,n;void 0===t&&(t={});var r=t.options,o=void 0===r?{}:r,s=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(s))throw Error(this.name+"("+s+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var a=this.getOrInitializeService({instanceIdentifier:s,options:o});try{for(var u=(0,i.XA)(this.instancesDeferred.entries()),c=u.next();!c.done;c=u.next()){var l=(0,i.CR)(c.value,2),h=l[0],f=l[1];s===this.normalizeInstanceIdentifier(h)&&f.resolve(a)}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(e)throw e.error}}return a},t.prototype.onInit=function(t,e){var n,i=this.normalizeInstanceIdentifier(e),r=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;r.add(t),this.onInitCallbacks.set(i,r);var o=this.instances.get(i);return o&&t(o,i),function(){r.delete(t)}},t.prototype.invokeOnInitCallbacks=function(t,e){var n,r,o=this.onInitCallbacks.get(e);if(o)try{for(var s=(0,i.XA)(o),a=s.next();!a.done;a=s.next()){var u=a.value;try{u(t,e)}catch(t){}}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}},t.prototype.getOrInitializeService=function(t){var e,n=t.instanceIdentifier,i=t.options,r=void 0===i?{}:i,o=this.instances.get(n);if(!o&&this.component&&(o=this.component.instanceFactory(this.container,{instanceIdentifier:(e=n,e===s?void 0:e),options:r}),this.instances.set(n,o),this.invokeOnInitCallbacks(o,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,o)}catch(t){}return o||null},t.prototype.normalizeInstanceIdentifier=function(t){return void 0===t&&(t=s),this.component?this.component.multipleInstances?t:s:t},t.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},t}();var u=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},446:(t,e,n)=>{"use strict";var i=n(99),r=n(909),o=n(589),s=n(655),a=n(594);t=n.hmd(t);var u="";function c(t){u=t}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var l,h=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),(0,o.Pz)(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:(0,o.cI)(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),f=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return(0,o.r3)(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),d=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new h(e)}}catch(t){}return new f},p=d("localStorage"),v=d("sessionStorage"),g=new a.Yd("@firebase/database"),m=(l=1,function(){return l++}),y=function(t){var e=(0,o.dS)(t),n=new o.gQ;n.update(e);var i=n.digest();return o.US.encodeByteArray(i)},_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",i=0;i<t.length;i++){var r=t[i];Array.isArray(r)||r&&"object"==typeof r&&"number"==typeof r.length?n+=_.apply(null,r):n+="object"==typeof r?(0,o.Pz)(r):r,n+=" "}return n},b=null,w=!0,E=function(t,e){(0,o.hu)(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(g.logLevel=a.in.VERBOSE,b=g.log.bind(g),e&&v.set("logging_enabled",!0)):"function"==typeof t?b=t:(b=null,v.remove("logging_enabled"))},C=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===w&&(w=!1,null===b&&!0===v.get("logging_enabled")&&E(!0)),b){var n=_.apply(null,t);b(n)}},I=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];C.apply(void 0,(0,s.ev)([t],(0,s.CR)(e)))}},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+_.apply(void 0,(0,s.ev)([],(0,s.CR)(t)));g.error(n)},k=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+_.apply(void 0,(0,s.ev)([],(0,s.CR)(t)));throw g.error(n),new Error(n)},S=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+_.apply(void 0,(0,s.ev)([],(0,s.CR)(t)));g.warn(n)},A=function(t){return"number"==typeof t&&(t!=t||t===Number.POSITIVE_INFINITY||t===Number.NEGATIVE_INFINITY)},N="[MIN_NAME]",P="[MAX_NAME]",O=function(t,e){if(t===e)return 0;if(t===N||e===P)return-1;if(e===N||t===P)return 1;var n=V(t),i=V(e);return null!==n?null!==i?n-i==0?t.length-e.length:n-i:-1:null!==i?1:t<e?-1:1},x=function(t,e){return t===e?0:t<e?-1:1},D=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+(0,o.Pz)(e))},R=function(t){if("object"!=typeof t||null===t)return(0,o.Pz)(t);var e=[];for(var n in t)e.push(n);e.sort();for(var i="{",r=0;r<e.length;r++)0!==r&&(i+=","),i+=(0,o.Pz)(e[r]),i+=":",i+=R(t[e[r]]);return i+="}"},L=function(t,e){var n=t.length;if(n<=e)return[t];for(var i=[],r=0;r<n;r+=e)r+e>n?i.push(t.substring(r,n)):i.push(t.substring(r,r+e));return i};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function M(t,e){for(var n in t)t.hasOwnProperty(n)&&e(n,t[n])}var j=function(t){(0,o.hu)(!A(t),"Invalid JSON number");var e,n,i,r,s,a=1023;0===t?(n=0,i=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(r=Math.min(Math.floor(Math.log(t)/Math.LN2),a))+a,i=Math.round(t*Math.pow(2,52-r)-Math.pow(2,52))):(n=0,i=Math.round(t/Math.pow(2,-1074))));var u=[];for(s=52;s;s-=1)u.push(i%2?1:0),i=Math.floor(i/2);for(s=11;s;s-=1)u.push(n%2?1:0),n=Math.floor(n/2);u.push(e?1:0),u.reverse();var c=u.join(""),l="";for(s=0;s<64;s+=8){var h=parseInt(c.substr(s,8),2).toString(16);1===h.length&&(h="0"+h),l+=h}return l.toLowerCase()};var F=new RegExp("^-?(0*)\\d{1,10}$"),q=-2147483648,U=2147483647,V=function(t){if(F.test(t)){var e=Number(t);if(e>=q&&e<=U)return e}return null},W=function(t){try{t()}catch(t){setTimeout((function(){var e=t.stack||"";throw S("Exception was thrown by user callback.",e),t}),Math.floor(0))}},B=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},H=function(){function t(t,e){var n=this;this.appName_=t,this.appCheckProvider=e,this.appCheck=null==e?void 0:e.getImmediate({optional:!0}),this.appCheck||null==e||e.get().then((function(t){return n.appCheck=t}))}return t.prototype.getToken=function(t){var e=this;return this.appCheck?this.appCheck.getToken(t):new Promise((function(n,i){setTimeout((function(){e.appCheck?e.getToken(t).then(n,i):n(null)}),0)}))},t.prototype.addTokenChangeListener=function(t){var e;null===(e=this.appCheckProvider)||void 0===e||e.get().then((function(e){return e.addTokenListener(t)}))},t.prototype.notifyForInvalidToken=function(){S('Provided AppCheck credentials for the app named "'+this.appName_+'" are invalid. This usually indicates your app was not initialized correctly.')},t}(),z=function(){function t(t,e,n){var i=this;this.appName_=t,this.firebaseOptions_=e,this.authProvider_=n,this.auth_=null,this.auth_=n.getImmediate({optional:!0}),this.auth_||n.onInit((function(t){return i.auth_=t}))}return t.prototype.getToken=function(t){var e=this;return this.auth_?this.auth_.getToken(t).catch((function(t){return t&&"auth/token-not-initialized"===t.code?(C("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})):new Promise((function(n,i){setTimeout((function(){e.auth_?e.getToken(t).then(n,i):n(null)}),0)}))},t.prototype.addTokenChangeListener=function(t){this.auth_?this.auth_.addAuthTokenListener(t):this.authProvider_.get().then((function(e){return e.addAuthTokenListener(t)}))},t.prototype.removeTokenChangeListener=function(t){this.authProvider_.get().then((function(e){return e.removeAuthTokenListener(t)}))},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.appName_+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.firebaseOptions_?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.firebaseOptions_?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',S(t)},t}(),K=function(){function t(t){this.accessToken=t}return t.prototype.getToken=function(t){return Promise.resolve({accessToken:this.accessToken})},t.prototype.addTokenChangeListener=function(t){t(this.accessToken)},t.prototype.removeTokenChangeListener=function(t){},t.prototype.notifyForInvalidToken=function(){},t.OWNER="owner",t}(),G="5",Y=/(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/,$="websocket",X="long_polling",Q=function(){function t(t,e,n,i,r,o,s){void 0===r&&(r=!1),void 0===o&&(o=""),void 0===s&&(s=!1),this.secure=e,this.namespace=n,this.webSocketOnly=i,this.nodeAdmin=r,this.persistenceKey=o,this.includeNamespaceInQueryParams=s,this._host=t.toLowerCase(),this._domain=this._host.substr(this._host.indexOf(".")+1),this.internalHost=p.get("host:"+t)||this._host}return t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this._domain&&"firebaseio-demo.com"!==this._domain},Object.defineProperty(t.prototype,"host",{get:function(){return this._host},set:function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&p.set("host:"+this._host,this.internalHost))},enumerable:!1,configurable:!0}),t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){var t=this.secure?"https://":"http://",e=this.includeNamespaceInQueryParams?"?ns="+this.namespace:"";return""+t+this.host+"/"+e},t}();function Z(t,e,n){var i;if((0,o.hu)("string"==typeof e,"typeof type must == string"),(0,o.hu)("object"==typeof n,"typeof params must == object"),e===$)i=(t.secure?"wss://":"ws://")+t.internalHost+"/.ws?";else{if(e!==X)throw new Error("Unknown connection type: "+e);i=(t.secure?"https://":"http://")+t.internalHost+"/.lp?"}(function(t){return t.host!==t.internalHost||t.isCustomHost()||t.includeNamespaceInQueryParams})(t)&&(n.ns=t.namespace);var r=[];return M(n,(function(t,e){r.push(t+"="+e)})),i+r.join("&")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var J=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),(0,o.r3)(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return(0,o.p$)(this.counters_)},t}(),tt={},et={};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function nt(t){var e=t.toString();return tt[e]||(tt[e]=new J),tt[e]}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var it=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var i=function(){var t=r.pendingResponses[r.currentResponseNum];delete r.pendingResponses[r.currentResponseNum];for(var e=function(e){t[e]&&W((function(){n.onMessage_(t[e])}))},i=0;i<t.length;++i)e(i);if(r.currentResponseNum===r.closeAfterResponse)return r.onClose&&(r.onClose(),r.onClose=null),"break";r.currentResponseNum++},r=this;this.pendingResponses[this.currentResponseNum];){if("break"===i())break}},t}(),rt="start",ot="close",st=function(){function t(t,e,n,i,r,o,s){var a=this;this.connId=t,this.repoInfo=e,this.applicationId=n,this.appCheckToken=i,this.authToken=r,this.transportSessionId=o,this.lastSessionId=s,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=I(t),this.stats_=nt(e),this.urlFn=function(t){return a.appCheckToken&&(t.ac=a.appCheckToken),Z(e,X,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new it(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null}),Math.floor(3e4)),function(t){if((0,o.Yr)()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((function(){if(!n.isClosed_){n.scriptTagHolder=new at((function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=(0,s.CR)(t,5),r=i[0],o=i[1],a=i[2];if(i[3],i[4],n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,r===rt)n.id=o,n.password=a;else{if(r!==ot)throw new Error("Unrecognized command received: "+r);o?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(o,(function(){n.onClosed_()}))):n.onClosed_()}}),(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=(0,s.CR)(t,2),r=i[0],o=i[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(r,o)}),(function(){n.onClosed_()}),n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v=G,n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),n.applicationId&&(t.p=n.applicationId),n.appCheckToken&&(t.ac=n.appCheckToken),"undefined"!=typeof location&&location.hostname&&Y.test(location.hostname)&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,(function(){}))}}))},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return!(0,o.Yr)()&&(!!t.forceAllow_||!(t.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=(0,o.Pz)(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=(0,o.h$)(e),i=L(n,1840),r=0;r<i.length;r++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,i.length,i[r]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!(0,o.Yr)()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=(0,o.Pz)(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),at=function(){function t(e,n,i,r){if(this.onDisconnect=i,this.urlFn=r,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,(0,o.Yr)())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=m(),window["pLPCommand"+this.uniqueCallbackIdentifier]=e,window["pRTLPCB"+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var s="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))s='<script>document.domain="'+document.domain+'";<\/script>';var a="<html><body>"+s+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(a),this.myIFrame.doc.close()}catch(t){C("frame writing exception"),t.stack&&C(t.stack),C(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||C("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var t=this;this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout((function(){null!==t.myIFrame&&(document.body.removeChild(t.myIFrame),t.myIFrame=null)}),Math.floor(0)));var e=this.onDisconnect;e&&(this.onDisconnect=null,e())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",i=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var r=this.pendingSegs.shift();n=n+"&seg"+i+"="+r.seg+"&ts"+i+"="+r.ts+"&d"+i+"="+r.d,i++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e);var i=function(){n.outstandingRequests.delete(e),n.newRequest_()},r=setTimeout(i,Math.floor(25e3));this.addTag(t,(function(){clearTimeout(r),i()}))},t.prototype.addTag=function(t,e){var n=this;(0,o.Yr)()?this.doNodeLongPoll(t,e):setTimeout((function(){try{if(!n.sendNewPolls)return;var i=n.myIFrame.doc.createElement("script");i.type="text/javascript",i.async=!0,i.src=t,i.onload=i.onreadystatechange=function(){var t=i.readyState;t&&"loaded"!==t&&"complete"!==t||(i.onload=i.onreadystatechange=null,i.parentNode&&i.parentNode.removeChild(i),e())},i.onerror=function(){C("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(i)}catch(t){}}),Math.floor(1))},t}(),ut=null;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"undefined"!=typeof MozWebSocket?ut=MozWebSocket:"undefined"!=typeof WebSocket&&(ut=WebSocket);var ct=function(){function t(e,n,i,r,o,s,a){this.connId=e,this.applicationId=i,this.appCheckToken=r,this.authToken=o,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=I(this.connId),this.stats_=nt(n),this.connURL=t.connectionURL_(n,s,a,r),this.nodeAdmin=n.nodeAdmin}return t.connectionURL_=function(t,e,n,i){var r={};return r.v=G,!(0,o.Yr)()&&"undefined"!=typeof location&&location.hostname&&Y.test(location.hostname)&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),i&&(r.ac=i),Z(t,$,r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,p.set("previous_websocket_failure",!0);try{if((0,o.Yr)()){var i=this.nodeAdmin?"AdminNode":"Node",r={headers:{"User-Agent":"Firebase/5/"+u+"/"+process.platform+"/"+i,"X-Firebase-GMPID":this.applicationId||""}};this.authToken&&(r.headers.Authorization="Bearer "+this.authToken),this.appCheckToken&&(r.headers["X-Firebase-AppCheck"]=this.appCheckToken);var s=process.env,a=0===this.connURL.indexOf("wss://")?s.HTTPS_PROXY||s.https_proxy:s.HTTP_PROXY||s.http_proxy;a&&(r.proxy={origin:a}),this.mySock=new ut(this.connURL,[],r)}else{r={headers:{"X-Firebase-GMPID":this.applicationId||"","X-Firebase-AppCheck":this.appCheckToken||""}};this.mySock=new ut(this.connURL,[],r)}}catch(t){this.log_("Error instantiating WebSocket.");var c=t.message||t.data;return c&&this.log_(c),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==ut&&!t.forceDisallow_},t.previouslyFailed=function(){return p.isInMemoryStorage||!0===p.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){p.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length===this.totalFrames){var e=this.frames.join("");this.frames=null;var n=(0,o.cI)(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if((0,o.hu)(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=(0,o.Pz)(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=L(e,16384);n.length>1&&this.sendString_(String(n.length));for(var i=0;i<n.length;i++)this.sendString_(n[i])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()}),Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),lt=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[st,ct]},enumerable:!1,configurable:!0}),t.prototype.initTransports_=function(e){var n,i,r=ct&&ct.isAvailable(),o=r&&!ct.previouslyFailed();if(e.webSocketOnly&&(r||S("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),o=!0),o)this.transports_=[ct];else{var a=this.transports_=[];try{for(var u=(0,s.XA)(t.ALL_TRANSPORTS),c=u.next();!c.done;c=u.next()){var l=c.value;l&&l.isAvailable()&&a.push(l)}}catch(t){n={error:t}}finally{try{c&&!c.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),ht=function(){function t(t,e,n,i,r,o,s,a,u,c){this.id=t,this.repoInfo_=e,this.applicationId_=n,this.appCheckToken_=i,this.authToken_=r,this.onMessage_=o,this.onReady_=s,this.onDisconnect_=a,this.onKill_=u,this.lastSessionId=c,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=I("c:"+this.id+":"),this.transportManager_=new lt(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,null,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),i=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((function(){t.conn_&&t.conn_.open(n,i)}),Math.floor(0));var r=e.healthyTimeout||0;r>0&&(this.healthyTimeout_=B((function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))}),Math.floor(r)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!==e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=D("t",t),n=D("d",t);if("c"===e)this.onSecondaryControl_(n);else{if("d"!==e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=D("t",t),n=D("d",t);"c"===e?this.onControl_(n):"d"===e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=D("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var i=0;i<this.pendingDataMessages.length;++i)this.onDataMessage_(this.pendingDataMessages[i]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?T("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):T("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,i=t.h;this.sessionId=t.s,this.repoInfo_.host=i,0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),G!==n&&S("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),i=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,i),B((function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())}),Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.host=t,1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):B((function(){n.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(p.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),ft=function(){function t(){}return t.prototype.put=function(t,e,n,i){},t.prototype.merge=function(t,e,n,i){},t.prototype.refreshAuthToken=function(t){},t.prototype.refreshAppCheckToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),dt=function(){function t(t){this.allowedEvents_=t,this.listeners_={},(0,o.hu)(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var i=(0,s.ev)([],(0,s.CR)(this.listeners_[t])),r=0;r<i.length;r++)i[r].callback.apply(i[r].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var i=this.getInitialEvent(t);i&&e.apply(n,i)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var i=this.listeners_[t]||[],r=0;r<i.length;r++)if(i[r].callback===e&&(!n||n===i[r].context))return void i.splice(r,1)},t.prototype.validateEventType_=function(t){(0,o.hu)(this.allowedEvents_.find((function(e){return e===t})),"Unknown event: "+t)},t}(),pt=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||(0,o.uI)()||(window.addEventListener("online",(function(){e.online_||(e.online_=!0,e.trigger("online",!0))}),!1),window.addEventListener("offline",(function(){e.online_&&(e.online_=!1,e.trigger("online",!1))}),!1)),e}return(0,s.ZT)(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return(0,o.hu)("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(dt),vt=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,i=0;i<this.pieces_.length;i++)this.pieces_[i].length>0&&(this.pieces_[n]=this.pieces_[i],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function gt(){return new vt("")}function mt(t){return t.pieceNum_>=t.pieces_.length?null:t.pieces_[t.pieceNum_]}function yt(t){return t.pieces_.length-t.pieceNum_}function _t(t){var e=t.pieceNum_;return e<t.pieces_.length&&e++,new vt(t.pieces_,e)}function bt(t){return t.pieceNum_<t.pieces_.length?t.pieces_[t.pieces_.length-1]:null}function wt(t,e){return void 0===e&&(e=0),t.pieces_.slice(t.pieceNum_+e)}function Et(t){if(t.pieceNum_>=t.pieces_.length)return null;for(var e=[],n=t.pieceNum_;n<t.pieces_.length-1;n++)e.push(t.pieces_[n]);return new vt(e,0)}function Ct(t,e){for(var n=[],i=t.pieceNum_;i<t.pieces_.length;i++)n.push(t.pieces_[i]);if(e instanceof vt)for(i=e.pieceNum_;i<e.pieces_.length;i++)n.push(e.pieces_[i]);else{var r=e.split("/");for(i=0;i<r.length;i++)r[i].length>0&&n.push(r[i])}return new vt(n,0)}function It(t){return t.pieceNum_>=t.pieces_.length}function Tt(t,e){var n=mt(t),i=mt(e);if(null===n)return e;if(n===i)return Tt(_t(t),_t(e));throw new Error("INTERNAL ERROR: innerPath ("+e+") is not within outerPath ("+t+")")}function kt(t,e){for(var n=wt(t,0),i=wt(e,0),r=0;r<n.length&&r<i.length;r++){var o=O(n[r],i[r]);if(0!==o)return o}return n.length===i.length?0:n.length<i.length?-1:1}function St(t,e){if(yt(t)!==yt(e))return!1;for(var n=t.pieceNum_,i=e.pieceNum_;n<=t.pieces_.length;n++,i++)if(t.pieces_[n]!==e.pieces_[i])return!1;return!0}function At(t,e){var n=t.pieceNum_,i=e.pieceNum_;if(yt(t)>yt(e))return!1;for(;n<t.pieces_.length;){if(t.pieces_[n]!==e.pieces_[i])return!1;++n,++i}return!0}var Nt=function(t,e){this.errorPrefix_=e,this.parts_=wt(t,0),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=(0,o.ug)(this.parts_[n]);Pt(this)};function Pt(t){if(t.byteLength_>768)throw new Error(t.errorPrefix_+"has a key path longer than 768 bytes ("+t.byteLength_+").");if(t.parts_.length>32)throw new Error(t.errorPrefix_+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Ot(t))}function Ot(t){return 0===t.parts_.length?"":"in property '"+t.parts_.join(".")+"'"}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var xt,Dt,Rt=function(t){function e(){var e,n,i=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),i.visible_=!0,n&&document.addEventListener(n,(function(){var t=!document[e];t!==i.visible_&&(i.visible_=t,i.trigger("visible",t))}),!1),i}return(0,s.ZT)(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return(0,o.hu)("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(dt),Lt=1e3,Mt=function(t){function e(n,i,r,s,a,u,c,l){var h=t.call(this)||this;if(h.repoInfo_=n,h.applicationId_=i,h.onDataUpdate_=r,h.onConnectStatus_=s,h.onServerInfoUpdate_=a,h.authTokenProvider_=u,h.appCheckTokenProvider_=c,h.authOverride_=l,h.id=e.nextPersistentConnectionId_++,h.log_=I("p:"+h.id+":"),h.interruptReasons_={},h.listens=new Map,h.outstandingPuts_=[],h.outstandingGets_=[],h.outstandingPutCount_=0,h.outstandingGetCount_=0,h.onDisconnectRequestQueue_=[],h.connected_=!1,h.reconnectDelay_=Lt,h.maxReconnectDelay_=3e5,h.securityDebugCallback_=null,h.lastSessionId=null,h.establishConnectionTimer_=null,h.visible_=!1,h.requestCBHash_={},h.requestNumber_=0,h.realtime_=null,h.authToken_=null,h.appCheckToken_=null,h.forceTokenRefresh_=!1,h.invalidAuthTokenCount_=0,h.invalidAppCheckTokenCount_=0,h.firstConnection_=!0,h.lastConnectionAttemptTime_=null,h.lastConnectionEstablishedTime_=null,l&&!(0,o.Yr)())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return Rt.getInstance().on("visible",h.onVisible_,h),-1===n.host.indexOf("fblocal")&&pt.getInstance().on("online",h.onOnline_,h),h}return(0,s.ZT)(e,t),e.prototype.sendRequest=function(t,e,n){var i=++this.requestNumber_,r={r:i,a:t,b:e};this.log_((0,o.Pz)(r)),(0,o.hu)(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(r),n&&(this.requestCBHash_[i]=n)},e.prototype.get=function(t){var e=this;this.initConnection_();var n=new o.BH,i={p:t._path.toString(),q:t._queryObject},r={action:"g",request:i,onComplete:function(t){var r=t.d;"ok"===t.s?(e.onDataUpdate_(i.p,r,!1,null),n.resolve(r)):n.reject(r)}};this.outstandingGets_.push(r),this.outstandingGetCount_++;var s=this.outstandingGets_.length-1;return this.connected_||setTimeout((function(){var t=e.outstandingGets_[s];void 0!==t&&r===t&&(delete e.outstandingGets_[s],e.outstandingGetCount_--,0===e.outstandingGetCount_&&(e.outstandingGets_=[]),e.log_("get "+s+" timed out on connection"),n.reject(new Error("Client is offline.")))}),3e3),this.connected_&&this.sendGet_(s),n.promise},e.prototype.listen=function(t,e,n,i){this.initConnection_();var r=t._queryIdentifier,s=t._path.toString();this.log_("Listen called for "+s+" "+r),this.listens.has(s)||this.listens.set(s,new Map),(0,o.hu)(t._queryParams.isDefault()||!t._queryParams.loadsAllData(),"listen() called for non-default but complete query"),(0,o.hu)(!this.listens.get(s).has(r),"listen() called twice for same path/queryId.");var a={onComplete:i,hashFn:e,query:t,tag:n};this.listens.get(s).set(r,a),this.connected_&&this.sendListen_(a)},e.prototype.sendGet_=function(t){var e=this,n=this.outstandingGets_[t];this.sendRequest("g",n.request,(function(i){delete e.outstandingGets_[t],e.outstandingGetCount_--,0===e.outstandingGetCount_&&(e.outstandingGets_=[]),n.onComplete&&n.onComplete(i)}))},e.prototype.sendListen_=function(t){var n=this,i=t.query,r=i._path.toString(),o=i._queryIdentifier;this.log_("Listen on "+r+" for "+o);var s={p:r};t.tag&&(s.q=i._queryObject,s.t=t.tag),s.h=t.hashFn(),this.sendRequest("q",s,(function(s){var a=s.d,u=s.s;e.warnOnListenWarnings_(a,i),(n.listens.get(r)&&n.listens.get(r).get(o))===t&&(n.log_("listen response",s),"ok"!==u&&n.removeListen_(r,o),t.onComplete&&t.onComplete(u,a))}))},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&(0,o.r3)(t,"w")){var n=(0,o.DV)(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var i='".indexOn": "'+e._queryParams.getIndex().toString()+'"',r=e._path.toString();S("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+i+" at "+r+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(function(){})),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||(0,o.GJ)(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.refreshAppCheckToken=function(t){this.appCheckToken_=t,this.log_("App check token refreshed"),this.appCheckToken_?this.tryAppCheck():this.connected_&&this.sendRequest("unappeck",{},(function(){}))},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=(0,o.w9)(e)?"auth":"gauth",i={cred:e};null===this.authOverride_?i.noauth=!0:"object"==typeof this.authOverride_&&(i.authvar=this.authOverride_),this.sendRequest(n,i,(function(n){var i=n.s,r=n.d||"error";t.authToken_===e&&("ok"===i?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(i,r))}))}},e.prototype.tryAppCheck=function(){var t=this;this.connected_&&this.appCheckToken_&&this.sendRequest("appcheck",{token:this.appCheckToken_},(function(e){var n=e.s,i=e.d||"error";"ok"===n?t.invalidAppCheckTokenCount_=0:t.onAppCheckRevoked_(n,i)}))},e.prototype.unlisten=function(t,e){var n=t._path.toString(),i=t._queryIdentifier;this.log_("Unlisten called for "+n+" "+i),(0,o.hu)(t._queryParams.isDefault()||!t._queryParams.loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,i)&&this.connected_&&this.sendUnlisten_(n,i,t._queryObject,e)},e.prototype.sendUnlisten_=function(t,e,n,i){this.log_("Unlisten on "+t+" for "+e);var r={p:t};i&&(r.q=n,r.t=i),this.sendRequest("n",r)},e.prototype.onDisconnectPut=function(t,e,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.initConnection_(),this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,i){var r={p:e,d:n};this.log_("onDisconnect "+t,r),this.sendRequest(t,r,(function(t){i&&setTimeout((function(){i(t.s,t.d)}),Math.floor(0))}))},e.prototype.put=function(t,e,n,i){this.putInternal("p",t,e,n,i)},e.prototype.merge=function(t,e,n,i){this.putInternal("m",t,e,n,i)},e.prototype.putInternal=function(t,e,n,i,r){this.initConnection_();var o={p:e,d:n};void 0!==r&&(o.h=r),this.outstandingPuts_.push({action:t,request:o,onComplete:i}),this.outstandingPutCount_++;var s=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(s):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,i=this.outstandingPuts_[t].request,r=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,i,(function(i){e.log_(n+" response",i),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),r&&r(i.s,i.d)}))},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,(function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}}))}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+(0,o.Pz)(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"apc"===t?this.onAppCheckRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):T("Unrecognized action received from server: "+(0,o.Pz)(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;(0,o.hu)(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((function(){e.establishConnectionTimer_=null,e.establishConnection_()}),Math.floor(t))},e.prototype.initConnection_=function(){!this.realtime_&&this.firstConnection_&&this.scheduleConnect_(0)},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Lt,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=Lt,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Lt),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){return(0,s.mG)(this,void 0,void 0,(function(){var t,n,i,r,a,u,c,l,h,f,d,p,v,g,m=this;return(0,s.Jh)(this,(function(y){switch(y.label){case 0:if(!this.shouldReconnect_())return[3,4];this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null,t=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),i=this.onRealtimeDisconnect_.bind(this),r=this.id+":"+e.nextConnectionId_++,a=this.lastSessionId,u=!1,c=null,l=function(){c?c.close():(u=!0,i())},h=function(t){(0,o.hu)(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(t)},this.realtime_={close:l,sendRequest:h},f=this.forceTokenRefresh_,this.forceTokenRefresh_=!1,y.label=1;case 1:return y.trys.push([1,3,,4]),[4,Promise.all([this.authTokenProvider_.getToken(f),this.appCheckTokenProvider_.getToken(f)])];case 2:return d=s.CR.apply(void 0,[y.sent(),2]),p=d[0],v=d[1],u?C("getToken() completed but was canceled"):(C("getToken() completed. Creating connection."),this.authToken_=p&&p.accessToken,this.appCheckToken_=v&&v.token,c=new ht(r,this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,t,n,i,(function(t){S(t+" ("+m.repoInfo_.toString()+")"),m.interrupt("server_kill")}),a)),[3,4];case 3:return g=y.sent(),this.log_("Failed to get token: "+g),u||(this.repoInfo_.nodeAdmin&&S(g),l()),[3,4];case 4:return[2]}}))}))},e.prototype.interrupt=function(t){C("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){C("Resuming connection for reason: "+t),delete this.interruptReasons_[t],(0,o.xb)(this.interruptReasons_)&&(this.reconnectDelay_=Lt,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map((function(t){return R(t)})).join("$"):"default";var i=this.removeListen_(t,n);i&&i.onComplete&&i.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,i=new vt(t).toString();if(this.listens.has(i)){var r=this.listens.get(i);n=r.get(e),r.delete(e),0===r.size&&this.listens.delete(i)}else n=void 0;return n},e.prototype.onAuthRevoked_=function(t,e){C("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onAppCheckRevoked_=function(t,e){C("App check token revoked: "+t+"/"+e),this.appCheckToken_=null,this.forceTokenRefresh_=!0,"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAppCheckTokenCount_++,this.invalidAppCheckTokenCount_>=3&&this.appCheckTokenProvider_.notifyForInvalidToken())},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_&&this.securityDebugCallback_(t)},e.prototype.restoreState_=function(){var t,e,n,i;this.tryAuth(),this.tryAppCheck();try{for(var r=(0,s.XA)(this.listens.values()),o=r.next();!o.done;o=r.next()){var a=o.value;try{for(var u=(n=void 0,(0,s.XA)(a.values())),c=u.next();!c.done;c=u.next()){var l=c.value;this.sendListen_(l)}}catch(t){n={error:t}}finally{try{c&&!c.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}for(var h=0;h<this.outstandingPuts_.length;h++)this.outstandingPuts_[h]&&this.sendPut_(h);for(;this.onDisconnectRequestQueue_.length;){var f=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(f.action,f.pathString,f.data,f.onComplete)}for(h=0;h<this.outstandingGets_.length;h++)this.outstandingGets_[h]&&this.sendGet_(h)},e.prototype.sendConnectStats_=function(){var t={},e="js";(0,o.Yr)()&&(e=this.repoInfo_.nodeAdmin?"admin_node":"node"),t["sdk."+e+"."+u.replace(/\./g,"-")]=1,(0,o.uI)()?t["framework.cordova"]=1:(0,o.b$)()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=pt.getInstance().currentlyOnline();return(0,o.xb)(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}(ft),jt=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),Ft=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new jt(N,t),i=new jt(N,e);return 0!==this.compare(n,i)},t.prototype.minPost=function(){return jt.MIN},t}(),qt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,s.ZT)(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return xt},set:function(t){xt=t},enumerable:!1,configurable:!0}),e.prototype.compare=function(t,e){return O(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw(0,o.g5)("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return jt.MIN},e.prototype.maxPost=function(){return new jt(P,xt)},e.prototype.makePost=function(t,e){return(0,o.hu)("string"==typeof t,"KeyIndex indexValue must always be a string."),new jt(t,xt)},e.prototype.toString=function(){return".key"},e}(Ft),Ut=new qt,Vt=function(){function t(t,e,n,i,r){void 0===r&&(r=null),this.isReverse_=i,this.resultGenerator_=r,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,i&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),Wt=function(){function t(e,n,i,r,o){this.key=e,this.value=n,this.color=null!=i?i:t.RED,this.left=null!=r?r:Ht.EMPTY_NODE,this.right=null!=o?o:Ht.EMPTY_NODE}return t.prototype.copy=function(e,n,i,r,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=i?i:this.color,null!=r?r:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||!!t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var i=this,r=n(t,i.key);return(i=r<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Ht.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,i;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Ht.EMPTY_NODE;i=n.right.min_(),n=n.copy(i.key,i.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");var t=this.left.check_();if(t!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),Bt=function(){function t(){}return t.prototype.copy=function(t,e,n,i,r){return this},t.prototype.insert=function(t,e,n){return new Wt(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Ht=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,Wt.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,Wt.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,i=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return i?i.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(i=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new Vt(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new Vt(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new Vt(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new Vt(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new Bt,t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function zt(t,e){return O(t.name,e.name)}function Kt(t,e){return O(t,e)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Gt,Yt,$t,Xt=function(t){return"number"==typeof t?"number:"+j(t):"string:"+t},Qt=function(t){if(t.isLeafNode()){var e=t.val();(0,o.hu)("string"==typeof e||"number"==typeof e||"object"==typeof e&&(0,o.r3)(e,".sv"),"Priority must be a string or number.")}else(0,o.hu)(t===Dt||t.isEmpty(),"priority of unexpected type.");(0,o.hu)(t===Dt||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},Zt=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,(0,o.hu)(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Qt(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return Gt},set:function(t){Gt=t},enumerable:!1,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return It(e)?this:".priority"===mt(e)?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var i=mt(e);return null===i?n:n.isEmpty()&&".priority"!==i?this:((0,o.hu)(".priority"!==i||1===yt(e),".priority must be the last token in a path"),this.updateImmediateChild(i,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(_t(e),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+Xt(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?j(this.value_):this.value_,this.lazyHash_=y(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:((0,o.hu)(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,i=typeof this.value_,r=t.VALUE_TYPE_ORDER.indexOf(n),s=t.VALUE_TYPE_ORDER.indexOf(i);return(0,o.hu)(r>=0,"Unknown leaf type: "+n),(0,o.hu)(s>=0,"Unknown leaf type: "+i),r===s?"object"===i?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:s-r},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}();var Jt,te,ee=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,s.ZT)(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),i=e.node.getPriority(),r=n.compareTo(i);return 0===r?O(t.name,e.name):r},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return jt.MIN},e.prototype.maxPost=function(){return new jt(P,new Zt("[PRIORITY-POST]",$t))},e.prototype.makePost=function(t,e){var n=Yt(t);return new jt(e,new Zt("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(Ft)),ne=Math.log(2),ie=function(){function t(t){var e;this.count=(e=t+1,parseInt(Math.log(e)/ne,10)),this.current_=this.count-1;var n,i=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=t+1&i}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),re=function(t,e,n,i){t.sort(e);var r=function(e,i){var o,s,a=i-e;if(0===a)return null;if(1===a)return o=t[e],s=n?n(o):o,new Wt(s,o.node,Wt.BLACK,null,null);var u=parseInt(a/2,10)+e,c=r(e,u),l=r(u+1,i);return o=t[u],s=n?n(o):o,new Wt(s,o.node,Wt.BLACK,c,l)},o=function(e){for(var i=null,o=null,s=t.length,a=function(e,i){var o=s-e,a=s;s-=e;var c=r(o+1,a),l=t[o],h=n?n(l):l;u(new Wt(h,l.node,i,null,c))},u=function(t){i?(i.left=t,i=t):(o=t,i=t)},c=0;c<e.count;++c){var l=e.nextBitIsOne(),h=Math.pow(2,e.count-(c+1));l?a(h,Wt.BLACK):(a(h,Wt.BLACK),a(h,Wt.RED))}return o}(new ie(t.length));return new Ht(i||e,o)},oe={},se=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return(0,o.hu)(oe&&ee,"ChildrenNode.ts has not been loaded"),Jt=Jt||new t({".priority":oe},{".priority":ee})},enumerable:!1,configurable:!0}),t.prototype.get=function(t){var e=(0,o.DV)(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e instanceof Ht?e:null},t.prototype.hasIndex=function(t){return(0,o.r3)(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){(0,o.hu)(e!==Ut,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var i,r=[],a=!1,u=n.getIterator(jt.Wrap),c=u.getNext();c;)a=a||e.isDefinedOn(c.node),r.push(c),c=u.getNext();i=a?re(r,e.getCompare()):oe;var l=e.toString(),h=(0,s.pi)({},this.indexSet_);h[l]=e;var f=(0,s.pi)({},this.indexes_);return f[l]=i,new t(f,h)},t.prototype.addToIndexes=function(e,n){var i=this;return new t((0,o.UI)(this.indexes_,(function(t,r){var s=(0,o.DV)(i.indexSet_,r);if((0,o.hu)(s,"Missing index implementation for "+r),t===oe){if(s.isDefinedOn(e.node)){for(var a=[],u=n.getIterator(jt.Wrap),c=u.getNext();c;)c.name!==e.name&&a.push(c),c=u.getNext();return a.push(e),re(a,s.getCompare())}return oe}var l=n.get(e.name),h=t;return l&&(h=h.remove(new jt(e.name,l))),h.insert(e,e.node)})),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t((0,o.UI)(this.indexes_,(function(t){if(t===oe)return t;var i=n.get(e.name);return i?t.remove(new jt(e.name,i)):t})),this.indexSet_)},t}(),ae=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Qt(this.priorityNode_),this.children_.isEmpty()&&(0,o.hu)(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return te||(te=new t(new Ht(Kt),null,se.Default))},enumerable:!1,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||te},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?te:e},t.prototype.getChild=function(t){var e=mt(t);return null===e?this:this.getImmediateChild(e).getChild(_t(t))},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if((0,o.hu)(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var i=new jt(e,n),r=void 0,s=void 0;n.isEmpty()?(r=this.children_.remove(e),s=this.indexMap_.removeFromIndexes(i,this.children_)):(r=this.children_.insert(e,n),s=this.indexMap_.addToIndexes(i,this.children_));var a=r.isEmpty()?te:this.priorityNode_;return new t(r,a,s)},t.prototype.updateChild=function(t,e){var n=mt(t);if(null===n)return e;(0,o.hu)(".priority"!==mt(t)||1===yt(t),".priority must be the last token in a path");var i=this.getImmediateChild(n).updateChild(_t(t),e);return this.updateImmediateChild(n,i)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},i=0,r=0,o=!0;if(this.forEachChild(ee,(function(s,a){n[s]=a.val(e),i++,o&&t.INTEGER_REGEXP_.test(s)?r=Math.max(r,Number(s)):o=!1})),!e&&o&&r<2*i){var s=[];for(var a in n)s[a]=n[a];return s}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+Xt(this.getPriority().val())+":"),this.forEachChild(ee,(function(e,n){var i=n.hash();""!==i&&(t+=":"+e+":"+i)})),this.lazyHash_=""===t?"":y(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var i=this.resolveIndex_(n);if(i){var r=i.getPredecessorKey(new jt(t,e));return r?r.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new jt(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new jt(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal((function(t){return e(t.name,t.node)})):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,(function(t){return t}));for(var i=this.children_.getIteratorFrom(t.name,jt.Wrap),r=i.peek();null!=r&&e.compare(r,t)<0;)i.getNext(),r=i.peek();return i},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,(function(t){return t}));for(var i=this.children_.getReverseIteratorFrom(t.name,jt.Wrap),r=i.peek();null!=r&&e.compare(r,t)>0;)i.getNext(),r=i.peek();return i},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===ue?-1:0},t.prototype.withIndex=function(e){if(e===Ut||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===Ut||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(ee),i=e.getIterator(ee),r=n.getNext(),o=i.getNext();r&&o;){if(r.name!==o.name||!r.node.equals(o.node))return!1;r=n.getNext(),o=i.getNext()}return null===r&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===Ut?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),ue=new(function(t){function e(){return t.call(this,new Ht(Kt),ae.EMPTY_NODE,se.Default)||this}return(0,s.ZT)(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return ae.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(ae));Object.defineProperties(jt,{MIN:{value:new jt(N,ae.EMPTY_NODE)},MAX:{value:new jt(P,ue)}}),qt.__EMPTY_NODE=ae.EMPTY_NODE,Zt.__childrenNodeConstructor=ae,Dt=ue,function(t){$t=t}(ue);function ce(t,e){if(void 0===e&&(e=null),null===t)return ae.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),(0,o.hu)(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new Zt(t,ce(e));if(t instanceof Array){var n=ae.EMPTY_NODE;return M(t,(function(e,i){if((0,o.r3)(t,e)&&"."!==e.substring(0,1)){var r=ce(i);!r.isLeafNode()&&r.isEmpty()||(n=n.updateImmediateChild(e,r))}})),n.updatePriority(ce(e))}var i=[],r=!1;if(M(t,(function(t,e){if("."!==t.substring(0,1)){var n=ce(e);n.isEmpty()||(r=r||!n.getPriority().isEmpty(),i.push(new jt(t,n)))}})),0===i.length)return ae.EMPTY_NODE;var s=re(i,zt,(function(t){return t.name}),Kt);if(r){var a=re(i,ee.getCompare());return new ae(s,ce(e),new se({".priority":a},{".priority":ee}))}return new ae(s,ce(e),se.Default)}!function(t){Yt=t}(ce);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var le,he,fe=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,(0,o.hu)(!It(e)&&".priority"!==mt(e),"Can't create PathIndex with empty path or .priority key"),n}return(0,s.ZT)(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),i=this.extractChild(e.node),r=n.compareTo(i);return 0===r?O(t.name,e.name):r},e.prototype.makePost=function(t,e){var n=ce(t),i=ae.EMPTY_NODE.updateChild(this.indexPath_,n);return new jt(e,i)},e.prototype.maxPost=function(){var t=ae.EMPTY_NODE.updateChild(this.indexPath_,ue);return new jt(P,t)},e.prototype.toString=function(){return wt(this.indexPath_,0).join("/")},e}(Ft),de=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,s.ZT)(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?O(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return jt.MIN},e.prototype.maxPost=function(){return jt.MAX},e.prototype.makePost=function(t,e){var n=ce(t);return new jt(e,n)},e.prototype.toString=function(){return".value"},e}(Ft)),pe="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",ve=(le=0,he=[],function(t){var e,n=t===le;le=t;var i=new Array(8);for(e=7;e>=0;e--)i[e]=pe.charAt(t%64),t=Math.floor(t/64);(0,o.hu)(0===t,"Cannot push at time == 0");var r=i.join("");if(n){for(e=11;e>=0&&63===he[e];e--)he[e]=0;he[e]++}else for(e=0;e<12;e++)he[e]=Math.floor(64*Math.random());for(e=0;e<12;e++)r+=pe.charAt(he[e]);return(0,o.hu)(20===r.length,"nextPushId: Length should be 20."),r}),ge=function(t){if("2147483647"===t)return"-";var e=V(t);if(null!=e)return""+(e+1);for(var n=new Array(t.length),i=0;i<n.length;i++)n[i]=t.charAt(i);if(n.length<786)return n.push("-"),n.join("");for(var r=n.length-1;r>=0&&"z"===n[r];)r--;if(-1===r)return P;var o=n[r],s=pe.charAt(pe.indexOf(o)+1);return n[r]=s,n.slice(0,r+1).join("")},me=function(t){if("-2147483648"===t)return N;var e=V(t);if(null!=e)return""+(e-1);for(var n=new Array(t.length),i=0;i<n.length;i++)n[i]=t.charAt(i);return"-"===n[n.length-1]?1===n.length?"2147483647":(delete n[n.length-1],n.join("")):(n[n.length-1]=pe.charAt(pe.indexOf(n[n.length-1])-1),n.join("")+"z".repeat(786-n.length))};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function ye(t){return{type:"value",snapshotNode:t}}function _e(t,e){return{type:"child_added",snapshotNode:e,childName:t}}function be(t,e){return{type:"child_removed",snapshotNode:e,childName:t}}function we(t,e,n){return{type:"child_changed",snapshotNode:e,childName:t,oldSnap:n}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ee=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,i,r,s){(0,o.hu)(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var a=t.getImmediateChild(e);return a.getChild(i).equals(n.getChild(i))&&a.isEmpty()===n.isEmpty()?t:(null!=s&&(n.isEmpty()?t.hasChild(e)?s.trackChildChange(be(e,a)):(0,o.hu)(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):a.isEmpty()?s.trackChildChange(_e(e,n)):s.trackChildChange(we(e,n,a))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(ee,(function(t,i){e.hasChild(t)||n.trackChildChange(be(t,i))})),e.isLeafNode()||e.forEachChild(ee,(function(e,i){if(t.hasChild(e)){var r=t.getImmediateChild(e);r.equals(i)||n.trackChildChange(we(e,i,r))}else n.trackChildChange(_e(e,i))}))),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?ae.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),Ce=function(){function t(e){this.indexedFilter_=new Ee(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,i,r,o){return this.matches(new jt(e,n))||(n=ae.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,i,r,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=ae.EMPTY_NODE);var i=e.withIndex(this.index_);i=i.updatePriority(ae.EMPTY_NODE);var r=this;return e.forEachChild(ee,(function(t,e){r.matches(new jt(t,e))||(i=i.updateImmediateChild(t,ae.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(t,i,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),Ie=function(){function t(t){this.rangedFilter_=new Ce(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,i,r,o){return this.rangedFilter_.matches(new jt(e,n))||(n=ae.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,i,r,o):this.fullLimitUpdateChild_(t,e,n,r,o)},t.prototype.updateFullNode=function(t,e,n){var i;if(e.isLeafNode()||e.isEmpty())i=ae.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){i=ae.EMPTY_NODE.withIndex(this.index_);var r=void 0;r=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;r.hasNext()&&o<this.limit_;){var s=r.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),s)<=0:this.index_.compare(s,this.rangedFilter_.getEndPost())<=0))break;i=i.updateImmediateChild(s.name,s.node),o++}}else{i=(i=e.withIndex(this.index_)).updatePriority(ae.EMPTY_NODE);var a=void 0,u=void 0,c=void 0;r=void 0;if(this.reverse_){r=i.getReverseIterator(this.index_),a=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var l=this.index_.getCompare();c=function(t,e){return l(e,t)}}else r=i.getIterator(this.index_),a=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var h=!1;r.hasNext();){s=r.getNext();!h&&c(a,s)<=0&&(h=!0),h&&o<this.limit_&&c(s,u)<=0?o++:i=i.updateImmediateChild(s.name,ae.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,i,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,i,r){var s;if(this.reverse_){var a=this.index_.getCompare();s=function(t,e){return a(e,t)}}else s=this.index_.getCompare();var u=t;(0,o.hu)(u.numChildren()===this.limit_,"");var c=new jt(e,n),l=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),h=this.rangedFilter_.matches(c);if(u.hasChild(e)){for(var f=u.getImmediateChild(e),d=i.getChildAfterChild(this.index_,l,this.reverse_);null!=d&&(d.name===e||u.hasChild(d.name));)d=i.getChildAfterChild(this.index_,d,this.reverse_);var p=null==d?1:s(d,c);if(h&&!n.isEmpty()&&p>=0)return null!=r&&r.trackChildChange(we(e,n,f)),u.updateImmediateChild(e,n);null!=r&&r.trackChildChange(be(e,f));var v=u.updateImmediateChild(e,ae.EMPTY_NODE);return null!=d&&this.rangedFilter_.matches(d)?(null!=r&&r.trackChildChange(_e(d.name,d.node)),v.updateImmediateChild(d.name,d.node)):v}return n.isEmpty()?t:h&&s(l,c)>=0?(null!=r&&(r.trackChildChange(be(l.name,l.node)),r.trackChildChange(_e(e,n))),u.updateImmediateChild(e,n).updateImmediateChild(l.name,ae.EMPTY_NODE)):t},t}(),Te=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.startAfterSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.endBeforeSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=ee}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.hasStartAfter=function(){return this.startAfterSet_},t.prototype.hasEndBefore=function(){return this.endBeforeSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:"l"===this.viewFrom_},t.prototype.getIndexStartValue=function(){return(0,o.hu)(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return(0,o.hu)(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:N},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return(0,o.hu)(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return(0,o.hu)(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:P},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return(0,o.hu)(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===ee},t.prototype.copy=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ke(t,e,n){var i=t.copy();return i.startSet_=!0,void 0===e&&(e=null),i.indexStartValue_=e,null!=n?(i.startNameSet_=!0,i.indexStartName_=n):(i.startNameSet_=!1,i.indexStartName_=""),i}function Se(t,e,n){var i=t.copy();return i.endSet_=!0,void 0===e&&(e=null),i.indexEndValue_=e,void 0!==n?(i.endNameSet_=!0,i.indexEndName_=n):(i.endNameSet_=!1,i.indexEndName_=""),i}function Ae(t,e){var n=t.copy();return n.index_=e,n}function Ne(t){var e,n={};return t.isDefault()||(t.index_===ee?e="$priority":t.index_===de?e="$value":t.index_===Ut?e="$key":((0,o.hu)(t.index_ instanceof fe,"Unrecognized index type!"),e=t.index_.toString()),n.orderBy=(0,o.Pz)(e),t.startSet_&&(n.startAt=(0,o.Pz)(t.indexStartValue_),t.startNameSet_&&(n.startAt+=","+(0,o.Pz)(t.indexStartName_))),t.endSet_&&(n.endAt=(0,o.Pz)(t.indexEndValue_),t.endNameSet_&&(n.endAt+=","+(0,o.Pz)(t.indexEndName_))),t.limitSet_&&(t.isViewFromLeft()?n.limitToFirst=t.limit_:n.limitToLast=t.limit_)),n}function Pe(t){var e={};if(t.startSet_&&(e.sp=t.indexStartValue_,t.startNameSet_&&(e.sn=t.indexStartName_)),t.endSet_&&(e.ep=t.indexEndValue_,t.endNameSet_&&(e.en=t.indexEndName_)),t.limitSet_){e.l=t.limit_;var n=t.viewFrom_;""===n&&(n=t.isViewFromLeft()?"l":"r"),e.vf=n}return t.index_!==ee&&(e.i=t.index_.toString()),e}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Oe=function(t){function e(e,n,i,r){var o=t.call(this)||this;return o.repoInfo_=e,o.onDataUpdate_=n,o.authTokenProvider_=i,o.appCheckTokenProvider_=r,o.log_=I("p:rest:"),o.listens_={},o}return(0,s.ZT)(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:((0,o.hu)(t._queryParams.isDefault(),"should have a tag if it's not a default query."),t._path.toString())},e.prototype.listen=function(t,n,i,r){var s=this,a=t._path.toString();this.log_("Listen called for "+a+" "+t._queryIdentifier);var u=e.getListenId_(t,i),c={};this.listens_[u]=c;var l=Ne(t._queryParams);this.restRequest_(a+".json",l,(function(t,e){var n=e;(404===t&&(n=null,t=null),null===t&&s.onDataUpdate_(a,n,!1,i),(0,o.DV)(s.listens_,u)===c)&&r(t?401===t?"permission_denied":"rest_error:"+t:"ok",null)}))},e.prototype.unlisten=function(t,n){var i=e.getListenId_(t,n);delete this.listens_[i]},e.prototype.get=function(t){var e=this,n=Ne(t._queryParams),i=t._path.toString(),r=new o.BH;return this.restRequest_(i+".json",n,(function(t,n){var o=n;404===t&&(o=null,t=null),null===t?(e.onDataUpdate_(i,o,!1,null),r.resolve(o)):r.reject(new Error(o))})),r.promise},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var i=this;return void 0===e&&(e={}),e.format="export",Promise.all([this.authTokenProvider_.getToken(!1),this.appCheckTokenProvider_.getToken(!1)]).then((function(r){var a=(0,s.CR)(r,2),u=a[0],c=a[1];u&&u.accessToken&&(e.auth=u.accessToken),c&&c.token&&(e.ac=c.token);var l=(i.repoInfo_.secure?"https://":"http://")+i.repoInfo_.host+t+"?ns="+i.repoInfo_.namespace+(0,o.xO)(e);i.log_("Sending REST request for "+l);var h=new XMLHttpRequest;h.onreadystatechange=function(){if(n&&4===h.readyState){i.log_("REST Response for "+l+" received. status:",h.status,"response:",h.responseText);var t=null;if(h.status>=200&&h.status<300){try{t=(0,o.cI)(h.responseText)}catch(t){S("Failed to parse JSON response for "+l+": "+h.responseText)}n(null,t)}else 401!==h.status&&404!==h.status&&S("Got unsuccessful REST response for "+l+" Status: "+h.status),n(h.status);n=null}},h.open("GET",l,!0),h.send()}))},e}(ft),xe=function(){function t(){this.rootNode_=ae.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function De(){return{value:null,children:new Map}}function Re(t,e,n){if(It(e))t.value=n,t.children.clear();else if(null!==t.value)t.value=t.value.updateChild(e,n);else{var i=mt(e);t.children.has(i)||t.children.set(i,De()),Re(t.children.get(i),e=_t(e),n)}}function Le(t,e){if(It(e))return t.value=null,t.children.clear(),!0;if(null!==t.value){if(t.value.isLeafNode())return!1;var n=t.value;return t.value=null,n.forEachChild(ee,(function(e,n){Re(t,new vt(e),n)})),Le(t,e)}if(t.children.size>0){var i=mt(e);if(e=_t(e),t.children.has(i))Le(t.children.get(i),e)&&t.children.delete(i);return 0===t.children.size}return!0}function Me(t,e,n){null!==t.value?n(e,t.value):function(t,e){t.children.forEach((function(t,n){e(n,t)}))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t,(function(t,i){Me(i,new vt(e.toString()+"/"+t),n)}))}var je,Fe=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=(0,s.pi)({},t);return this.last_&&M(this.last_,(function(t,n){e[t]=e[t]-n})),this.last_=t,e},t}(),qe=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new Fe(t);var n=1e4+2e4*Math.random();B(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},i=!1;M(e,(function(e,r){r>0&&(0,o.r3)(t.statsToReport_,e)&&(n[e]=r,i=!0)})),i&&this.server_.reportStats(n),B(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Ue(t){return{fromUser:!1,fromServer:!0,queryId:t,tagged:!0}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(je||(je={}));var Ve,We=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=je.ACK_USER_WRITE,this.source={fromUser:!0,fromServer:!1,queryId:null,tagged:!1}}return t.prototype.operationForChild=function(e){if(It(this.path)){if(null!=this.affectedTree.value)return(0,o.hu)(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new vt(e));return new t(gt(),n,this.revert)}return(0,o.hu)(mt(this.path)===e,"operationForChild called for unrelated child."),new t(_t(this.path),this.affectedTree,this.revert)},t}(),Be=function(){function t(t,e){this.source=t,this.path=e,this.type=je.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return It(this.path)?new t(this.source,gt()):new t(this.source,_t(this.path))},t}(),He=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=je.OVERWRITE}return t.prototype.operationForChild=function(e){return It(this.path)?new t(this.source,gt(),this.snap.getImmediateChild(e)):new t(this.source,_t(this.path),this.snap)},t}(),ze=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=je.MERGE}return t.prototype.operationForChild=function(e){if(It(this.path)){var n=this.children.subtree(new vt(e));return n.isEmpty()?null:n.value?new He(this.source,gt(),n.value):new t(this.source,gt(),n)}return(0,o.hu)(mt(this.path)===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,_t(this.path),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),Ke=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(It(t))return this.isFullyInitialized()&&!this.filtered_;var e=mt(t);return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),Ge=function(t){this.query_=t,this.index_=this.query_._queryParams.getIndex()};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Ye(t,e,n,i,r,s){var a=i.filter((function(t){return t.type===n}));a.sort((function(e,n){return function(t,e,n){if(null==e.childName||null==n.childName)throw(0,o.g5)("Should only compare child_ events.");var i=new jt(e.childName,e.snapshotNode),r=new jt(n.childName,n.snapshotNode);return t.index_.compare(i,r)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t,e,n)})),a.forEach((function(n){var i=function(t,e,n){return"value"===e.type||"child_removed"===e.type||(e.prevName=n.getPredecessorChildName(e.childName,e.snapshotNode,t.index_)),e}(t,n,s);r.forEach((function(r){r.respondsTo(n.type)&&e.push(r.createEvent(i,t.query_))}))}))}function $e(t,e){return{eventCache:t,serverCache:e}}function Xe(t,e,n,i){return $e(new Ke(e,n,i),t.serverCache)}function Qe(t,e,n,i){return $e(t.eventCache,new Ke(e,n,i))}function Ze(t){return t.eventCache.isFullyInitialized()?t.eventCache.getNode():null}function Je(t){return t.serverCache.isFullyInitialized()?t.serverCache.getNode():null}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var tn=function(){function t(t,e){void 0===e&&(Ve||(Ve=new Ht(x)),e=Ve),this.value=t,this.children=e}return t.fromObject=function(e){var n=new t(null);return M(e,(function(t,e){n=n.set(new vt(t),e)})),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:gt(),value:this.value};if(It(t))return null;var n=mt(t),i=this.children.get(n);if(null!==i){var r=i.findRootMostMatchingPathAndValue(_t(t),e);return null!=r?{path:Ct(new vt(n),r.path),value:r.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,(function(){return!0}))},t.prototype.subtree=function(e){if(It(e))return this;var n=mt(e),i=this.children.get(n);return null!==i?i.subtree(_t(e)):new t(null)},t.prototype.set=function(e,n){if(It(e))return new t(n,this.children);var i=mt(e),r=(this.children.get(i)||new t(null)).set(_t(e),n),o=this.children.insert(i,r);return new t(this.value,o)},t.prototype.remove=function(e){if(It(e))return this.children.isEmpty()?new t(null):new t(null,this.children);var n=mt(e),i=this.children.get(n);if(i){var r=i.remove(_t(e)),o=void 0;return o=r.isEmpty()?this.children.remove(n):this.children.insert(n,r),null===this.value&&o.isEmpty()?new t(null):new t(this.value,o)}return this},t.prototype.get=function(t){if(It(t))return this.value;var e=mt(t),n=this.children.get(e);return n?n.get(_t(t)):null},t.prototype.setTree=function(e,n){if(It(e))return n;var i=mt(e),r=(this.children.get(i)||new t(null)).setTree(_t(e),n),o=void 0;return o=r.isEmpty()?this.children.remove(i):this.children.insert(i,r),new t(this.value,o)},t.prototype.fold=function(t){return this.fold_(gt(),t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal((function(i,r){n[i]=r.fold_(Ct(t,i),e)})),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,gt(),e)},t.prototype.findOnPath_=function(t,e,n){var i=!!this.value&&n(e,this.value);if(i)return i;if(It(t))return null;var r=mt(t),o=this.children.get(r);return o?o.findOnPath_(_t(t),Ct(e,r),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,gt(),e)},t.prototype.foreachOnPath_=function(e,n,i){if(It(e))return this;this.value&&i(n,this.value);var r=mt(e),o=this.children.get(r);return o?o.foreachOnPath_(_t(e),Ct(n,r),i):new t(null)},t.prototype.foreach=function(t){this.foreach_(gt(),t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal((function(n,i){i.foreach_(Ct(t,n),e)})),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal((function(e,n){n.value&&t(e,n.value)}))},t}(),en=function(){function t(t){this.writeTree_=t}return t.empty=function(){return new t(new tn(null))},t}();function nn(t,e,n){if(It(e))return new en(new tn(n));var i=t.writeTree_.findRootMostValueAndPath(e);if(null!=i){var r=i.path,o=i.value,s=Tt(r,e);return o=o.updateChild(s,n),new en(t.writeTree_.set(r,o))}var a=new tn(n),u=t.writeTree_.setTree(e,a);return new en(u)}function rn(t,e,n){var i=t;return M(n,(function(t,n){i=nn(i,Ct(e,t),n)})),i}function on(t,e){if(It(e))return en.empty();var n=t.writeTree_.setTree(e,new tn(null));return new en(n)}function sn(t,e){return null!=an(t,e)}function an(t,e){var n=t.writeTree_.findRootMostValueAndPath(e);return null!=n?t.writeTree_.get(n.path).getChild(Tt(n.path,e)):null}function un(t){var e=[],n=t.writeTree_.value;return null!=n?n.isLeafNode()||n.forEachChild(ee,(function(t,n){e.push(new jt(t,n))})):t.writeTree_.children.inorderTraversal((function(t,n){null!=n.value&&e.push(new jt(t,n.value))})),e}function cn(t,e){if(It(e))return t;var n=an(t,e);return new en(null!=n?new tn(n):t.writeTree_.subtree(e))}function ln(t){return t.writeTree_.isEmpty()}function hn(t,e){return fn(gt(),t.writeTree_,e)}function fn(t,e,n){if(null!=e.value)return n.updateChild(t,e.value);var i=null;return e.children.inorderTraversal((function(e,r){".priority"===e?((0,o.hu)(null!==r.value,"Priority writes must always be leaf nodes"),i=r.value):n=fn(Ct(t,e),r,n)})),n.getChild(t).isEmpty()||null===i||(n=n.updateChild(Ct(t,".priority"),i)),n}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function dn(t,e){return kn(e,t)}function pn(t,e){var n=t.allWrites.findIndex((function(t){return t.writeId===e}));(0,o.hu)(n>=0,"removeWrite called with nonexistent writeId.");var i=t.allWrites[n];t.allWrites.splice(n,1);for(var r=i.visible,s=!1,a=t.allWrites.length-1;r&&a>=0;){var u=t.allWrites[a];u.visible&&(a>=n&&vn(u,i.path)?r=!1:At(i.path,u.path)&&(s=!0)),a--}if(r){if(s)return function(t){t.visibleWrites=mn(t.allWrites,gn,gt()),t.allWrites.length>0?t.lastWriteId=t.allWrites[t.allWrites.length-1].writeId:t.lastWriteId=-1}(t),!0;i.snap?t.visibleWrites=on(t.visibleWrites,i.path):M(i.children,(function(e){t.visibleWrites=on(t.visibleWrites,Ct(i.path,e))}));return!0}return!1}function vn(t,e){if(t.snap)return At(t.path,e);for(var n in t.children)if(t.children.hasOwnProperty(n)&&At(Ct(t.path,n),e))return!0;return!1}function gn(t){return t.visible}function mn(t,e,n){for(var i=en.empty(),r=0;r<t.length;++r){var s=t[r];if(e(s)){var a=s.path,u=void 0;if(s.snap)At(n,a)?i=nn(i,u=Tt(n,a),s.snap):At(a,n)&&(u=Tt(a,n),i=nn(i,gt(),s.snap.getChild(u)));else{if(!s.children)throw(0,o.g5)("WriteRecord should have .snap or .children");if(At(n,a))i=rn(i,u=Tt(n,a),s.children);else if(At(a,n))if(It(u=Tt(a,n)))i=rn(i,gt(),s.children);else{var c=(0,o.DV)(s.children,mt(u));if(c){var l=c.getChild(_t(u));i=nn(i,gt(),l)}}}}}return i}function yn(t,e,n,i,r){if(i||r){var o=cn(t.visibleWrites,e);if(!r&&ln(o))return n;if(r||null!=n||sn(o,gt())){return hn(mn(t.allWrites,(function(t){return(t.visible||r)&&(!i||!~i.indexOf(t.writeId))&&(At(t.path,e)||At(e,t.path))}),e),n||ae.EMPTY_NODE)}return null}var s=an(t.visibleWrites,e);if(null!=s)return s;var a=cn(t.visibleWrites,e);return ln(a)?n:null!=n||sn(a,gt())?hn(a,n||ae.EMPTY_NODE):null}function _n(t,e,n,i){return yn(t.writeTree,t.treePath,e,n,i)}function bn(t,e){return function(t,e,n){var i=ae.EMPTY_NODE,r=an(t.visibleWrites,e);if(r)return r.isLeafNode()||r.forEachChild(ee,(function(t,e){i=i.updateImmediateChild(t,e)})),i;if(n){var o=cn(t.visibleWrites,e);return n.forEachChild(ee,(function(t,e){var n=hn(cn(o,new vt(t)),e);i=i.updateImmediateChild(t,n)})),un(o).forEach((function(t){i=i.updateImmediateChild(t.name,t.node)})),i}return un(cn(t.visibleWrites,e)).forEach((function(t){i=i.updateImmediateChild(t.name,t.node)})),i}(t.writeTree,t.treePath,e)}function wn(t,e,n,i){return function(t,e,n,i,r){(0,o.hu)(i||r,"Either existingEventSnap or existingServerSnap must exist");var s=Ct(e,n);if(sn(t.visibleWrites,s))return null;var a=cn(t.visibleWrites,s);return ln(a)?r.getChild(n):hn(a,r.getChild(n))}(t.writeTree,t.treePath,e,n,i)}function En(t,e){return function(t,e){return an(t.visibleWrites,e)}(t.writeTree,Ct(t.treePath,e))}function Cn(t,e,n,i,r,o){return function(t,e,n,i,r,o,s){var a,u=cn(t.visibleWrites,e),c=an(u,gt());if(null!=c)a=c;else{if(null==n)return[];a=hn(u,n)}if((a=a.withIndex(s)).isEmpty()||a.isLeafNode())return[];for(var l=[],h=s.getCompare(),f=o?a.getReverseIteratorFrom(i,s):a.getIteratorFrom(i,s),d=f.getNext();d&&l.length<r;)0!==h(d,i)&&l.push(d),d=f.getNext();return l}(t.writeTree,t.treePath,e,n,i,r,o)}function In(t,e,n){return function(t,e,n,i){var r=Ct(e,n),o=an(t.visibleWrites,r);return null!=o?o:i.isCompleteForChild(n)?hn(cn(t.visibleWrites,r),i.getNode().getImmediateChild(n)):null}(t.writeTree,t.treePath,e,n)}function Tn(t,e){return kn(Ct(t.treePath,e),t.writeTree)}function kn(t,e){return{treePath:t,writeTree:e}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Sn=function(){function t(){this.changeMap=new Map}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;(0,o.hu)("child_added"===e||"child_changed"===e||"child_removed"===e,"Only child changes supported for tracking"),(0,o.hu)(".priority"!==n,"Only non-priority child changes can be tracked.");var i=this.changeMap.get(n);if(i){var r=i.type;if("child_added"===e&&"child_removed"===r)this.changeMap.set(n,we(n,t.snapshotNode,i.snapshotNode));else if("child_removed"===e&&"child_added"===r)this.changeMap.delete(n);else if("child_removed"===e&&"child_changed"===r)this.changeMap.set(n,be(n,i.oldSnap));else if("child_changed"===e&&"child_added"===r)this.changeMap.set(n,_e(n,t.snapshotNode));else{if("child_changed"!==e||"child_changed"!==r)throw(0,o.g5)("Illegal combination of changes: "+t+" occurred after "+i);this.changeMap.set(n,we(n,t.snapshotNode,i.oldSnap))}}else this.changeMap.set(n,t)},t.prototype.getChanges=function(){return Array.from(this.changeMap.values())},t}(),An=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),Nn=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.eventCache;if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new Ke(this.optCompleteServerCache_,!0,!1):this.viewCache_.serverCache;return In(this.writes_,t,n)},t.prototype.getChildAfterChild=function(t,e,n){var i=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:Je(this.viewCache_),r=Cn(this.writes_,i,e,1,n,t);return 0===r.length?null:r[0]},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Pn(t,e,n,i,r){var s,a,u=new Sn;if(n.type===je.OVERWRITE){var c=n;c.source.fromUser?s=Dn(t,e,c.path,c.snap,i,r,u):((0,o.hu)(c.source.fromServer,"Unknown source."),a=c.source.tagged||e.serverCache.isFiltered()&&!It(c.path),s=xn(t,e,c.path,c.snap,i,r,a,u))}else if(n.type===je.MERGE){var l=n;l.source.fromUser?s=function(t,e,n,i,r,o,s){var a=e;return i.foreach((function(i,u){var c=Ct(n,i);Rn(e,mt(c))&&(a=Dn(t,a,c,u,r,o,s))})),i.foreach((function(i,u){var c=Ct(n,i);Rn(e,mt(c))||(a=Dn(t,a,c,u,r,o,s))})),a}(t,e,l.path,l.children,i,r,u):((0,o.hu)(l.source.fromServer,"Unknown source."),a=l.source.tagged||e.serverCache.isFiltered(),s=Mn(t,e,l.path,l.children,i,r,a,u))}else if(n.type===je.ACK_USER_WRITE){var h=n;s=h.revert?function(t,e,n,i,r,s){var a;if(null!=En(i,n))return e;var u=new Nn(i,e,r),c=e.eventCache.getNode(),l=void 0;if(It(n)||".priority"===mt(n)){var h=void 0;if(e.serverCache.isFullyInitialized())h=_n(i,Je(e));else{var f=e.serverCache.getNode();(0,o.hu)(f instanceof ae,"serverChildren would be complete if leaf node"),h=bn(i,f)}h=h,l=t.filter.updateFullNode(c,h,s)}else{var d=mt(n),p=In(i,d,e.serverCache);null==p&&e.serverCache.isCompleteForChild(d)&&(p=c.getImmediateChild(d)),(l=null!=p?t.filter.updateChild(c,d,p,_t(n),u,s):e.eventCache.getNode().hasChild(d)?t.filter.updateChild(c,d,ae.EMPTY_NODE,_t(n),u,s):c).isEmpty()&&e.serverCache.isFullyInitialized()&&(a=_n(i,Je(e))).isLeafNode()&&(l=t.filter.updateFullNode(l,a,s))}return a=e.serverCache.isFullyInitialized()||null!=En(i,gt()),Xe(e,l,a,t.filter.filtersNodes())}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t,e,h.path,i,r,u):function(t,e,n,i,r,o,s){if(null!=En(r,n))return e;var a=e.serverCache.isFiltered(),u=e.serverCache;if(null!=i.value){if(It(n)&&u.isFullyInitialized()||u.isCompleteForPath(n))return xn(t,e,n,u.getNode().getChild(n),r,o,a,s);if(It(n)){var c=new tn(null);return u.getNode().forEachChild(Ut,(function(t,e){c=c.set(new vt(t),e)})),Mn(t,e,n,c,r,o,a,s)}return e}var l=new tn(null);return i.foreach((function(t,e){var i=Ct(n,t);u.isCompleteForPath(i)&&(l=l.set(t,u.getNode().getChild(i)))})),Mn(t,e,n,l,r,o,a,s)}(t,e,h.path,h.affectedTree,i,r,u)}else{if(n.type!==je.LISTEN_COMPLETE)throw(0,o.g5)("Unknown operation type: "+n.type);s=function(t,e,n,i,r){var o=e.serverCache,s=Qe(e,o.getNode(),o.isFullyInitialized()||It(n),o.isFiltered());return On(t,s,n,i,An,r)}(t,e,n.path,i,u)}var f=u.getChanges();return function(t,e,n){var i=e.eventCache;if(i.isFullyInitialized()){var r=i.getNode().isLeafNode()||i.getNode().isEmpty(),o=Ze(t);(n.length>0||!t.eventCache.isFullyInitialized()||r&&!i.getNode().equals(o)||!i.getNode().getPriority().equals(o.getPriority()))&&n.push(ye(Ze(e)))}}(e,s,f),{viewCache:s,changes:f}}function On(t,e,n,i,r,s){var a=e.eventCache;if(null!=En(i,n))return e;var u=void 0,c=void 0;if(It(n))if((0,o.hu)(e.serverCache.isFullyInitialized(),"If change path is empty, we must have complete server data"),e.serverCache.isFiltered()){var l=Je(e),h=bn(i,l instanceof ae?l:ae.EMPTY_NODE);u=t.filter.updateFullNode(e.eventCache.getNode(),h,s)}else{var f=_n(i,Je(e));u=t.filter.updateFullNode(e.eventCache.getNode(),f,s)}else{var d=mt(n);if(".priority"===d){(0,o.hu)(1===yt(n),"Can't have a priority with additional path components");var p=a.getNode(),v=wn(i,n,p,c=e.serverCache.getNode());u=null!=v?t.filter.updatePriority(p,v):a.getNode()}else{var g=_t(n),m=void 0;if(a.isCompleteForChild(d)){c=e.serverCache.getNode();var y=wn(i,n,a.getNode(),c);m=null!=y?a.getNode().getImmediateChild(d).updateChild(g,y):a.getNode().getImmediateChild(d)}else m=In(i,d,e.serverCache);u=null!=m?t.filter.updateChild(a.getNode(),d,m,g,r,s):a.getNode()}}return Xe(e,u,a.isFullyInitialized()||It(n),t.filter.filtersNodes())}function xn(t,e,n,i,r,o,s,a){var u,c=e.serverCache,l=s?t.filter:t.filter.getIndexedFilter();if(It(n))u=l.updateFullNode(c.getNode(),i,null);else if(l.filtersNodes()&&!c.isFiltered()){var h=c.getNode().updateChild(n,i);u=l.updateFullNode(c.getNode(),h,null)}else{var f=mt(n);if(!c.isCompleteForPath(n)&&yt(n)>1)return e;var d=_t(n),p=c.getNode().getImmediateChild(f).updateChild(d,i);u=".priority"===f?l.updatePriority(c.getNode(),p):l.updateChild(c.getNode(),f,p,d,An,null)}var v=Qe(e,u,c.isFullyInitialized()||It(n),l.filtersNodes());return On(t,v,n,r,new Nn(r,v,o),a)}function Dn(t,e,n,i,r,o,s){var a,u,c=e.eventCache,l=new Nn(r,e,o);if(It(n))u=t.filter.updateFullNode(e.eventCache.getNode(),i,s),a=Xe(e,u,!0,t.filter.filtersNodes());else{var h=mt(n);if(".priority"===h)u=t.filter.updatePriority(e.eventCache.getNode(),i),a=Xe(e,u,c.isFullyInitialized(),c.isFiltered());else{var f=_t(n),d=c.getNode().getImmediateChild(h),p=void 0;if(It(f))p=i;else{var v=l.getCompleteChild(h);p=null!=v?".priority"===bt(f)&&v.getChild(Et(f)).isEmpty()?v:v.updateChild(f,i):ae.EMPTY_NODE}if(d.equals(p))a=e;else a=Xe(e,t.filter.updateChild(c.getNode(),h,p,f,l,s),c.isFullyInitialized(),t.filter.filtersNodes())}}return a}function Rn(t,e){return t.eventCache.isCompleteForChild(e)}function Ln(t,e,n){return n.foreach((function(t,n){e=e.updateChild(t,n)})),e}function Mn(t,e,n,i,r,o,s,a){if(e.serverCache.getNode().isEmpty()&&!e.serverCache.isFullyInitialized())return e;var u,c=e;u=It(n)?i:new tn(null).setTree(n,i);var l=e.serverCache.getNode();return u.children.inorderTraversal((function(n,i){if(l.hasChild(n)){var u=Ln(0,e.serverCache.getNode().getImmediateChild(n),i);c=xn(t,c,new vt(n),u,r,o,s,a)}})),u.children.inorderTraversal((function(n,i){var u=!e.serverCache.isCompleteForChild(n)&&void 0===i.value;if(!l.hasChild(n)&&!u){var h=Ln(0,e.serverCache.getNode().getImmediateChild(n),i);c=xn(t,c,new vt(n),h,r,o,s,a)}})),c}var jn,Fn=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n,i=this.query_._queryParams,r=new Ee(i.getIndex()),o=(n=i).loadsAllData()?new Ee(n.getIndex()):n.hasLimit()?new Ie(n):new Ce(n);this.processor_=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(t){return{filter:t}}(o);var s=e.serverCache,a=e.eventCache,u=r.updateFullNode(ae.EMPTY_NODE,s.getNode(),null),c=o.updateFullNode(ae.EMPTY_NODE,a.getNode(),null),l=new Ke(u,s.isFullyInitialized(),r.filtersNodes()),h=new Ke(c,a.isFullyInitialized(),o.filtersNodes());this.viewCache_=$e(h,l),this.eventGenerator_=new Ge(this.query_)}return Object.defineProperty(t.prototype,"query",{get:function(){return this.query_},enumerable:!1,configurable:!0}),t}();function qn(t,e){var n=Je(t.viewCache_);return n&&(t.query._queryParams.loadsAllData()||!It(e)&&!n.getImmediateChild(mt(e)).isEmpty())?n.getChild(e):null}function Un(t){return 0===t.eventRegistrations_.length}function Vn(t,e,n){var i=[];if(n){(0,o.hu)(null==e,"A cancel should cancel all event registrations.");var r=t.query._path;t.eventRegistrations_.forEach((function(t){var e=t.createCancelEvent(n,r);e&&i.push(e)}))}if(e){for(var s=[],a=0;a<t.eventRegistrations_.length;++a){var u=t.eventRegistrations_[a];if(u.matches(e)){if(e.hasAnyCallback()){s=s.concat(t.eventRegistrations_.slice(a+1));break}}else s.push(u)}t.eventRegistrations_=s}else t.eventRegistrations_=[];return i}function Wn(t,e,n,i){e.type===je.MERGE&&null!==e.source.queryId&&((0,o.hu)(Je(t.viewCache_),"We should always have a full cache before handling merges"),(0,o.hu)(Ze(t.viewCache_),"Missing event cache, even though we have a server cache"));var r,s,a=t.viewCache_,u=Pn(t.processor_,a,e,n,i);return r=t.processor_,s=u.viewCache,(0,o.hu)(s.eventCache.getNode().isIndexed(r.filter.getIndex()),"Event snap not indexed"),(0,o.hu)(s.serverCache.getNode().isIndexed(r.filter.getIndex()),"Server snap not indexed"),(0,o.hu)(u.viewCache.serverCache.isFullyInitialized()||!a.serverCache.isFullyInitialized(),"Once a server snap is complete, it should never go back"),t.viewCache_=u.viewCache,Bn(t,u.changes,u.viewCache.eventCache.getNode(),null)}function Bn(t,e,n,i){var r=i?[i]:t.eventRegistrations_;return function(t,e,n,i){var r=[],o=[];return e.forEach((function(e){var n;"child_changed"===e.type&&t.index_.indexedValueChanged(e.oldSnap,e.snapshotNode)&&o.push((n=e.childName,{type:"child_moved",snapshotNode:e.snapshotNode,childName:n}))})),Ye(t,r,"child_removed",e,i,n),Ye(t,r,"child_added",e,i,n),Ye(t,r,"child_moved",o,i,n),Ye(t,r,"child_changed",e,i,n),Ye(t,r,"value",e,i,n),r}(t.eventGenerator_,e,n,r)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Hn,zn=function(){this.views=new Map};function Kn(t,e,n,i){var r,a,u=e.source.queryId;if(null!==u){var c=t.views.get(u);return(0,o.hu)(null!=c,"SyncTree gave us an op for an invalid query."),Wn(c,e,n,i)}var l=[];try{for(var h=(0,s.XA)(t.views.values()),f=h.next();!f.done;f=h.next()){c=f.value;l=l.concat(Wn(c,e,n,i))}}catch(t){r={error:t}}finally{try{f&&!f.done&&(a=h.return)&&a.call(h)}finally{if(r)throw r.error}}return l}function Gn(t,e,n,i,r){var o=e._queryIdentifier,s=t.views.get(o);if(!s){var a=_n(n,r?i:null),u=!1;a?u=!0:i instanceof ae?(a=bn(n,i),u=!1):(a=ae.EMPTY_NODE,u=!1);var c=$e(new Ke(a,u,!1),new Ke(i,r,!1));return new Fn(e,c)}return s}function Yn(t,e,n,i,r,o){var s=Gn(t,e,i,r,o);return t.views.has(e._queryIdentifier)||t.views.set(e._queryIdentifier,s),function(t,e){t.eventRegistrations_.push(e)}(s,n),function(t,e){var n=t.viewCache_.eventCache,i=[];return n.getNode().isLeafNode()||n.getNode().forEachChild(ee,(function(t,e){i.push(_e(t,e))})),n.isFullyInitialized()&&i.push(ye(n.getNode())),Bn(t,i,n.getNode(),e)}(s,n)}function $n(t,e,n,i){var r,a,u=e._queryIdentifier,c=[],l=[],h=ti(t);if("default"===u)try{for(var f=(0,s.XA)(t.views.entries()),d=f.next();!d.done;d=f.next()){var p=(0,s.CR)(d.value,2),v=p[0],g=p[1];l=l.concat(Vn(g,n,i)),Un(g)&&(t.views.delete(v),g.query._queryParams.loadsAllData()||c.push(g.query))}}catch(t){r={error:t}}finally{try{d&&!d.done&&(a=f.return)&&a.call(f)}finally{if(r)throw r.error}}else(g=t.views.get(u))&&(l=l.concat(Vn(g,n,i)),Un(g)&&(t.views.delete(u),g.query._queryParams.loadsAllData()||c.push(g.query)));return h&&!ti(t)&&c.push(new((0,o.hu)(jn,"Reference.ts has not been loaded"),jn)(e._repo,e._path)),{removed:c,events:l}}function Xn(t){var e,n,i=[];try{for(var r=(0,s.XA)(t.views.values()),o=r.next();!o.done;o=r.next()){var a=o.value;a.query._queryParams.loadsAllData()||i.push(a)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return i}function Qn(t,e){var n,i,r=null;try{for(var o=(0,s.XA)(t.views.values()),a=o.next();!a.done;a=o.next()){var u=a.value;r=r||qn(u,e)}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}return r}function Zn(t,e){if(e._queryParams.loadsAllData())return ei(t);var n=e._queryIdentifier;return t.views.get(n)}function Jn(t,e){return null!=Zn(t,e)}function ti(t){return null!=ei(t)}function ei(t){var e,n;try{for(var i=(0,s.XA)(t.views.values()),r=i.next();!r.done;r=i.next()){var o=r.value;if(o.query._queryParams.loadsAllData())return o}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return null}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ni=1,ii=function(t){this.listenProvider_=t,this.syncPointTree_=new tn(null),this.pendingWriteTree_={visibleWrites:en.empty(),allWrites:[],lastWriteId:-1},this.tagToQueryMap=new Map,this.queryToTagMap=new Map};function ri(t,e,n,i,r){return function(t,e,n,i,r){(0,o.hu)(i>t.lastWriteId,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),t.allWrites.push({path:e,snap:n,writeId:i,visible:r}),r&&(t.visibleWrites=nn(t.visibleWrites,e,n)),t.lastWriteId=i}(t.pendingWriteTree_,e,n,i,r),r?fi(t,new He({fromUser:!0,fromServer:!1,queryId:null,tagged:!1},e,n)):[]}function oi(t,e,n,i){!function(t,e,n,i){(0,o.hu)(i>t.lastWriteId,"Stacking an older merge on top of newer ones"),t.allWrites.push({path:e,children:n,writeId:i,visible:!0}),t.visibleWrites=rn(t.visibleWrites,e,n),t.lastWriteId=i}(t.pendingWriteTree_,e,n,i);var r=tn.fromObject(n);return fi(t,new ze({fromUser:!0,fromServer:!1,queryId:null,tagged:!1},e,r))}function si(t,e,n){void 0===n&&(n=!1);var i=function(t,e){for(var n=0;n<t.allWrites.length;n++){var i=t.allWrites[n];if(i.writeId===e)return i}return null}(t.pendingWriteTree_,e);if(pn(t.pendingWriteTree_,e)){var r=new tn(null);return null!=i.snap?r=r.set(gt(),!0):M(i.children,(function(t){r=r.set(new vt(t),!0)})),fi(t,new We(i.path,r,n))}return[]}function ai(t,e,n){return fi(t,new He({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},e,n))}function ui(t,e,n,i){var r=e._path,o=t.syncPointTree_.get(r),s=[];if(o&&("default"===e._queryIdentifier||Jn(o,e))){var a=$n(o,e,n,i);0===o.views.size&&(t.syncPointTree_=t.syncPointTree_.remove(r));var u=a.removed;s=a.events;var c=-1!==u.findIndex((function(t){return t._queryParams.loadsAllData()})),l=t.syncPointTree_.findOnPath(r,(function(t,e){return ti(e)}));if(c&&!l){var h=t.syncPointTree_.subtree(r);if(!h.isEmpty())for(var f=function(t){return t.fold((function(t,e,n){if(e&&ti(e))return[ei(e)];var i=[];return e&&(i=Xn(e)),M(n,(function(t,e){i=i.concat(e)})),i}))}(h),d=0;d<f.length;++d){var p=f[d],v=p.query,g=vi(t,p);t.listenProvider_.startListening(wi(v),gi(t,v),g.hashFn,g.onComplete)}}if(!l&&u.length>0&&!i)if(c){t.listenProvider_.stopListening(wi(e),null)}else u.forEach((function(e){var n=t.queryToTagMap.get(mi(e));t.listenProvider_.stopListening(wi(e),n)}));!function(t,e){for(var n=0;n<e.length;++n){var i=e[n];if(!i._queryParams.loadsAllData()){var r=mi(i),o=t.queryToTagMap.get(r);t.queryToTagMap.delete(r),t.tagToQueryMap.delete(o)}}}(t,u)}return s}function ci(t,e,n){var i=e._path,r=null,s=!1;t.syncPointTree_.foreachOnPath(i,(function(t,e){var n=Tt(t,i);r=r||Qn(e,n),s=s||ti(e)}));var a,u=t.syncPointTree_.get(i);(u?(s=s||ti(u),r=r||Qn(u,gt())):(u=new zn,t.syncPointTree_=t.syncPointTree_.set(i,u)),null!=r)?a=!0:(a=!1,r=ae.EMPTY_NODE,t.syncPointTree_.subtree(i).foreachChild((function(t,e){var n=Qn(e,gt());n&&(r=r.updateImmediateChild(t,n))})));var c=Jn(u,e);if(!c&&!e._queryParams.loadsAllData()){var l=mi(e);(0,o.hu)(!t.queryToTagMap.has(l),"View does not exist, but we have a tag");var h=ni++;t.queryToTagMap.set(l,h),t.tagToQueryMap.set(h,l)}var f=Yn(u,e,n,dn(t.pendingWriteTree_,i),r,a);if(!c&&!s){var d=Zn(u,e);f=f.concat(function(t,e,n){var i=e._path,r=gi(t,e),s=vi(t,n),a=t.listenProvider_.startListening(wi(e),r,s.hashFn,s.onComplete),u=t.syncPointTree_.subtree(i);if(r)(0,o.hu)(!ti(u.value),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold((function(t,e,n){if(!It(t)&&e&&ti(e))return[ei(e).query];var i=[];return e&&(i=i.concat(Xn(e).map((function(t){return t.query})))),M(n,(function(t,e){i=i.concat(e)})),i})),l=0;l<c.length;++l){var h=c[l];t.listenProvider_.stopListening(wi(h),gi(t,h))}return a}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t,e,d))}return f}function li(t,e,n){var i=t.pendingWriteTree_,r=t.syncPointTree_.findOnPath(e,(function(t,n){var i=Qn(n,Tt(t,e));if(i)return i}));return yn(i,e,r,n,!0)}function hi(t,e){var n=e._path,i=null;t.syncPointTree_.foreachOnPath(n,(function(t,e){var r=Tt(t,n);i=i||Qn(e,r)}));var r=t.syncPointTree_.get(n);r?i=i||Qn(r,gt()):(r=new zn,t.syncPointTree_=t.syncPointTree_.set(n,r));var o=null!=i,s=o?new Ke(i,!0,!1):null;return function(t){return Ze(t.viewCache_)}(Gn(r,e,dn(t.pendingWriteTree_,e._path),o?s.getNode():ae.EMPTY_NODE,o))}function fi(t,e){return di(e,t.syncPointTree_,null,dn(t.pendingWriteTree_,gt()))}function di(t,e,n,i){if(It(t.path))return pi(t,e,n,i);var r=e.get(gt());null==n&&null!=r&&(n=Qn(r,gt()));var o=[],s=mt(t.path),a=t.operationForChild(s),u=e.children.get(s);if(u&&a){var c=n?n.getImmediateChild(s):null,l=Tn(i,s);o=o.concat(di(a,u,c,l))}return r&&(o=o.concat(Kn(r,t,i,n))),o}function pi(t,e,n,i){var r=e.get(gt());null==n&&null!=r&&(n=Qn(r,gt()));var o=[];return e.children.inorderTraversal((function(e,r){var s=n?n.getImmediateChild(e):null,a=Tn(i,e),u=t.operationForChild(e);u&&(o=o.concat(pi(u,r,s,a)))})),r&&(o=o.concat(Kn(r,t,i,n))),o}function vi(t,e){var n=e.query,i=gi(t,n);return{hashFn:function(){return(function(t){return t.viewCache_.serverCache.getNode()}(e)||ae.EMPTY_NODE).hash()},onComplete:function(e){if("ok"===e)return i?function(t,e,n){var i=yi(t,n);if(i){var r=_i(i),o=r.path,s=r.queryId,a=Tt(o,e);return bi(t,o,new Be(Ue(s),a))}return[]}(t,n._path,i):function(t,e){return fi(t,new Be({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},e))}(t,n._path);var r=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===t?n="Client doesn't have permission to access the desired data.":"unavailable"===t&&(n="The service is unavailable");var i=new Error(t+" at "+e._path.toString()+": "+n);return i.code=t.toUpperCase(),i}(e,n);return ui(t,n,null,r)}}}function gi(t,e){var n=mi(e);return t.queryToTagMap.get(n)}function mi(t){return t._path.toString()+"$"+t._queryIdentifier}function yi(t,e){return t.tagToQueryMap.get(e)}function _i(t){var e=t.indexOf("$");return(0,o.hu)(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new vt(t.substr(0,e))}}function bi(t,e,n){var i=t.syncPointTree_.get(e);return(0,o.hu)(i,"Missing sync point for query tag that we're tracking"),Kn(i,n,dn(t.pendingWriteTree_,e),null)}function wi(t){return t._queryParams.loadsAllData()&&!t._queryParams.isDefault()?new((0,o.hu)(Hn,"Reference.ts has not been loaded"),Hn)(t._repo,t._path):t}var Ei=function(){function t(t){this.node_=t}return t.prototype.getImmediateChild=function(e){return new t(this.node_.getImmediateChild(e))},t.prototype.node=function(){return this.node_},t}(),Ci=function(){function t(t,e){this.syncTree_=t,this.path_=e}return t.prototype.getImmediateChild=function(e){var n=Ct(this.path_,e);return new t(this.syncTree_,n)},t.prototype.node=function(){return li(this.syncTree_,this.path_)},t}(),Ii=function(t,e,n){return t&&"object"==typeof t?((0,o.hu)(".sv"in t,"Unexpected leaf node or priority contents"),"string"==typeof t[".sv"]?Ti(t[".sv"],e,n):"object"==typeof t[".sv"]?ki(t[".sv"],e):void(0,o.hu)(!1,"Unexpected server value: "+JSON.stringify(t,null,2))):t},Ti=function(t,e,n){switch(t){case"timestamp":return n.timestamp;default:(0,o.hu)(!1,"Unexpected server value: "+t)}},ki=function(t,e,n){t.hasOwnProperty("increment")||(0,o.hu)(!1,"Unexpected server value: "+JSON.stringify(t,null,2));var i=t.increment;"number"!=typeof i&&(0,o.hu)(!1,"Unexpected increment value: "+i);var r=e.node();if((0,o.hu)(null!=r,"Expected ChildrenNode.EMPTY_NODE for nulls"),!r.isLeafNode())return i;var s=r.getValue();return"number"!=typeof s?i:s+i},Si=function(t,e,n,i){return Ni(e,new Ci(n,t),i)},Ai=function(t,e,n){return Ni(t,new Ei(e),n)};function Ni(t,e,n){var i,r=t.getPriority().val(),o=Ii(r,e.getImmediateChild(".priority"),n);if(t.isLeafNode()){var s=t,a=Ii(s.getValue(),e,n);return a!==s.getValue()||o!==s.getPriority().val()?new Zt(a,ce(o)):t}var u=t;return i=u,o!==u.getPriority().val()&&(i=i.updatePriority(new Zt(o))),u.forEachChild(ee,(function(t,r){var o=Ni(r,e.getImmediateChild(t),n);o!==r&&(i=i.updateImmediateChild(t,o))})),i}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Pi=function(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n={children:{},childCount:0}),this.name=t,this.parent=e,this.node=n};function Oi(t,e){for(var n=e instanceof vt?e:new vt(e),i=t,r=mt(n);null!==r;){var s=(0,o.DV)(i.node.children,r)||{children:{},childCount:0};i=new Pi(r,i,s),r=mt(n=_t(n))}return i}function xi(t){return t.node.value}function Di(t,e){t.node.value=e,Fi(t)}function Ri(t){return t.node.childCount>0}function Li(t,e){M(t.node.children,(function(n,i){e(new Pi(n,t,i))}))}function Mi(t,e,n,i){n&&!i&&e(t),Li(t,(function(t){Mi(t,e,!0,i)})),n&&i&&e(t)}function ji(t){return new vt(null===t.parent?t.name:ji(t.parent)+"/"+t.name)}function Fi(t){null!==t.parent&&function(t,e,n){var i=function(t){return void 0===xi(t)&&!Ri(t)}(n),r=(0,o.r3)(t.node.children,e);i&&r?(delete t.node.children[e],t.node.childCount--,Fi(t)):i||r||(t.node.children[e]=n.node,t.node.childCount++,Fi(t))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t.parent,t.name,t)}var qi=/[\[\].#$\/\u0000-\u001F\u007F]/,Ui=/[\[\].#$\u0000-\u001F\u007F]/,Vi=10485760,Wi=function(t){return"string"==typeof t&&0!==t.length&&!qi.test(t)},Bi=function(t){return"string"==typeof t&&0!==t.length&&!Ui.test(t)},Hi=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!A(t)||t&&"object"==typeof t&&(0,o.r3)(t,".sv")},zi=function(t,e,n,i){i&&void 0===e||Ki((0,o.gK)(t,"value"),e,n)},Ki=function(t,e,n){var i=n instanceof vt?new Nt(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+Ot(i));if("function"==typeof e)throw new Error(t+"contains a function "+Ot(i)+" with contents = "+e.toString());if(A(e))throw new Error(t+"contains "+e.toString()+" "+Ot(i));if("string"==typeof e&&e.length>Vi/3&&(0,o.ug)(e)>Vi)throw new Error(t+"contains a string greater than "+"10485760 utf8 bytes "+Ot(i)+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var r=!1,s=!1;if(M(e,(function(e,n){if(".value"===e)r=!0;else if(".priority"!==e&&".sv"!==e&&(s=!0,!Wi(e)))throw new Error(t+" contains an invalid key ("+e+") "+Ot(i)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');var a,u;!function(t,e){t.parts_.length>0&&(t.byteLength_+=1),t.parts_.push(e),t.byteLength_+=(0,o.ug)(e),Pt(t)}(i,e),Ki(t,n,i),u=(a=i).parts_.pop(),a.byteLength_-=(0,o.ug)(u),a.parts_.length>0&&(a.byteLength_-=1)})),r&&s)throw new Error(t+' contains ".value" child '+Ot(i)+" in addition to actual children.")}},Gi=function(t,e,n,i){if(!i||void 0!==e){var r=(0,o.gK)(t,"values");if(!e||"object"!=typeof e||Array.isArray(e))throw new Error(r+" must be an object containing the children to replace.");var s=[];M(e,(function(t,e){var i=new vt(t);if(Ki(r,e,Ct(n,i)),".priority"===bt(i)&&!Hi(e))throw new Error(r+"contains an invalid value for '"+i.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(i)})),function(t,e){var n,i;for(n=0;n<e.length;n++)for(var r=wt(i=e[n]),o=0;o<r.length;o++)if(".priority"===r[o]&&o===r.length-1);else if(!Wi(r[o]))throw new Error(t+"contains an invalid key ("+r[o]+") in path "+i.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(kt);var s=null;for(n=0;n<e.length;n++){if(i=e[n],null!==s&&At(s,i))throw new Error(t+"contains a path "+s.toString()+" that is ancestor of another path "+i.toString());s=i}}(r,s)}},Yi=function(t,e,n){if(!n||void 0!==e){if(A(e))throw new Error((0,o.gK)(t,"priority")+"is "+e.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!Hi(e))throw new Error((0,o.gK)(t,"priority")+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},$i=function(t,e,n){if(!n||void 0!==e)switch(e){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error((0,o.gK)(t,"eventType")+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},Xi=function(t,e,n,i){if(!(i&&void 0===n||Wi(n)))throw new Error((0,o.gK)(t,e)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},Qi=function(t,e,n,i){if(!(i&&void 0===n||Bi(n)))throw new Error((0,o.gK)(t,e)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},Zi=function(t,e){if(".info"===mt(e))throw new Error(t+" failed = Can't modify data under /.info/")},Ji=function(t,e){var n=e.path.toString();if("string"!=typeof e.repoInfo.host||0===e.repoInfo.host.length||!Wi(e.repoInfo.namespace)&&"localhost"!==e.repoInfo.host.split(":")[0]||0!==n.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),Bi(t)}(n))throw new Error((0,o.gK)(t,"url")+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},tr=function(t,e,n,i){if((!i||void 0!==n)&&"boolean"!=typeof n)throw new Error((0,o.gK)(t,e)+"must be a boolean.")},er=function(){this.eventLists_=[],this.recursionDepth_=0};function nr(t,e){for(var n=null,i=0;i<e.length;i++){var r=e[i],o=r.getPath();null===n||St(o,n.path)||(t.eventLists_.push(n),n=null),null===n&&(n={events:[],path:o}),n.events.push(r)}n&&t.eventLists_.push(n)}function ir(t,e,n){nr(t,n),or(t,(function(t){return St(t,e)}))}function rr(t,e,n){nr(t,n),or(t,(function(t){return At(t,e)||At(e,t)}))}function or(t,e){t.recursionDepth_++;for(var n=!0,i=0;i<t.eventLists_.length;i++){var r=t.eventLists_[i];if(r)e(r.path)?(sr(t.eventLists_[i]),t.eventLists_[i]=null):n=!1}n&&(t.eventLists_=[]),t.recursionDepth_--}function sr(t){for(var e=0;e<t.events.length;e++){var n=t.events[e];if(null!==n){t.events[e]=null;var i=n.getEventRunner();b&&C("event: "+n.toString()),W(i)}}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ar="repo_interrupt",ur=function(){function t(t,e,n,i){this.repoInfo_=t,this.forceRestClient_=e,this.authTokenProvider_=n,this.appCheckProvider_=i,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new er,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=De(),this.transactionQueueTree_=new Pi,this.persistentConnection_=null,this.key=this.repoInfo_.toURLString()}return t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t}();function cr(t,e,n){if(t.stats_=nt(t.repoInfo_),t.forceRestClient_||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)t.server_=new Oe(t.repoInfo_,(function(e,n,i,r){fr(t,e,n,i,r)}),t.authTokenProvider_,t.appCheckProvider_),setTimeout((function(){return dr(t,!0)}),0);else{if(null!=n){if("object"!=typeof n)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{(0,o.Pz)(n)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}t.persistentConnection_=new Mt(t.repoInfo_,e,(function(e,n,i,r){fr(t,e,n,i,r)}),(function(e){dr(t,e)}),(function(e){!function(t,e){M(e,(function(e,n){pr(t,e,n)}))}(t,e)}),t.authTokenProvider_,t.appCheckProvider_,n),t.server_=t.persistentConnection_}var i,r,s;t.authTokenProvider_.addTokenChangeListener((function(e){t.server_.refreshAuthToken(e)})),t.appCheckProvider_.addTokenChangeListener((function(e){t.server_.refreshAppCheckToken(e.token)})),t.statsReporter_=(i=t.repoInfo_,r=function(){return new qe(t.stats_,t.server_)},s=i.toString(),et[s]||(et[s]=r()),et[s]),t.infoData_=new xe,t.infoSyncTree_=new ii({startListening:function(e,n,i,r){var o=[],s=t.infoData_.getNode(e._path);return s.isEmpty()||(o=ai(t.infoSyncTree_,e._path,s),setTimeout((function(){r("ok")}),0)),o},stopListening:function(){}}),pr(t,"connected",!1),t.serverSyncTree_=new ii({startListening:function(e,n,i,r){return t.server_.listen(e,i,n,(function(n,i){var o=r(n,i);rr(t.eventQueue_,e._path,o)})),[]},stopListening:function(e,n){t.server_.unlisten(e,n)}})}function lr(t){var e=t.infoData_.getNode(new vt(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+e}function hr(t){return(e=(e={timestamp:lr(t)})||{}).timestamp=e.timestamp||(new Date).getTime(),e;var e}function fr(t,e,n,i,r){t.dataUpdateCount++;var s=new vt(e);n=t.interceptServerDataCallback_?t.interceptServerDataCallback_(e,n):n;var a=[];if(r)if(i){var u=(0,o.UI)(n,(function(t){return ce(t)}));a=function(t,e,n,i){var r=yi(t,i);if(r){var o=_i(r),s=o.path,a=o.queryId,u=Tt(s,e),c=tn.fromObject(n);return bi(t,s,new ze(Ue(a),u,c))}return[]}(t.serverSyncTree_,s,u,r)}else{var c=ce(n);a=function(t,e,n,i){var r=yi(t,i);if(null!=r){var o=_i(r),s=o.path,a=o.queryId,u=Tt(s,e);return bi(t,s,new He(Ue(a),u,n))}return[]}(t.serverSyncTree_,s,c,r)}else if(i){var l=(0,o.UI)(n,(function(t){return ce(t)}));a=function(t,e,n){var i=tn.fromObject(n);return fi(t,new ze({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},e,i))}(t.serverSyncTree_,s,l)}else{var h=ce(n);a=ai(t.serverSyncTree_,s,h)}var f=s;a.length>0&&(f=Tr(t,s)),rr(t.eventQueue_,f,a)}function dr(t,e){pr(t,"connected",e),!1===e&&function(t){wr(t,"onDisconnectEvents");var e=hr(t),n=De();Me(t.onDisconnect_,gt(),(function(i,r){var o=Si(i,r,t.serverSyncTree_,e);Re(n,i,o)}));var i=[];Me(n,gt(),(function(e,n){i=i.concat(ai(t.serverSyncTree_,e,n));var r=Pr(t,e);Tr(t,r)})),t.onDisconnect_=De(),rr(t.eventQueue_,gt(),i)}(t)}function pr(t,e,n){var i=new vt("/.info/"+e),r=ce(n);t.infoData_.updateSnapshot(i,r);var o=ai(t.infoSyncTree_,i,r);rr(t.eventQueue_,i,o)}function vr(t){return t.nextWriteId_++}function gr(t,e,n,i,r){wr(t,"set",{path:e.toString(),value:n,priority:i});var o=hr(t),s=ce(n,i),a=li(t.serverSyncTree_,e),u=Ai(s,a,o),c=vr(t),l=ri(t.serverSyncTree_,e,u,c,!0);nr(t.eventQueue_,l),t.server_.put(e.toString(),s.val(!0),(function(n,i){var o="ok"===n;o||S("set at "+e+" failed: "+n);var s=si(t.serverSyncTree_,c,!o);rr(t.eventQueue_,e,s),Er(t,r,n,i)}));var h=Pr(t,e);Tr(t,h),rr(t.eventQueue_,h,[])}function mr(t,e,n){t.server_.onDisconnectCancel(e.toString(),(function(i,r){"ok"===i&&Le(t.onDisconnect_,e),Er(t,n,i,r)}))}function yr(t,e,n,i){var r=ce(n);t.server_.onDisconnectPut(e.toString(),r.val(!0),(function(n,o){"ok"===n&&Re(t.onDisconnect_,e,r),Er(t,i,n,o)}))}function _r(t,e,n){var i;i=".info"===mt(e._path)?ui(t.infoSyncTree_,e,n):ui(t.serverSyncTree_,e,n),ir(t.eventQueue_,e._path,i)}function br(t){t.persistentConnection_&&t.persistentConnection_.interrupt(ar)}function wr(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var i="";t.persistentConnection_&&(i=t.persistentConnection_.id+":"),C.apply(void 0,(0,s.ev)([i],(0,s.CR)(e)))}function Er(t,e,n,i){e&&W((function(){if("ok"===n)e(null);else{var t=(n||"error").toUpperCase(),r=t;i&&(r+=": "+i);var o=new Error(r);o.code=t,e(o)}}))}function Cr(t,e,n){return li(t.serverSyncTree_,e,n)||ae.EMPTY_NODE}function Ir(t,e){if(void 0===e&&(e=t.transactionQueueTree_),e||Nr(t,e),xi(e)){var n=Sr(t,e);(0,o.hu)(n.length>0,"Sending zero length transaction queue"),n.every((function(t){return 0===t.status}))&&function(t,e,n){for(var i=n.map((function(t){return t.currentWriteId})),r=Cr(t,e,i),s=r,a=r.hash(),u=0;u<n.length;u++){var c=n[u];(0,o.hu)(0===c.status,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=1,c.retryCount++;var l=Tt(e,c.path);s=s.updateChild(l,c.currentOutputSnapshotRaw)}var h=s.val(!0),f=e;t.server_.put(f.toString(),h,(function(i){wr(t,"transaction put response",{path:f.toString(),status:i});var r=[];if("ok"===i){for(var o=[],s=function(e){n[e].status=2,r=r.concat(si(t.serverSyncTree_,n[e].currentWriteId)),n[e].onComplete&&o.push((function(){return n[e].onComplete(null,!0,n[e].currentOutputSnapshotResolved)})),n[e].unwatcher()},a=0;a<n.length;a++)s(a);Nr(t,Oi(t.transactionQueueTree_,e)),Ir(t,t.transactionQueueTree_),rr(t.eventQueue_,e,r);for(a=0;a<o.length;a++)W(o[a])}else{if("datastale"===i)for(a=0;a<n.length;a++)3===n[a].status?n[a].status=4:n[a].status=0;else{S("transaction at "+f.toString()+" failed: "+i);for(a=0;a<n.length;a++)n[a].status=4,n[a].abortReason=i}Tr(t,e)}}),a)}(t,ji(e),n)}else Ri(e)&&Li(e,(function(e){Ir(t,e)}))}function Tr(t,e){var n=kr(t,e),i=ji(n);return function(t,e,n){if(0===e.length)return;for(var i=[],r=[],s=e.filter((function(t){return 0===t.status})).map((function(t){return t.currentWriteId})),a=function(a){var u,c,l=e[a],h=Tt(n,l.path),f=!1;if((0,o.hu)(null!==h,"rerunTransactionsUnderNode_: relativePath should not be null."),4===l.status)f=!0,u=l.abortReason,r=r.concat(si(t.serverSyncTree_,l.currentWriteId,!0));else if(0===l.status)if(l.retryCount>=25)f=!0,u="maxretry",r=r.concat(si(t.serverSyncTree_,l.currentWriteId,!0));else{var d=Cr(t,l.path,s);l.currentInputSnapshot=d;var p=e[a].update(d.val());if(void 0!==p){Ki("transaction failed: Data returned ",p,l.path);var v=ce(p);"object"==typeof p&&null!=p&&(0,o.r3)(p,".priority")||(v=v.updatePriority(d.getPriority()));var g=l.currentWriteId,m=hr(t),y=Ai(v,d,m);l.currentOutputSnapshotRaw=v,l.currentOutputSnapshotResolved=y,l.currentWriteId=vr(t),s.splice(s.indexOf(g),1),r=(r=r.concat(ri(t.serverSyncTree_,l.path,y,l.currentWriteId,l.applyLocally))).concat(si(t.serverSyncTree_,g,!0))}else f=!0,u="nodata",r=r.concat(si(t.serverSyncTree_,l.currentWriteId,!0))}rr(t.eventQueue_,n,r),r=[],f&&(e[a].status=2,c=e[a].unwatcher,setTimeout(c,Math.floor(0)),e[a].onComplete&&("nodata"===u?i.push((function(){return e[a].onComplete(null,!1,e[a].currentInputSnapshot)})):i.push((function(){return e[a].onComplete(new Error(u),!1,null)}))))},u=0;u<e.length;u++)a(u);Nr(t,t.transactionQueueTree_);for(u=0;u<i.length;u++)W(i[u]);Ir(t,t.transactionQueueTree_)}(t,Sr(t,n),i),i}function kr(t,e){var n,i=t.transactionQueueTree_;for(n=mt(e);null!==n&&void 0===xi(i);)i=Oi(i,n),n=mt(e=_t(e));return i}function Sr(t,e){var n=[];return Ar(t,e,n),n.sort((function(t,e){return t.order-e.order})),n}function Ar(t,e,n){var i=xi(e);if(i)for(var r=0;r<i.length;r++)n.push(i[r]);Li(e,(function(e){Ar(t,e,n)}))}function Nr(t,e){var n=xi(e);if(n){for(var i=0,r=0;r<n.length;r++)2!==n[r].status&&(n[i]=n[r],i++);n.length=i,Di(e,n.length>0?n:void 0)}Li(e,(function(e){Nr(t,e)}))}function Pr(t,e){var n=ji(kr(t,e)),i=Oi(t.transactionQueueTree_,e);return function(t,e,n){for(var i=n?t:t.parent;null!==i;){if(e(i))return!0;i=i.parent}}(i,(function(e){Or(t,e)})),Or(t,i),Mi(i,(function(e){Or(t,e)})),n}function Or(t,e){var n=xi(e);if(n){for(var i=[],r=[],s=-1,a=0;a<n.length;a++)3===n[a].status||(1===n[a].status?((0,o.hu)(s===a-1,"All SENT items should be at beginning of queue."),s=a,n[a].status=3,n[a].abortReason="set"):((0,o.hu)(0===n[a].status,"Unexpected transaction status in abort"),n[a].unwatcher(),r=r.concat(si(t.serverSyncTree_,n[a].currentWriteId,!0)),n[a].onComplete&&i.push(n[a].onComplete.bind(null,new Error("set"),!1,null))));-1===s?Di(e,void 0):n.length=s+1,rr(t.eventQueue_,ji(e),r);for(a=0;a<i.length;a++)W(i[a])}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var xr=function(t,e){var n=Dr(t),i=n.namespace;"firebase.com"===n.domain&&k(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),i&&"undefined"!==i||"localhost"===n.domain||k("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&S("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new Q(n.host,n.secure,i,e,r,"",i!==n.subdomain),path:new vt(n.pathString)}},Dr=function(t){var e="",n="",i="",r="",o="",a=!0,u="https",c=443;if("string"==typeof t){var l=t.indexOf("//");l>=0&&(u=t.substring(0,l-1),t=t.substring(l+2));var h=t.indexOf("/");-1===h&&(h=t.length);var f=t.indexOf("?");-1===f&&(f=t.length),e=t.substring(0,Math.min(h,f)),h<f&&(r=function(t){for(var e="",n=t.split("/"),i=0;i<n.length;i++)if(n[i].length>0){var r=n[i];try{r=decodeURIComponent(r.replace(/\+/g," "))}catch(t){}e+="/"+r}return e}(t.substring(h,f)));var d=function(t){var e,n,i={};"?"===t.charAt(0)&&(t=t.substring(1));try{for(var r=(0,s.XA)(t.split("&")),o=r.next();!o.done;o=r.next()){var a=o.value;if(0!==a.length){var u=a.split("=");2===u.length?i[decodeURIComponent(u[0])]=decodeURIComponent(u[1]):S("Invalid query segment '"+a+"' in query '"+t+"'")}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return i}(t.substring(Math.min(t.length,f)));(l=e.indexOf(":"))>=0?(a="https"===u||"wss"===u,c=parseInt(e.substring(l+1),10)):l=e.length;var p=e.slice(0,l);if("localhost"===p.toLowerCase())n="localhost";else if(p.split(".").length<=2)n=p;else{var v=e.indexOf(".");i=e.substring(0,v).toLowerCase(),n=e.substring(v+1),o=i}"ns"in d&&(o=d.ns)}return{host:e,port:c,domain:n,subdomain:i,secure:a,scheme:u,pathString:r,namespace:o}},Rr=function(){function t(t,e,n,i){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=i}return t.prototype.getPath=function(){var t=this.snapshot.ref;return"value"===this.eventType?t._path:t.parent._path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+(0,o.Pz)(this.snapshot.exportVal())},t}(),Lr=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),Mr=function(){function t(t,e){this.snapshotCallback=t,this.cancelCallback=e}return t.prototype.onValue=function(t,e){this.snapshotCallback.call(null,t,e)},t.prototype.onCancel=function(t){return(0,o.hu)(this.hasCancelCallback,"Raising a cancel event on a listener with no cancel callback"),this.cancelCallback.call(null,t)},Object.defineProperty(t.prototype,"hasCancelCallback",{get:function(){return!!this.cancelCallback},enumerable:!1,configurable:!0}),t.prototype.matches=function(t){return this.snapshotCallback===t.snapshotCallback||this.snapshotCallback.userCallback===t.snapshotCallback.userCallback&&this.snapshotCallback.context===t.snapshotCallback.context},t}(),jr=function(){function t(t,e){this._repo=t,this._path=e}return t.prototype.cancel=function(){var t=new o.BH;return mr(this._repo,this._path,t.wrapCallback((function(){}))),t.promise},t.prototype.remove=function(){Zi("OnDisconnect.remove",this._path);var t=new o.BH;return yr(this._repo,this._path,null,t.wrapCallback((function(){}))),t.promise},t.prototype.set=function(t){Zi("OnDisconnect.set",this._path),zi("OnDisconnect.set",t,this._path,!1);var e=new o.BH;return yr(this._repo,this._path,t,e.wrapCallback((function(){}))),e.promise},t.prototype.setWithPriority=function(t,e){Zi("OnDisconnect.setWithPriority",this._path),zi("OnDisconnect.setWithPriority",t,this._path,!1),Yi("OnDisconnect.setWithPriority",e,!1);var n=new o.BH;return function(t,e,n,i,r){var o=ce(n,i);t.server_.onDisconnectPut(e.toString(),o.val(!0),(function(n,i){"ok"===n&&Re(t.onDisconnect_,e,o),Er(0,r,n,i)}))}(this._repo,this._path,t,e,n.wrapCallback((function(){}))),n.promise},t.prototype.update=function(t){Zi("OnDisconnect.update",this._path),Gi("OnDisconnect.update",t,this._path,!1);var e=new o.BH;return function(t,e,n,i){if((0,o.xb)(n))return C("onDisconnect().update() called with empty data.  Don't do anything."),void Er(0,i,"ok",void 0);t.server_.onDisconnectMerge(e.toString(),n,(function(r,o){"ok"===r&&M(n,(function(n,i){var r=ce(i);Re(t.onDisconnect_,Ct(e,n),r)})),Er(0,i,r,o)}))}(this._repo,this._path,t,e.wrapCallback((function(){}))),e.promise},t}(),Fr=function(){function t(t,e,n,i){this._repo=t,this._path=e,this._queryParams=n,this._orderByCalled=i}return Object.defineProperty(t.prototype,"key",{get:function(){return It(this._path)?null:bt(this._path)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"ref",{get:function(){return new Wr(this._repo,this._path)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_queryIdentifier",{get:function(){var t=Pe(this._queryParams),e=R(t);return"{}"===e?"default":e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_queryObject",{get:function(){return Pe(this._queryParams)},enumerable:!1,configurable:!0}),t.prototype.isEqual=function(e){if(!((e=(0,o.m9)(e))instanceof t))return!1;var n=this._repo===e._repo,i=St(this._path,e._path),r=this._queryIdentifier===e._queryIdentifier;return n&&i&&r},t.prototype.toJSON=function(){return this.toString()},t.prototype.toString=function(){return this._repo.toString()+function(t){for(var e="",n=t.pieceNum_;n<t.pieces_.length;n++)""!==t.pieces_[n]&&(e+="/"+encodeURIComponent(String(t.pieces_[n])));return e||"/"}(this._path)},t}();function qr(t,e){if(!0===t._orderByCalled)throw new Error(e+": You can't combine multiple orderBy calls.")}function Ur(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===Ut){var i="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",r="Query: When ordering by key, the argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!==N)throw new Error(i);if("string"!=typeof e)throw new Error(r)}if(t.hasEnd()){if(t.getIndexEndName()!==P)throw new Error(i);if("string"!=typeof n)throw new Error(r)}}else if(t.getIndex()===ee){if(null!=e&&!Hi(e)||null!=n&&!Hi(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if((0,o.hu)(t.getIndex()instanceof fe||t.getIndex()===de,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() cannot be an object.")}function Vr(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use limitToFirst() or limitToLast() instead.")}var Wr=function(t){function e(e,n){return t.call(this,e,n,new Te,!1)||this}return(0,s.ZT)(e,t),Object.defineProperty(e.prototype,"parent",{get:function(){var t=Et(this._path);return null===t?null:new e(this._repo,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){for(var t=this;null!==t.parent;)t=t.parent;return t},enumerable:!1,configurable:!0}),e}(Fr),Br=function(){function t(t,e,n){this._node=t,this.ref=e,this._index=n}return Object.defineProperty(t.prototype,"priority",{get:function(){return this._node.getPriority().val()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.ref.key},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"size",{get:function(){return this._node.numChildren()},enumerable:!1,configurable:!0}),t.prototype.child=function(e){var n=new vt(e),i=Kr(this.ref,e);return new t(this._node.getChild(n),i,ee)},t.prototype.exists=function(){return!this._node.isEmpty()},t.prototype.exportVal=function(){return this._node.val(!0)},t.prototype.forEach=function(e){var n=this;return!this._node.isLeafNode()&&!!this._node.forEachChild(this._index,(function(i,r){return e(new t(r,Kr(n.ref,i),ee))}))},t.prototype.hasChild=function(t){var e=new vt(t);return!this._node.getChild(e).isEmpty()},t.prototype.hasChildren=function(){return!this._node.isLeafNode()&&!this._node.isEmpty()},t.prototype.toJSON=function(){return this.exportVal()},t.prototype.val=function(){return this._node.val()},t}();function Hr(t,e){return(t=(0,o.m9)(t))._checkNotDeleted("ref"),void 0!==e?Kr(t._root,e):t._root}function zr(t,e){(t=(0,o.m9)(t))._checkNotDeleted("refFromURL");var n=xr(e,t._repo.repoInfo_.nodeAdmin);Ji("refFromURL",n);var i=n.repoInfo;return t._repo.repoInfo_.isCustomHost()||i.host===t._repo.repoInfo_.host||k("refFromURL: Host name does not match the current database: (found "+i.host+" but expected "+t._repo.repoInfo_.host+")"),Hr(t,n.path.toString())}function Kr(t,e){var n,i,r,s;return null===mt((t=(0,o.m9)(t))._path)?(n="child",i="path",s=!1,(r=e)&&(r=r.replace(/^\/*\.info(\/|$)/,"/")),Qi(n,i,r,s)):Qi("child","path",e,!1),new Wr(t._repo,Ct(t._path,e))}function Gr(t,e){t=(0,o.m9)(t),Zi("push",t._path),zi("push",e,t._path,!0);var n,i=lr(t._repo),r=ve(i),s=Kr(t,r),a=Kr(t,r);return n=null!=e?$r(a,e).then((function(){return a})):Promise.resolve(a),s.then=n.then.bind(n),s.catch=n.then.bind(n,void 0),s}function Yr(t){return Zi("remove",t._path),$r(t,null)}function $r(t,e){t=(0,o.m9)(t),Zi("set",t._path),zi("set",e,t._path,!1);var n=new o.BH;return gr(t._repo,t._path,e,null,n.wrapCallback((function(){}))),n.promise}function Xr(t,e){t=(0,o.m9)(t),Zi("setPriority",t._path),Yi("setPriority",e,!1);var n=new o.BH;return gr(t._repo,Ct(t._path,".priority"),e,null,n.wrapCallback((function(){}))),n.promise}function Qr(t,e,n){if(Zi("setWithPriority",t._path),zi("setWithPriority",e,t._path,!1),Yi("setWithPriority",n,!1),".length"===t.key||".keys"===t.key)throw"setWithPriority failed: "+t.key+" is a read-only object.";var i=new o.BH;return gr(t._repo,t._path,e,n,i.wrapCallback((function(){}))),i.promise}function Zr(t,e){Gi("update",e,t._path,!1);var n=new o.BH;return function(t,e,n,i){wr(t,"update",{path:e.toString(),value:n});var r=!0,o=hr(t),s={};if(M(n,(function(n,i){r=!1,s[n]=Si(Ct(e,n),ce(i),t.serverSyncTree_,o)})),r)C("update() called with empty data.  Don't do anything."),Er(0,i,"ok",void 0);else{var a=vr(t),u=oi(t.serverSyncTree_,e,s,a);nr(t.eventQueue_,u),t.server_.merge(e.toString(),n,(function(n,r){var o="ok"===n;o||S("update at "+e+" failed: "+n);var s=si(t.serverSyncTree_,a,!o),u=s.length>0?Tr(t,e):e;rr(t.eventQueue_,u,s),Er(0,i,n,r)})),M(n,(function(n){var i=Pr(t,Ct(e,n));Tr(t,i)})),rr(t.eventQueue_,e,[])}}(t._repo,t._path,e,n.wrapCallback((function(){}))),n.promise}function Jr(t){return function(t,e){var n=hi(t.serverSyncTree_,e);return null!=n?Promise.resolve(n):t.server_.get(e).then((function(n){var i=ce(n).withIndex(e._queryParams.getIndex()),r=ai(t.serverSyncTree_,e._path,i);return ir(t.eventQueue_,e._path,r),Promise.resolve(i)}),(function(n){return wr(t,"get for query "+(0,o.Pz)(e)+" failed: "+n),Promise.reject(new Error(n))}))}((t=(0,o.m9)(t))._repo,t).then((function(e){return new Br(e,new Wr(t._repo,t._path),t._queryParams.getIndex())}))}var to=function(){function t(t){this.callbackContext=t}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e._queryParams.getIndex();return new Rr("value",this,new Br(t.snapshotNode,new Wr(e._repo,e._path),n))},t.prototype.getEventRunner=function(t){var e=this;return"cancel"===t.getEventType()?function(){return e.callbackContext.onCancel(t.error)}:function(){return e.callbackContext.onValue(t.snapshot,null)}},t.prototype.createCancelEvent=function(t,e){return this.callbackContext.hasCancelCallback?new Lr(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callbackContext||!this.callbackContext||e.callbackContext.matches(this.callbackContext))},t.prototype.hasAnyCallback=function(){return null!==this.callbackContext},t}(),eo=function(){function t(t,e){this.eventType=t,this.callbackContext=e}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,this.eventType===e},t.prototype.createCancelEvent=function(t,e){return this.callbackContext.hasCancelCallback?new Lr(this,t,e):null},t.prototype.createEvent=function(t,e){(0,o.hu)(null!=t.childName,"Child events should have a childName.");var n=Kr(new Wr(e._repo,e._path),t.childName),i=e._queryParams.getIndex();return new Rr(t.type,this,new Br(t.snapshotNode,n,i),t.prevName)},t.prototype.getEventRunner=function(t){var e=this;return"cancel"===t.getEventType()?function(){return e.callbackContext.onCancel(t.error)}:function(){return e.callbackContext.onValue(t.snapshot,t.prevName)}},t.prototype.matches=function(e){return e instanceof t&&(this.eventType===e.eventType&&(!this.callbackContext||!e.callbackContext||this.callbackContext.matches(e.callbackContext)))},t.prototype.hasAnyCallback=function(){return!!this.callbackContext},t}();function no(t,e,n,i,r){var o;if("object"==typeof i&&(o=void 0,r=i),"function"==typeof i&&(o=i),r&&r.onlyOnce){var s=n,a=function(e,n){_r(t._repo,t,c),s(e,n)};a.userCallback=n.userCallback,a.context=n.context,n=a}var u=new Mr(n,o||void 0),c="value"===e?new to(u):new eo(e,u);return function(t,e,n){var i;i=".info"===mt(e._path)?ci(t.infoSyncTree_,e,n):ci(t.serverSyncTree_,e,n),ir(t.eventQueue_,e._path,i)}(t._repo,t,c),function(){return _r(t._repo,t,c)}}function io(t,e,n,i){return no(t,"value",e,n,i)}function ro(t,e,n,i){return no(t,"child_added",e,n,i)}function oo(t,e,n,i){return no(t,"child_changed",e,n,i)}function so(t,e,n,i){return no(t,"child_moved",e,n,i)}function ao(t,e,n,i){return no(t,"child_removed",e,n,i)}function uo(t,e,n){var i=null,r=n?new Mr(n):null;"value"===e?i=new to(r):e&&(i=new eo(e,r)),_r(t._repo,t,i)}var co=function(){},lo=function(t){function e(e,n){var i=t.call(this)||this;return i._value=e,i._key=n,i}return(0,s.ZT)(e,t),e.prototype._apply=function(t){zi("endAt",this._value,t._path,!0);var e=Se(t._queryParams,this._value,this._key);if(Vr(e),Ur(e),t._queryParams.hasEnd())throw new Error("endAt: Starting point was already set (by another call to endAt, endBefore or equalTo).");return new Fr(t._repo,t._path,e,t._orderByCalled)},e}(co);function ho(t,e){return Xi("endAt","key",e,!0),new lo(t,e)}var fo=function(t){function e(e,n){var i=t.call(this)||this;return i._value=e,i._key=n,i}return(0,s.ZT)(e,t),e.prototype._apply=function(t){zi("endBefore",this._value,t._path,!1);var e,n,i,r,o=(e=t._queryParams,n=this._value,i=this._key,e.index_===Ut?("string"==typeof n&&(n=me(n)),r=Se(e,n,i)):r=Se(e,n,null==i?N:me(i)),r.endBeforeSet_=!0,r);if(Vr(o),Ur(o),t._queryParams.hasEnd())throw new Error("endBefore: Starting point was already set (by another call to endAt, endBefore or equalTo).");return new Fr(t._repo,t._path,o,t._orderByCalled)},e}(co);function po(t,e){return Xi("endBefore","key",e,!0),new fo(t,e)}var vo=function(t){function e(e,n){var i=t.call(this)||this;return i._value=e,i._key=n,i}return(0,s.ZT)(e,t),e.prototype._apply=function(t){zi("startAt",this._value,t._path,!0);var e=ke(t._queryParams,this._value,this._key);if(Vr(e),Ur(e),t._queryParams.hasStart())throw new Error("startAt: Starting point was already set (by another call to startAt, startBefore or equalTo).");return new Fr(t._repo,t._path,e,t._orderByCalled)},e}(co);function go(t,e){return void 0===t&&(t=null),Xi("startAt","key",e,!0),new vo(t,e)}var mo=function(t){function e(e,n){var i=t.call(this)||this;return i._value=e,i._key=n,i}return(0,s.ZT)(e,t),e.prototype._apply=function(t){zi("startAfter",this._value,t._path,!1);var e=function(t,e,n){var i;t.index_===Ut?("string"==typeof e&&(e=ge(e)),i=ke(t,e,n)):i=ke(t,e,null==n?P:ge(n));return i.startAfterSet_=!0,i}(t._queryParams,this._value,this._key);if(Vr(e),Ur(e),t._queryParams.hasStart())throw new Error("startAfter: Starting point was already set (by another call to startAt, startAfter, or equalTo).");return new Fr(t._repo,t._path,e,t._orderByCalled)},e}(co);function yo(t,e){return Xi("startAfter","key",e,!0),new mo(t,e)}var _o=function(t){function e(e){var n=t.call(this)||this;return n._limit=e,n}return(0,s.ZT)(e,t),e.prototype._apply=function(t){if(t._queryParams.hasLimit())throw new Error("limitToFirst: Limit was already set (by another call to limitToFirst or limitToLast).");return new Fr(t._repo,t._path,(e=t._queryParams,n=this._limit,(i=e.copy()).limitSet_=!0,i.limit_=n,i.viewFrom_="l",i),t._orderByCalled);var e,n,i},e}(co);function bo(t){if("number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("limitToFirst: First argument must be a positive integer.");return new _o(t)}var wo=function(t){function e(e){var n=t.call(this)||this;return n._limit=e,n}return(0,s.ZT)(e,t),e.prototype._apply=function(t){if(t._queryParams.hasLimit())throw new Error("limitToLast: Limit was already set (by another call to limitToFirst or limitToLast).");return new Fr(t._repo,t._path,(e=t._queryParams,n=this._limit,(i=e.copy()).limitSet_=!0,i.limit_=n,i.viewFrom_="r",i),t._orderByCalled);var e,n,i},e}(co);function Eo(t){if("number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("limitToLast: First argument must be a positive integer.");return new wo(t)}var Co=function(t){function e(e){var n=t.call(this)||this;return n._path=e,n}return(0,s.ZT)(e,t),e.prototype._apply=function(t){qr(t,"orderByChild");var e=new vt(this._path);if(It(e))throw new Error("orderByChild: cannot pass in empty path. Use orderByValue() instead.");var n=new fe(e),i=Ae(t._queryParams,n);return Ur(i),new Fr(t._repo,t._path,i,!0)},e}(co);function Io(t){if("$key"===t)throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');if("$priority"===t)throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');if("$value"===t)throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');return Qi("orderByChild","path",t,!1),new Co(t)}var To=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,s.ZT)(e,t),e.prototype._apply=function(t){qr(t,"orderByKey");var e=Ae(t._queryParams,Ut);return Ur(e),new Fr(t._repo,t._path,e,!0)},e}(co);function ko(){return new To}var So=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,s.ZT)(e,t),e.prototype._apply=function(t){qr(t,"orderByPriority");var e=Ae(t._queryParams,ee);return Ur(e),new Fr(t._repo,t._path,e,!0)},e}(co);function Ao(){return new So}var No=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,s.ZT)(e,t),e.prototype._apply=function(t){qr(t,"orderByValue");var e=Ae(t._queryParams,de);return Ur(e),new Fr(t._repo,t._path,e,!0)},e}(co);function Po(){return new No}var Oo=function(t){function e(e,n){var i=t.call(this)||this;return i._value=e,i._key=n,i}return(0,s.ZT)(e,t),e.prototype._apply=function(t){if(zi("equalTo",this._value,t._path,!1),t._queryParams.hasStart())throw new Error("equalTo: Starting point was already set (by another call to startAt/startAfter or equalTo).");if(t._queryParams.hasEnd())throw new Error("equalTo: Ending point was already set (by another call to endAt/endBefore or equalTo).");return new lo(this._value,this._key)._apply(new vo(this._value,this._key)._apply(t))},e}(co);function xo(t,e){return Xi("equalTo","key",e,!0),new Oo(t,e)}function Do(t){for(var e,n,i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];var a=(0,o.m9)(t);try{for(var u=(0,s.XA)(i),c=u.next();!c.done;c=u.next()){var l=c.value;a=l._apply(a)}}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(e)throw e.error}}return a}!function(t){(0,o.hu)(!jn,"__referenceConstructor has already been defined"),jn=t}(Wr),function(t){(0,o.hu)(!Hn,"__referenceConstructor has already been defined"),Hn=t}(Wr);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ro={},Lo=!1;function Mo(t,e,n,i,r){var o=i||t.options.databaseURL;void 0===o&&(t.options.projectId||k("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp()."),C("Using default host for project ",t.options.projectId),o=t.options.projectId+"-default-rtdb.firebaseio.com");var s,a=xr(o,r),u=a.repoInfo,c=void 0;"undefined"!=typeof process&&(c=process.env.FIREBASE_DATABASE_EMULATOR_HOST),c?(s=!0,o="http://"+c+"?ns="+u.namespace,u=(a=xr(o,r)).repoInfo):s=!a.repoInfo.secure;var l=r&&s?new K(K.OWNER):new z(t.name,t.options,e);Ji("Invalid Firebase Database URL",a),It(a.path)||k("Database URL must point to the root of a Firebase Database (not including a child path).");var h=function(t,e,n,i){var r=Ro[e.name];r||(r={},Ro[e.name]=r);var o=r[t.toURLString()];o&&k("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.");return o=new ur(t,Lo,n,i),r[t.toURLString()]=o,o}(u,t,l,new H(t.name,n));return new jo(h,t)}var jo=function(){function t(t,e){this._repoInternal=t,this.app=e,this.type="database",this._instanceStarted=!1}return Object.defineProperty(t.prototype,"_repo",{get:function(){return this._instanceStarted||(cr(this._repoInternal,this.app.options.appId,this.app.options.databaseAuthVariableOverride),this._instanceStarted=!0),this._repoInternal},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_root",{get:function(){return this._rootInternal||(this._rootInternal=new Wr(this._repo,gt())),this._rootInternal},enumerable:!1,configurable:!0}),t.prototype._delete=function(){var t,e,n;return null!==this._rootInternal&&(t=this._repo,e=this.app.name,(n=Ro[e])&&n[t.key]===t||k("Database "+e+"("+t.repoInfo_+") has already been deleted."),br(t),delete n[t.key],this._repoInternal=null,this._rootInternal=null),Promise.resolve()},t.prototype._checkNotDeleted=function(t){null===this._rootInternal&&k("Cannot call "+t+" on a deleted database.")},t}();function Fo(t,e,n,i){void 0===i&&(i={}),(t=(0,o.m9)(t))._checkNotDeleted("useEmulator"),t._instanceStarted&&k("Cannot call useEmulator() after instance has already been initialized.");var r=t._repoInternal,s=void 0;if(r.repoInfo_.nodeAdmin)i.mockUserToken&&k('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".'),s=new K(K.OWNER);else if(i.mockUserToken){var a=(0,o.Sg)(i.mockUserToken,t.app.options.projectId);s=new K(a)}!function(t,e,n,i){t.repoInfo_=new Q(e+":"+n,!1,t.repoInfo_.namespace,t.repoInfo_.webSocketOnly,t.repoInfo_.nodeAdmin,t.repoInfo_.persistenceKey,t.repoInfo_.includeNamespaceInQueryParams),i&&(t.authTokenProvider_=i)}(r,e,n,s)}function qo(t){(t=(0,o.m9)(t))._checkNotDeleted("goOffline"),br(t._repo)}function Uo(t){var e;(t=(0,o.m9)(t))._checkNotDeleted("goOnline"),(e=t._repo).persistentConnection_&&e.persistentConnection_.resume(ar)}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Vo={".sv":"timestamp"};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Wo=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}();function Bo(t,e,n){var i;if(t=(0,o.m9)(t),Zi("Reference.transaction",t._path),".length"===t.key||".keys"===t.key)throw"Reference.transaction failed: "+t.key+" is a read-only object.";var r=null===(i=null==n?void 0:n.applyLocally)||void 0===i||i,s=new o.BH,a=io(t,(function(){}));return function(t,e,n,i,r,s){wr(t,"transaction on "+e);var a={path:e,update:n,onComplete:i,status:null,order:m(),applyLocally:s,retryCount:0,unwatcher:r,abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=Cr(t,e,void 0);a.currentInputSnapshot=u;var c=a.update(u.val());if(void 0===c)a.unwatcher(),a.currentOutputSnapshotRaw=null,a.currentOutputSnapshotResolved=null,a.onComplete&&a.onComplete(null,!1,a.currentInputSnapshot);else{Ki("transaction failed: Data returned ",c,a.path),a.status=0;var l=Oi(t.transactionQueueTree_,e),h=xi(l)||[];h.push(a),Di(l,h);var f=void 0;"object"==typeof c&&null!==c&&(0,o.r3)(c,".priority")?(f=(0,o.DV)(c,".priority"),(0,o.hu)(Hi(f),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):f=(li(t.serverSyncTree_,e)||ae.EMPTY_NODE).getPriority().val();var d=hr(t),p=ce(c,f),v=Ai(p,u,d);a.currentOutputSnapshotRaw=p,a.currentOutputSnapshotResolved=v,a.currentWriteId=vr(t);var g=ri(t.serverSyncTree_,e,v,a.currentWriteId,a.applyLocally);rr(t.eventQueue_,e,g),Ir(t,t.transactionQueueTree_)}}(t._repo,t._path,e,(function(e,n,i){var r=null;e?s.reject(e):(r=new Br(i,new Wr(t._repo,t._path),ee),s.resolve(new Wo(n,r)))}),a,r),s.promise}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ho=function(){function t(t){this._delegate=t}return t.prototype.cancel=function(t){(0,o.Dv)("OnDisconnect.cancel",0,1,arguments.length),(0,o.Wj)("OnDisconnect.cancel","onComplete",t,!0);var e=this._delegate.cancel();return t&&e.then((function(){return t(null)}),(function(e){return t(e)})),e},t.prototype.remove=function(t){(0,o.Dv)("OnDisconnect.remove",0,1,arguments.length),(0,o.Wj)("OnDisconnect.remove","onComplete",t,!0);var e=this._delegate.remove();return t&&e.then((function(){return t(null)}),(function(e){return t(e)})),e},t.prototype.set=function(t,e){(0,o.Dv)("OnDisconnect.set",1,2,arguments.length),(0,o.Wj)("OnDisconnect.set","onComplete",e,!0);var n=this._delegate.set(t);return e&&n.then((function(){return e(null)}),(function(t){return e(t)})),n},t.prototype.setWithPriority=function(t,e,n){(0,o.Dv)("OnDisconnect.setWithPriority",2,3,arguments.length),(0,o.Wj)("OnDisconnect.setWithPriority","onComplete",n,!0);var i=this._delegate.setWithPriority(t,e);return n&&i.then((function(){return n(null)}),(function(t){return n(t)})),i},t.prototype.update=function(t,e){if((0,o.Dv)("OnDisconnect.update",1,2,arguments.length),Array.isArray(t)){for(var n={},i=0;i<t.length;++i)n[""+i]=t[i];t=n,S("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}(0,o.Wj)("OnDisconnect.update","onComplete",e,!0);var r=this._delegate.update(t);return e&&r.then((function(){return e(null)}),(function(t){return e(t)})),r},t}(),zo=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return(0,o.Dv)("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),Ko=function(){function t(t,e){this._database=t,this._delegate=e}return t.prototype.val=function(){return(0,o.Dv)("DataSnapshot.val",0,0,arguments.length),this._delegate.val()},t.prototype.exportVal=function(){return(0,o.Dv)("DataSnapshot.exportVal",0,0,arguments.length),this._delegate.exportVal()},t.prototype.toJSON=function(){return(0,o.Dv)("DataSnapshot.toJSON",0,1,arguments.length),this._delegate.toJSON()},t.prototype.exists=function(){return(0,o.Dv)("DataSnapshot.exists",0,0,arguments.length),this._delegate.exists()},t.prototype.child=function(e){return(0,o.Dv)("DataSnapshot.child",0,1,arguments.length),e=String(e),Qi("DataSnapshot.child","path",e,!1),new t(this._database,this._delegate.child(e))},t.prototype.hasChild=function(t){return(0,o.Dv)("DataSnapshot.hasChild",1,1,arguments.length),Qi("DataSnapshot.hasChild","path",t,!1),this._delegate.hasChild(t)},t.prototype.getPriority=function(){return(0,o.Dv)("DataSnapshot.getPriority",0,0,arguments.length),this._delegate.priority},t.prototype.forEach=function(e){var n=this;return(0,o.Dv)("DataSnapshot.forEach",1,1,arguments.length),(0,o.Wj)("DataSnapshot.forEach","action",e,!1),this._delegate.forEach((function(i){return e(new t(n._database,i))}))},t.prototype.hasChildren=function(){return(0,o.Dv)("DataSnapshot.hasChildren",0,0,arguments.length),this._delegate.hasChildren()},Object.defineProperty(t.prototype,"key",{get:function(){return this._delegate.key},enumerable:!1,configurable:!0}),t.prototype.numChildren=function(){return(0,o.Dv)("DataSnapshot.numChildren",0,0,arguments.length),this._delegate.size},t.prototype.getRef=function(){return(0,o.Dv)("DataSnapshot.ref",0,0,arguments.length),new Yo(this._database,this._delegate.ref)},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!1,configurable:!0}),t}(),Go=function(){function t(t,e){this.database=t,this._delegate=e}return t.prototype.on=function(e,n,i,r){var s,a=this;(0,o.Dv)("Query.on",2,4,arguments.length),(0,o.Wj)("Query.on","callback",n,!1);var u=t.getCancelAndContextArgs_("Query.on",i,r),c=function(t,e){n.call(u.context,new Ko(a.database,t),e)};c.userCallback=n,c.context=u.context;var l=null===(s=u.cancel)||void 0===s?void 0:s.bind(u.context);switch(e){case"value":return io(this._delegate,c,l),n;case"child_added":return ro(this._delegate,c,l),n;case"child_removed":return ao(this._delegate,c,l),n;case"child_changed":return oo(this._delegate,c,l),n;case"child_moved":return so(this._delegate,c,l),n;default:throw new Error((0,o.gK)("Query.on","eventType")+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},t.prototype.off=function(t,e,n){if((0,o.Dv)("Query.off",0,3,arguments.length),$i("Query.off",t,!0),(0,o.Wj)("Query.off","callback",e,!0),(0,o.lb)("Query.off","context",n,!0),e){var i=function(){};i.userCallback=e,i.context=n,uo(this._delegate,t,i)}else uo(this._delegate,t)},t.prototype.get=function(){var t=this;return Jr(this._delegate).then((function(e){return new Ko(t.database,e)}))},t.prototype.once=function(e,n,i,r){var s=this;(0,o.Dv)("Query.once",1,4,arguments.length),(0,o.Wj)("Query.once","callback",n,!0);var a=t.getCancelAndContextArgs_("Query.once",i,r),u=new o.BH,c=function(t,e){var i=new Ko(s.database,t);n&&n.call(a.context,i,e),u.resolve(i)};c.userCallback=n,c.context=a.context;var l=function(t){a.cancel&&a.cancel.call(a.context,t),u.reject(t)};switch(e){case"value":io(this._delegate,c,l,{onlyOnce:!0});break;case"child_added":ro(this._delegate,c,l,{onlyOnce:!0});break;case"child_removed":ao(this._delegate,c,l,{onlyOnce:!0});break;case"child_changed":oo(this._delegate,c,l,{onlyOnce:!0});break;case"child_moved":so(this._delegate,c,l,{onlyOnce:!0});break;default:throw new Error((0,o.gK)("Query.once","eventType")+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}return u.promise},t.prototype.limitToFirst=function(e){return(0,o.Dv)("Query.limitToFirst",1,1,arguments.length),new t(this.database,Do(this._delegate,bo(e)))},t.prototype.limitToLast=function(e){return(0,o.Dv)("Query.limitToLast",1,1,arguments.length),new t(this.database,Do(this._delegate,Eo(e)))},t.prototype.orderByChild=function(e){return(0,o.Dv)("Query.orderByChild",1,1,arguments.length),new t(this.database,Do(this._delegate,Io(e)))},t.prototype.orderByKey=function(){return(0,o.Dv)("Query.orderByKey",0,0,arguments.length),new t(this.database,Do(this._delegate,ko()))},t.prototype.orderByPriority=function(){return(0,o.Dv)("Query.orderByPriority",0,0,arguments.length),new t(this.database,Do(this._delegate,Ao()))},t.prototype.orderByValue=function(){return(0,o.Dv)("Query.orderByValue",0,0,arguments.length),new t(this.database,Do(this._delegate,Po()))},t.prototype.startAt=function(e,n){return void 0===e&&(e=null),(0,o.Dv)("Query.startAt",0,2,arguments.length),new t(this.database,Do(this._delegate,go(e,n)))},t.prototype.startAfter=function(e,n){return void 0===e&&(e=null),(0,o.Dv)("Query.startAfter",0,2,arguments.length),new t(this.database,Do(this._delegate,yo(e,n)))},t.prototype.endAt=function(e,n){return void 0===e&&(e=null),(0,o.Dv)("Query.endAt",0,2,arguments.length),new t(this.database,Do(this._delegate,ho(e,n)))},t.prototype.endBefore=function(e,n){return void 0===e&&(e=null),(0,o.Dv)("Query.endBefore",0,2,arguments.length),new t(this.database,Do(this._delegate,po(e,n)))},t.prototype.equalTo=function(e,n){return(0,o.Dv)("Query.equalTo",1,2,arguments.length),new t(this.database,Do(this._delegate,xo(e,n)))},t.prototype.toString=function(){return(0,o.Dv)("Query.toString",0,0,arguments.length),this._delegate.toString()},t.prototype.toJSON=function(){return(0,o.Dv)("Query.toJSON",0,1,arguments.length),this._delegate.toJSON()},t.prototype.isEqual=function(e){if((0,o.Dv)("Query.isEqual",1,1,arguments.length),!(e instanceof t)){var n="Query.isEqual failed: First argument must be an instance of firebase.database.Query.";throw new Error(n)}return this._delegate.isEqual(e._delegate)},t.getCancelAndContextArgs_=function(t,e,n){var i={cancel:void 0,context:void 0};if(e&&n)i.cancel=e,(0,o.Wj)(t,"cancel",i.cancel,!0),i.context=n,(0,o.lb)(t,"context",i.context,!0);else if(e)if("object"==typeof e&&null!==e)i.context=e;else{if("function"!=typeof e)throw new Error((0,o.gK)(t,"cancelOrContext")+" must either be a cancel callback or a context object.");i.cancel=e}return i},Object.defineProperty(t.prototype,"ref",{get:function(){return new Yo(this.database,new Wr(this._delegate._repo,this._delegate._path))},enumerable:!1,configurable:!0}),t}(),Yo=function(t){function e(e,n){var i=t.call(this,e,new Fr(n._repo,n._path,new Te,!1))||this;return i.database=e,i._delegate=n,i}return(0,s.ZT)(e,t),e.prototype.getKey=function(){return(0,o.Dv)("Reference.key",0,0,arguments.length),this._delegate.key},e.prototype.child=function(t){return(0,o.Dv)("Reference.child",1,1,arguments.length),"number"==typeof t&&(t=String(t)),new e(this.database,Kr(this._delegate,t))},e.prototype.getParent=function(){(0,o.Dv)("Reference.parent",0,0,arguments.length);var t=this._delegate.parent;return t?new e(this.database,t):null},e.prototype.getRoot=function(){return(0,o.Dv)("Reference.root",0,0,arguments.length),new e(this.database,this._delegate.root)},e.prototype.set=function(t,e){(0,o.Dv)("Reference.set",1,2,arguments.length),(0,o.Wj)("Reference.set","onComplete",e,!0);var n=$r(this._delegate,t);return e&&n.then((function(){return e(null)}),(function(t){return e(t)})),n},e.prototype.update=function(t,e){if((0,o.Dv)("Reference.update",1,2,arguments.length),Array.isArray(t)){for(var n={},i=0;i<t.length;++i)n[""+i]=t[i];t=n,S("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}Zi("Reference.update",this._delegate._path),(0,o.Wj)("Reference.update","onComplete",e,!0);var r=Zr(this._delegate,t);return e&&r.then((function(){return e(null)}),(function(t){return e(t)})),r},e.prototype.setWithPriority=function(t,e,n){(0,o.Dv)("Reference.setWithPriority",2,3,arguments.length),(0,o.Wj)("Reference.setWithPriority","onComplete",n,!0);var i=Qr(this._delegate,t,e);return n&&i.then((function(){return n(null)}),(function(t){return n(t)})),i},e.prototype.remove=function(t){(0,o.Dv)("Reference.remove",0,1,arguments.length),(0,o.Wj)("Reference.remove","onComplete",t,!0);var e=Yr(this._delegate);return t&&e.then((function(){return t(null)}),(function(e){return t(e)})),e},e.prototype.transaction=function(t,e,n){var i=this;(0,o.Dv)("Reference.transaction",1,3,arguments.length),(0,o.Wj)("Reference.transaction","transactionUpdate",t,!1),(0,o.Wj)("Reference.transaction","onComplete",e,!0),tr("Reference.transaction","applyLocally",n,!0);var r=Bo(this._delegate,t,{applyLocally:n}).then((function(t){return new zo(t.committed,new Ko(i.database,t.snapshot))}));return e&&r.then((function(t){return e(null,t.committed,t.snapshot)}),(function(t){return e(t,!1,null)})),r},e.prototype.setPriority=function(t,e){(0,o.Dv)("Reference.setPriority",1,2,arguments.length),(0,o.Wj)("Reference.setPriority","onComplete",e,!0);var n=Xr(this._delegate,t);return e&&n.then((function(){return e(null)}),(function(t){return e(t)})),n},e.prototype.push=function(t,n){var i=this;(0,o.Dv)("Reference.push",0,2,arguments.length),(0,o.Wj)("Reference.push","onComplete",n,!0);var r=Gr(this._delegate,t),s=r.then((function(t){return new e(i.database,t)}));n&&s.then((function(){return n(null)}),(function(t){return n(t)}));var a=new e(this.database,r);return a.then=s.then.bind(s),a.catch=s.catch.bind(s,void 0),a},e.prototype.onDisconnect=function(){return Zi("Reference.onDisconnect",this._delegate._path),new Ho(new jr(this._delegate._repo,this._delegate._path))},Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!1,configurable:!0}),e}(Go),$o=function(){function t(t,e){var n=this;this._delegate=t,this.app=e,this.INTERNAL={delete:function(){return n._delegate._delete()}}}return t.prototype.useEmulator=function(t,e,n){void 0===n&&(n={}),Fo(this._delegate,t,e,n)},t.prototype.ref=function(t){if((0,o.Dv)("database.ref",0,1,arguments.length),t instanceof Yo){var e=zr(this._delegate,t.toString());return new Yo(this,e)}e=Hr(this._delegate,t);return new Yo(this,e)},t.prototype.refFromURL=function(t){var e="database.refFromURL";(0,o.Dv)(e,1,1,arguments.length);var n=zr(this._delegate,t);return new Yo(this,n)},t.prototype.goOffline=function(){return(0,o.Dv)("database.goOffline",0,0,arguments.length),qo(this._delegate)},t.prototype.goOnline=function(){return(0,o.Dv)("database.goOnline",0,0,arguments.length),Uo(this._delegate)},t.ServerValue={TIMESTAMP:Vo,increment:function(t){return function(t){return{".sv":{increment:t}}}(t)}},t}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Xo=Object.freeze({__proto__:null,forceLongPolling:function(){ct.forceDisallow(),st.forceAllow()},forceWebSockets:function(){st.forceDisallow()},isWebSocketsAvailable:function(){return ct.isAvailable()},setSecurityDebugCallback:function(t,e){t._delegate._repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){!function(t,e){if(void 0===e&&(e=!1),"undefined"!=typeof console){var n;e?(t.statsListener_||(t.statsListener_=new Fe(t.stats_)),n=t.statsListener_.get()):n=t.stats_.get();var i=Object.keys(n).reduce((function(t,e){return Math.max(e.length,t)}),0);M(n,(function(t,e){for(var n=t.length;n<i+2;n++);}))}}(t._delegate._repo,e)},statsIncrementCounter:function(t,e){!function(t,e){var n,i;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */t.stats_.incrementCounter(e),n=t.statsReporter_,i=e,n.statsToReport_[i]=!0}(t._delegate._repo,e)},dataUpdateCount:function(t){return t._delegate._repo.dataUpdateCount},interceptServerData:function(t,e){return function(t,e){t.interceptServerDataCallback_=e}(t._delegate._repo,e)},initStandalone:function(t){var e=t.app,n=t.url,i=t.version,o=t.customAuthImpl,s=t.namespace,a=t.nodeAdmin,u=void 0!==a&&a;c(i);var l=new r.zt("auth-internal",new r.H0("database-standalone"));return l.setComponent(new r.wA("auth-internal",(function(){return o}),"PRIVATE")),{instance:new $o(Mo(e,l,void 0,n,u),e),namespace:s}}}),Qo=Mt;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */Mt.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},Mt.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var Zo=ht,Jo=Q,ts=Object.freeze({__proto__:null,DataConnection:Qo,RealTimeConnection:Zo,hijackHash:function(t){var e=Mt.prototype.put;return Mt.prototype.put=function(n,i,r,o){void 0!==o&&(o=t()),e.call(this,n,i,r,o)},function(){Mt.prototype.put=e}},ConnectionTarget:Jo,queryIdentifier:function(t){return t._delegate._queryIdentifier},forceRestClient:function(t){!function(t){Lo=t}(t)}}),es=$o.ServerValue;!function(e){c(e.SDK_VERSION);var n=e.INTERNAL.registerComponent(new r.wA("database",(function(t,e){var n=e.instanceIdentifier,i=t.getProvider("app").getImmediate(),r=t.getProvider("auth-internal"),o=t.getProvider("app-check-internal");return new $o(Mo(i,r,o,n),i)}),"PUBLIC").setServiceProps({Reference:Yo,Query:Go,Database:$o,DataSnapshot:Ko,enableLogging:E,INTERNAL:Xo,ServerValue:es,TEST_ACCESS:ts}).setMultipleInstances(!0));e.registerVersion("@firebase/database","0.10.9"),(0,o.Yr)()&&(t.exports=n)}(i.Z)},594:(t,e,n)=>{"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function i(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var r;n.d(e,{in:()=>o,Yd:()=>h,Ub:()=>f,Am:()=>d});var o,s=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(o||(o={}));var a={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},u=o.INFO,c=((r={})[o.DEBUG]="log",r[o.VERBOSE]="log",r[o.INFO]="info",r[o.WARN]="warn",r[o.ERROR]="error",r),l=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){(new Date).toISOString();var r=c[e];if(!r)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")")}},h=function(){function t(t){this.name=t,this._logLevel=u,this._logHandler=l,this._userLogHandler=null,s.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in o))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?a[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,o.DEBUG],t)),this._logHandler.apply(this,i([this,o.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,o.VERBOSE],t)),this._logHandler.apply(this,i([this,o.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,o.INFO],t)),this._logHandler.apply(this,i([this,o.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,o.WARN],t)),this._logHandler.apply(this,i([this,o.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,o.ERROR],t)),this._logHandler.apply(this,i([this,o.ERROR],t))},t}();function f(t){s.forEach((function(e){e.setLogLevel(t)}))}function d(t,e){for(var n=function(n){var i=null;e&&e.level&&(i=a[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var r=[],s=2;s<arguments.length;s++)r[s-2]=arguments[s];var a=r.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=i?i:e.logLevel)&&t({level:o[n].toLowerCase(),message:a,args:r,type:e.name})}},i=0,r=s;i<r.length;i++){n(r[i])}}},589:(t,e,n)=>{"use strict";n.d(e,{BH:()=>v,LL:()=>I,gQ:()=>j,hu:()=>a,g5:()=>u,US:()=>l,h$:()=>h,r3:()=>x,Sg:()=>g,ne:()=>F,p$:()=>d,ZB:()=>p,gK:()=>W,m9:()=>G,GJ:()=>O,jU:()=>b,xb:()=>R,uI:()=>y,UG:()=>_,Yr:()=>E,b$:()=>w,w9:()=>P,cI:()=>S,UI:()=>L,xO:()=>M,DV:()=>D,ug:()=>K,dS:()=>z,Pz:()=>A,Dv:()=>V,Wj:()=>B,lb:()=>H});var i=n(655),r=!1,o=!1,s="${JSCORE_VERSION}",a=function(t,e){if(!t)throw u(e)},u=function(t){return new Error("Firebase Database ("+s+") INTERNAL ASSERT FAILED: "+t)},c=function(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&t.charCodeAt(++i)),e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e},l={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[],r=0;r<t.length;r+=3){var o=t[r],s=r+1<t.length,a=s?t[r+1]:0,u=r+2<t.length,c=u?t[r+2]:0,l=o>>2,h=(3&o)<<4|a>>4,f=(15&a)<<2|c>>6,d=63&c;u||(d=64,s||(f=64)),i.push(n[l],n[h],n[f],n[d])}return i.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(c(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,i=0;n<t.length;){var r=t[n++];if(r<128)e[i++]=String.fromCharCode(r);else if(r>191&&r<224){var o=t[n++];e[i++]=String.fromCharCode((31&r)<<6|63&o)}else if(r>239&&r<365){var s=((7&r)<<18|(63&(o=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[i++]=String.fromCharCode(55296+(s>>10)),e[i++]=String.fromCharCode(56320+(1023&s))}else{o=t[n++];var a=t[n++];e[i++]=String.fromCharCode((15&r)<<12|(63&o)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[],r=0;r<t.length;){var o=n[t.charAt(r++)],s=r<t.length?n[t.charAt(r)]:0,a=++r<t.length?n[t.charAt(r)]:64,u=++r<t.length?n[t.charAt(r)]:64;if(++r,null==o||null==s||null==a||null==u)throw Error();var c=o<<2|s>>4;if(i.push(c),64!==a){var l=s<<4&240|a>>2;if(i.push(l),64!==u){var h=a<<6&192|u;i.push(h)}}}return i},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},h=function(t){var e=c(t);return l.encodeByteArray(e,!0)},f=function(t){try{return l.decodeString(t,!0)}catch(t){}return null};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function d(t){return p(void 0,t)}function p(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=p(t[n],e[n]));return t}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var v=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,i){n?e.reject(n):e.resolve(i),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,i))}},t}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function g(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');var n=e||"demo-project",r=t.iat||0,o=t.sub||t.user_id;if(!o)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");var s=(0,i.pi)({iss:"https://securetoken.google.com/"+n,aud:n,iat:r,exp:r+3600,auth_time:r,sub:o,user_id:o,firebase:{sign_in_provider:"custom",identities:{}}},t);return[l.encodeString(JSON.stringify({alg:"none",type:"JWT"}),!1),l.encodeString(JSON.stringify(s),!1),""].join(".")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function m(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function y(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(m())}function _(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function b(){return"object"==typeof self&&self.self===self}function w(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function E(){return!0===r||!0===o}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var C=function(t){function e(n,i,r){var o=t.call(this,i)||this;return o.code=n,o.customData=r,o.name="FirebaseError",Object.setPrototypeOf(o,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,I.prototype.create),o}return(0,i.ZT)(e,t),e}(Error),I=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var i=e[0]||{},r=this.service+"/"+t,o=this.errors[t],s=o?T(o,i):"Error",a=this.serviceName+": "+s+" ("+r+").",u=new C(r,a,i);return u},t}();function T(t,e){return t.replace(k,(function(t,n){var i=e[n];return null!=i?String(i):"<"+n+"?>"}))}var k=/\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function S(t){return JSON.parse(t)}function A(t){return JSON.stringify(t)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var N=function(t){var e={},n={},i={},r="";try{var o=t.split(".");e=S(f(o[0])||""),n=S(f(o[1])||""),r=o[2],i=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:i,signature:r}},P=function(t){var e=N(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},O=function(t){var e=N(t).claims;return"object"==typeof e&&!0===e.admin};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function x(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function D(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function R(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function L(t,e,n){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(i[r]=e.call(n,t[r],r,t));return i}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function M(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},i=0,r=Object.entries(t);i<r.length;i++){var o=r[i];n(o[0],o[1])}return e.length?"&"+e.join("&"):""}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var j=function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}return t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var i=0;i<16;i++)n[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(i=0;i<16;i++)n[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(i=16;i<80;i++){var r=n[i-3]^n[i-8]^n[i-14]^n[i-16];n[i]=4294967295&(r<<1|r>>>31)}var o,s,a=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(i=0;i<80;i++){i<40?i<20?(o=l^u&(c^l),s=1518500249):(o=u^c^l,s=1859775393):i<60?(o=u&c|l&(u|c),s=2400959708):(o=u^c^l,s=3395469782);r=(a<<5|a>>>27)+o+h+s+n[i]&4294967295;h=l,l=c,c=4294967295&(u<<30|u>>>2),u=a,a=r}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,i=0,r=this.buf_,o=this.inbuf_;i<e;){if(0===o)for(;i<=n;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(r[o]=t.charCodeAt(i),++i,++o===this.blockSize){this.compress_(r),o=0;break}}else for(;i<e;)if(r[o]=t[i],++i,++o===this.blockSize){this.compress_(r),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var i=0;for(n=0;n<5;n++)for(var r=24;r>=0;r-=8)t[i]=this.chain_[n]>>r&255,++i;return t},t}();function F(t,e){var n=new q(t,e);return n.subscribe.bind(n)}var q=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var i,r=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(i=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,i=e;n<i.length;n++){var r=i[n];if(r in t&&"function"==typeof t[r])return!0}return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:n}).next&&(i.next=U),void 0===i.error&&(i.error=U),void 0===i.complete&&(i.complete=U);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{r.finalError?i.error(r.finalError):i.complete()}catch(t){}})),this.observers.push(i),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function U(){}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var V=function(t,e,n,i){var r;if(i<e?r="at least "+e:i>n&&(r=0===n?"none":"no more than "+n),r)throw new Error(t+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+r+".")};function W(t,e){return t+" failed: "+e+" argument "}function B(t,e,n,i){if((!i||n)&&"function"!=typeof n)throw new Error(W(t,e)+"must be a valid function.")}function H(t,e,n,i){if((!i||n)&&("object"!=typeof n||null===n))throw new Error(W(t,e)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var z=function(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);if(r>=55296&&r<=56319){var o=r-55296;i++,a(i<t.length,"Surrogate pair missing trail surrogate."),r=65536+(o<<10)+(t.charCodeAt(i)-56320)}r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):r<65536?(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e},K=function(t){for(var e=0,n=0;n<t.length;n++){var i=t.charCodeAt(n);i<128?e++:i<2048?e+=2:i>=55296&&i<=56319?(e+=4,n++):e+=3}return e};
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function G(t){return t&&t._delegate?t._delegate:t}},669:(t,e,n)=>{n(609)},448:(t,e,n)=>{"use strict";var i=n(867),r=n(26),o=n(372),s=n(327),a=n(97),u=n(109),c=n(985),l=n(61);t.exports=function(t){return new Promise((function(e,n){var h=t.data,f=t.headers;i.isFormData(h)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(t.auth){var p=t.auth.username||"",v=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";f.Authorization="Basic "+btoa(p+":"+v)}var g=a(t.baseURL,t.url);if(d.open(t.method.toUpperCase(),s(g,t.params,t.paramsSerializer),!0),d.timeout=t.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var i="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,o={data:t.responseType&&"text"!==t.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:i,config:t,request:d};r(e,n,o),d=null}},d.onabort=function(){d&&(n(l("Request aborted",t,"ECONNABORTED",d)),d=null)},d.onerror=function(){n(l("Network Error",t,null,d)),d=null},d.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(l(e,t,"ECONNABORTED",d)),d=null},i.isStandardBrowserEnv()){var m=(t.withCredentials||c(g))&&t.xsrfCookieName?o.read(t.xsrfCookieName):void 0;m&&(f[t.xsrfHeaderName]=m)}if("setRequestHeader"in d&&i.forEach(f,(function(t,e){void 0===h&&"content-type"===e.toLowerCase()?delete f[e]:d.setRequestHeader(e,t)})),i.isUndefined(t.withCredentials)||(d.withCredentials=!!t.withCredentials),t.responseType)try{d.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&d.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){d&&(d.abort(),n(t),d=null)})),h||(h=null),d.send(h)}))}},609:(t,e,n)=>{"use strict";var i=n(867),r=n(849),o=n(321),s=n(185);function a(t){var e=new o(t),n=r(o.prototype.request,e);return i.extend(n,o.prototype,e),i.extend(n,e),n}var u=a(n(419));u.Axios=o,u.create=function(t){return a(s(u.defaults,t))},u.Cancel=n(263),u.CancelToken=n(972),u.isCancel=n(502),u.all=function(t){return Promise.all(t)},u.spread=n(713),u.isAxiosError=n(268),t.exports=u,t.exports.default=u},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,n)=>{"use strict";var i=n(263);function r(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new i(t),e(n.reason))}))}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var t;return{token:new r((function(e){t=e})),cancel:t}},t.exports=r},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,n)=>{"use strict";var i=n(867),r=n(327),o=n(782),s=n(572),a=n(185);function u(t){this.defaults=t,this.interceptors={request:new o,response:new o}}u.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[s,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},u.prototype.getUri=function(t){return t=a(this.defaults,t),r(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(t){u.prototype[t]=function(e,n){return this.request(a(n||{},{method:t,url:e,data:(n||{}).data}))}})),i.forEach(["post","put","patch"],(function(t){u.prototype[t]=function(e,n,i){return this.request(a(i||{},{method:t,url:e,data:n}))}})),t.exports=u},782:(t,e,n)=>{"use strict";var i=n(867);function r(){this.handlers=[]}r.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},r.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},r.prototype.forEach=function(t){i.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=r},97:(t,e,n)=>{"use strict";var i=n(793),r=n(303);t.exports=function(t,e){return t&&!i(e)?r(t,e):e}},61:(t,e,n)=>{"use strict";var i=n(481);t.exports=function(t,e,n,r,o){var s=new Error(t);return i(s,e,n,r,o)}},572:(t,e,n)=>{"use strict";var i=n(867),r=n(527),o=n(502),s=n(419);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=r(t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||s.adapter)(t).then((function(e){return a(t),e.data=r(e.data,e.headers,t.transformResponse),e}),(function(e){return o(e)||(a(t),e&&e.response&&(e.response.data=r(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,n,i,r){return t.config=e,n&&(t.code=n),t.request=i,t.response=r,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,n)=>{"use strict";var i=n(867);t.exports=function(t,e){e=e||{};var n={},r=["url","method","data"],o=["headers","auth","proxy","params"],s=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function u(t,e){return i.isPlainObject(t)&&i.isPlainObject(e)?i.merge(t,e):i.isPlainObject(e)?i.merge({},e):i.isArray(e)?e.slice():e}function c(r){i.isUndefined(e[r])?i.isUndefined(t[r])||(n[r]=u(void 0,t[r])):n[r]=u(t[r],e[r])}i.forEach(r,(function(t){i.isUndefined(e[t])||(n[t]=u(void 0,e[t]))})),i.forEach(o,c),i.forEach(s,(function(r){i.isUndefined(e[r])?i.isUndefined(t[r])||(n[r]=u(void 0,t[r])):n[r]=u(void 0,e[r])})),i.forEach(a,(function(i){i in e?n[i]=u(t[i],e[i]):i in t&&(n[i]=u(void 0,t[i]))}));var l=r.concat(o).concat(s).concat(a),h=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===l.indexOf(t)}));return i.forEach(h,c),n}},26:(t,e,n)=>{"use strict";var i=n(61);t.exports=function(t,e,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?e(i("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},527:(t,e,n)=>{"use strict";var i=n(867);t.exports=function(t,e,n){return i.forEach(n,(function(n){t=n(t,e)})),t}},419:(t,e,n)=>{"use strict";var i=n(867),r=n(16),o={"Content-Type":"application/x-www-form-urlencoded"};function s(t,e){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,u={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(a=n(448)),a),transformRequest:[function(t,e){return r(e,"Accept"),r(e,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(s(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)?(s(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},i.forEach(["delete","get","head"],(function(t){u.headers[t]={}})),i.forEach(["post","put","patch"],(function(t){u.headers[t]=i.merge(o)})),t.exports=u},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),i=0;i<n.length;i++)n[i]=arguments[i];return t.apply(e,n)}}},327:(t,e,n)=>{"use strict";var i=n(867);function r(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var o;if(n)o=n(e);else if(i.isURLSearchParams(e))o=e.toString();else{var s=[];i.forEach(e,(function(t,e){null!=t&&(i.isArray(t)?e+="[]":t=[t],i.forEach(t,(function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),s.push(r(e)+"="+r(t))})))})),o=s.join("&")}if(o){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,n)=>{"use strict";var i=n(867);t.exports=i.isStandardBrowserEnv()?{write:function(t,e,n,r,o,s){var a=[];a.push(t+"="+encodeURIComponent(e)),i.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),i.isString(r)&&a.push("path="+r),i.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},268:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},985:(t,e,n)=>{"use strict";var i=n(867);t.exports=i.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function r(t){var i=t;return e&&(n.setAttribute("href",i),i=n.href),n.setAttribute("href",i),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=r(window.location.href),function(e){var n=i.isString(e)?r(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},16:(t,e,n)=>{"use strict";var i=n(867);t.exports=function(t,e){i.forEach(t,(function(n,i){i!==e&&i.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[i])}))}},109:(t,e,n)=>{"use strict";var i=n(867),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,o,s={};return t?(i.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),e=i.trim(t.substr(0,o)).toLowerCase(),n=i.trim(t.substr(o+1)),e){if(s[e]&&r.indexOf(e)>=0)return;s[e]="set-cookie"===e?(s[e]?s[e]:[]).concat([n]):s[e]?s[e]+", "+n:n}})),s):s}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,n)=>{"use strict";var i=n(849),r=Object.prototype.toString;function o(t){return"[object Array]"===r.call(t)}function s(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function u(t){if("[object Object]"!==r.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function c(t){return"[object Function]"===r.call(t)}function l(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),o(t))for(var n=0,i=t.length;n<i;n++)e.call(null,t[n],n,t);else for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.call(null,t[r],r,t)}t.exports={isArray:o,isArrayBuffer:function(t){return"[object ArrayBuffer]"===r.call(t)},isBuffer:function(t){return null!==t&&!s(t)&&null!==t.constructor&&!s(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isPlainObject:u,isUndefined:s,isDate:function(t){return"[object Date]"===r.call(t)},isFile:function(t){return"[object File]"===r.call(t)},isBlob:function(t){return"[object Blob]"===r.call(t)},isFunction:c,isStream:function(t){return a(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function t(){var e={};function n(n,i){u(e[i])&&u(n)?e[i]=t(e[i],n):u(n)?e[i]=t({},n):o(n)?e[i]=n.slice():e[i]=n}for(var i=0,r=arguments.length;i<r;i++)l(arguments[i],n);return e},extend:function(t,e,n){return l(e,(function(e,r){t[r]=n&&"function"==typeof e?i(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},655:(t,e,n)=>{"use strict";n.d(e,{ZT:()=>r,pi:()=>o,mG:()=>s,Jh:()=>a,XA:()=>u,CR:()=>c,ev:()=>l});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function s(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{u(i.next(t))}catch(t){o(t)}}function a(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((i=i.apply(t,e||[])).next())}))}function a(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}Object.create;function u(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return s}function l(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))}Object.create},973:t=>{const e="MY_ALERT_ID";t.exports.showAlert=function(t,n,i){let r=`\n        <div id="MY_ALERT_ID" class="position-fixed" style="top:0; left: 0px; width: 100vw; height: 100vh; display: inline-block; z-index: 1000;">\n                <div class="position-absolute top-50 start-50 translate-middle w-75 bg-light" style="border-radius: 10px; max-width: 500px; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.7);">\n                    <div class="container-fluid p-4" style="height: 100%;">\n                        <div class="row align-items-center justify-content-center" style="height: 100%;">\n                            <div class="col-12 text-center">\n                                <p class="fw-bold" style="word-wrap: break-word;">${t}</p>\n                                <button id="btn-action" class="btn fw-bold" style="width: 100%; border-radius: 10px; color: white; background-color: orange;">${n}</button>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            `;document.body.insertAdjacentHTML("beforeend",r);let o=document.querySelector("#btn-action"),s=document.querySelector("#"+e);o.addEventListener("click",(()=>{s.remove(),i()}))};t.exports.showLoading=function(t,e){let n=`\n        <div id="${t}" class="position-fixed" style="top:0; left: 0px; width: 100vw; height: 100vh; display: inline-block; z-index: 1000;">\n                <div class="position-absolute top-50 start-50 translate-middle w-75 bg-light" style="border-radius: 10px; max-width: 500px;">\n                    <div class="container-fluid p-4" style="height: 100%;">\n                        <div class="row align-items-center justify-content-center" style="height: 100%;">\n                            <div class="col-12 text-center">\n                                <div class="spinner-border" style="color: orange;" role="status">\n                                    <span class="visually-hidden">Loading...</span>\n                                </div>\n                                <p class="fw-bold" style="word-wrap: break-word;">${e}</p>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            `;document.body.insertAdjacentHTML("beforeend",n)},t.exports.hideLoading=function(t){document.querySelector("#"+t).remove()}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,loaded:!1,exports:{}};return t[i](o,o.exports,n),o.loaded=!0,o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t={};n.r(t),n.d(t,{afterMain:()=>w,afterRead:()=>y,afterWrite:()=>I,applyStyles:()=>O,arrow:()=>X,auto:()=>s,basePlacements:()=>a,beforeMain:()=>_,beforeRead:()=>g,beforeWrite:()=>E,bottom:()=>i,clippingParents:()=>l,computeStyles:()=>J,createPopper:()=>Pt,createPopperBase:()=>Nt,createPopperLite:()=>Ot,detectOverflow:()=>gt,end:()=>c,eventListeners:()=>et,flip:()=>mt,hide:()=>bt,left:()=>o,main:()=>b,modifierPhases:()=>T,offset:()=>wt,placements:()=>v,popper:()=>f,popperGenerator:()=>At,popperOffsets:()=>Et,preventOverflow:()=>Ct,read:()=>m,reference:()=>d,right:()=>r,start:()=>u,top:()=>e,variationPlacements:()=>p,viewport:()=>h,write:()=>C});var e="top",i="bottom",r="right",o="left",s="auto",a=[e,i,r,o],u="start",c="end",l="clippingParents",h="viewport",f="popper",d="reference",p=a.reduce((function(t,e){return t.concat([e+"-"+u,e+"-"+c])}),[]),v=[].concat(a,[s]).reduce((function(t,e){return t.concat([e,e+"-"+u,e+"-"+c])}),[]),g="beforeRead",m="read",y="afterRead",_="beforeMain",b="main",w="afterMain",E="beforeWrite",C="write",I="afterWrite",T=[g,m,y,_,b,w,E,C,I];function k(t){return t?(t.nodeName||"").toLowerCase():null}function S(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function A(t){return t instanceof S(t).Element||t instanceof Element}function N(t){return t instanceof S(t).HTMLElement||t instanceof HTMLElement}function P(t){return"undefined"!=typeof ShadowRoot&&(t instanceof S(t).ShadowRoot||t instanceof ShadowRoot)}const O={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},r=e.elements[t];N(r)&&k(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?r.removeAttribute(t):r.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],r=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});N(i)&&k(i)&&(Object.assign(i.style,o),Object.keys(r).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function x(t){return t.split("-")[0]}var D=Math.round;function R(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),i=1,r=1;return N(t)&&e&&(i=n.width/t.offsetWidth||1,r=n.height/t.offsetHeight||1),{width:D(n.width/i),height:D(n.height/r),top:D(n.top/r),right:D(n.right/i),bottom:D(n.bottom/r),left:D(n.left/i),x:D(n.left/i),y:D(n.top/r)}}function L(t){var e=R(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function M(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&P(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function j(t){return S(t).getComputedStyle(t)}function F(t){return["table","td","th"].indexOf(k(t))>=0}function q(t){return((A(t)?t.ownerDocument:t.document)||window.document).documentElement}function U(t){return"html"===k(t)?t:t.assignedSlot||t.parentNode||(P(t)?t.host:null)||q(t)}function V(t){return N(t)&&"fixed"!==j(t).position?t.offsetParent:null}function W(t){for(var e=S(t),n=V(t);n&&F(n)&&"static"===j(n).position;)n=V(n);return n&&("html"===k(n)||"body"===k(n)&&"static"===j(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&N(t)&&"fixed"===j(t).position)return null;for(var n=U(t);N(n)&&["html","body"].indexOf(k(n))<0;){var i=j(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function B(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}var H=Math.max,z=Math.min,K=Math.round;function G(t,e,n){return H(t,z(e,n))}function Y(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function $(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const X={name:"arrow",enabled:!0,phase:"main",fn:function(t){var n,s=t.state,u=t.name,c=t.options,l=s.elements.arrow,h=s.modifiersData.popperOffsets,f=x(s.placement),d=B(f),p=[o,r].indexOf(f)>=0?"height":"width";if(l&&h){var v=function(t,e){return Y("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:$(t,a))}(c.padding,s),g=L(l),m="y"===d?e:o,y="y"===d?i:r,_=s.rects.reference[p]+s.rects.reference[d]-h[d]-s.rects.popper[p],b=h[d]-s.rects.reference[d],w=W(l),E=w?"y"===d?w.clientHeight||0:w.clientWidth||0:0,C=_/2-b/2,I=v[m],T=E-g[p]-v[y],k=E/2-g[p]/2+C,S=G(I,k,T),A=d;s.modifiersData[u]=((n={})[A]=S,n.centerOffset=S-k,n)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&M(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};var Q={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(t){var n,s=t.popper,a=t.popperRect,u=t.placement,c=t.offsets,l=t.position,h=t.gpuAcceleration,f=t.adaptive,d=t.roundOffsets,p=!0===d?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:K(K(e*i)/i)||0,y:K(K(n*i)/i)||0}}(c):"function"==typeof d?d(c):c,v=p.x,g=void 0===v?0:v,m=p.y,y=void 0===m?0:m,_=c.hasOwnProperty("x"),b=c.hasOwnProperty("y"),w=o,E=e,C=window;if(f){var I=W(s),T="clientHeight",k="clientWidth";I===S(s)&&"static"!==j(I=q(s)).position&&(T="scrollHeight",k="scrollWidth"),I=I,u===e&&(E=i,y-=I[T]-a.height,y*=h?1:-1),u===o&&(w=r,g-=I[k]-a.width,g*=h?1:-1)}var A,N=Object.assign({position:l},f&&Q);return h?Object.assign({},N,((A={})[E]=b?"0":"",A[w]=_?"0":"",A.transform=(C.devicePixelRatio||1)<2?"translate("+g+"px, "+y+"px)":"translate3d("+g+"px, "+y+"px, 0)",A)):Object.assign({},N,((n={})[E]=b?y+"px":"",n[w]=_?g+"px":"",n.transform="",n))}const J={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,s=void 0===o||o,a=n.roundOffsets,u=void 0===a||a,c={placement:x(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:r};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,Z(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:u})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,Z(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var tt={passive:!0};const et={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,r=i.scroll,o=void 0===r||r,s=i.resize,a=void 0===s||s,u=S(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",n.update,tt)})),a&&u.addEventListener("resize",n.update,tt),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",n.update,tt)})),a&&u.removeEventListener("resize",n.update,tt)}},data:{}};var nt={left:"right",right:"left",bottom:"top",top:"bottom"};function it(t){return t.replace(/left|right|bottom|top/g,(function(t){return nt[t]}))}var rt={start:"end",end:"start"};function ot(t){return t.replace(/start|end/g,(function(t){return rt[t]}))}function st(t){var e=S(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function at(t){return R(q(t)).left+st(t).scrollLeft}function ut(t){var e=j(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function ct(t){return["html","body","#document"].indexOf(k(t))>=0?t.ownerDocument.body:N(t)&&ut(t)?t:ct(U(t))}function lt(t,e){var n;void 0===e&&(e=[]);var i=ct(t),r=i===(null==(n=t.ownerDocument)?void 0:n.body),o=S(i),s=r?[o].concat(o.visualViewport||[],ut(i)?i:[]):i,a=e.concat(s);return r?a:a.concat(lt(U(s)))}function ht(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ft(t,e){return e===h?ht(function(t){var e=S(t),n=q(t),i=e.visualViewport,r=n.clientWidth,o=n.clientHeight,s=0,a=0;return i&&(r=i.width,o=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=i.offsetLeft,a=i.offsetTop)),{width:r,height:o,x:s+at(t),y:a}}(t)):N(e)?function(t){var e=R(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):ht(function(t){var e,n=q(t),i=st(t),r=null==(e=t.ownerDocument)?void 0:e.body,o=H(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),s=H(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-i.scrollLeft+at(t),u=-i.scrollTop;return"rtl"===j(r||n).direction&&(a+=H(n.clientWidth,r?r.clientWidth:0)-o),{width:o,height:s,x:a,y:u}}(q(t)))}function dt(t,e,n){var i="clippingParents"===e?function(t){var e=lt(U(t)),n=["absolute","fixed"].indexOf(j(t).position)>=0&&N(t)?W(t):t;return A(n)?e.filter((function(t){return A(t)&&M(t,n)&&"body"!==k(t)})):[]}(t):[].concat(e),r=[].concat(i,[n]),o=r[0],s=r.reduce((function(e,n){var i=ft(t,n);return e.top=H(i.top,e.top),e.right=z(i.right,e.right),e.bottom=z(i.bottom,e.bottom),e.left=H(i.left,e.left),e}),ft(t,o));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}function pt(t){return t.split("-")[1]}function vt(t){var n,s=t.reference,a=t.element,l=t.placement,h=l?x(l):null,f=l?pt(l):null,d=s.x+s.width/2-a.width/2,p=s.y+s.height/2-a.height/2;switch(h){case e:n={x:d,y:s.y-a.height};break;case i:n={x:d,y:s.y+s.height};break;case r:n={x:s.x+s.width,y:p};break;case o:n={x:s.x-a.width,y:p};break;default:n={x:s.x,y:s.y}}var v=h?B(h):null;if(null!=v){var g="y"===v?"height":"width";switch(f){case u:n[v]=n[v]-(s[g]/2-a[g]/2);break;case c:n[v]=n[v]+(s[g]/2-a[g]/2)}}return n}function gt(t,n){void 0===n&&(n={});var o=n,s=o.placement,u=void 0===s?t.placement:s,c=o.boundary,p=void 0===c?l:c,v=o.rootBoundary,g=void 0===v?h:v,m=o.elementContext,y=void 0===m?f:m,_=o.altBoundary,b=void 0!==_&&_,w=o.padding,E=void 0===w?0:w,C=Y("number"!=typeof E?E:$(E,a)),I=y===f?d:f,T=t.elements.reference,k=t.rects.popper,S=t.elements[b?I:y],N=dt(A(S)?S:S.contextElement||q(t.elements.popper),p,g),P=R(T),O=vt({reference:P,element:k,strategy:"absolute",placement:u}),x=ht(Object.assign({},k,O)),D=y===f?x:P,L={top:N.top-D.top+C.top,bottom:D.bottom-N.bottom+C.bottom,left:N.left-D.left+C.left,right:D.right-N.right+C.right},M=t.modifiersData.offset;if(y===f&&M){var j=M[u];Object.keys(L).forEach((function(t){var n=[r,i].indexOf(t)>=0?1:-1,o=[e,i].indexOf(t)>=0?"y":"x";L[t]+=j[o]*n}))}return L}const mt={name:"flip",enabled:!0,phase:"main",fn:function(t){var n=t.state,c=t.options,l=t.name;if(!n.modifiersData[l]._skip){for(var h=c.mainAxis,f=void 0===h||h,d=c.altAxis,g=void 0===d||d,m=c.fallbackPlacements,y=c.padding,_=c.boundary,b=c.rootBoundary,w=c.altBoundary,E=c.flipVariations,C=void 0===E||E,I=c.allowedAutoPlacements,T=n.options.placement,k=x(T),S=m||(k===T||!C?[it(T)]:function(t){if(x(t)===s)return[];var e=it(t);return[ot(t),e,ot(e)]}(T)),A=[T].concat(S).reduce((function(t,e){return t.concat(x(e)===s?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,r=n.boundary,o=n.rootBoundary,s=n.padding,u=n.flipVariations,c=n.allowedAutoPlacements,l=void 0===c?v:c,h=pt(i),f=h?u?p:p.filter((function(t){return pt(t)===h})):a,d=f.filter((function(t){return l.indexOf(t)>=0}));0===d.length&&(d=f);var g=d.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:r,rootBoundary:o,padding:s})[x(n)],e}),{});return Object.keys(g).sort((function(t,e){return g[t]-g[e]}))}(n,{placement:e,boundary:_,rootBoundary:b,padding:y,flipVariations:C,allowedAutoPlacements:I}):e)}),[]),N=n.rects.reference,P=n.rects.popper,O=new Map,D=!0,R=A[0],L=0;L<A.length;L++){var M=A[L],j=x(M),F=pt(M)===u,q=[e,i].indexOf(j)>=0,U=q?"width":"height",V=gt(n,{placement:M,boundary:_,rootBoundary:b,altBoundary:w,padding:y}),W=q?F?r:o:F?i:e;N[U]>P[U]&&(W=it(W));var B=it(W),H=[];if(f&&H.push(V[j]<=0),g&&H.push(V[W]<=0,V[B]<=0),H.every((function(t){return t}))){R=M,D=!1;break}O.set(M,H)}if(D)for(var z=function(t){var e=A.find((function(e){var n=O.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return R=e,"break"},K=C?3:1;K>0;K--){if("break"===z(K))break}n.placement!==R&&(n.modifiersData[l]._skip=!0,n.placement=R,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function yt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function _t(t){return[e,r,i,o].some((function(e){return t[e]>=0}))}const bt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,r=e.rects.popper,o=e.modifiersData.preventOverflow,s=gt(e,{elementContext:"reference"}),a=gt(e,{altBoundary:!0}),u=yt(s,i),c=yt(a,r,o),l=_t(u),h=_t(c);e.modifiersData[n]={referenceClippingOffsets:u,popperEscapeOffsets:c,isReferenceHidden:l,hasPopperEscaped:h},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":h})}};const wt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var n=t.state,i=t.options,s=t.name,a=i.offset,u=void 0===a?[0,0]:a,c=v.reduce((function(t,i){return t[i]=function(t,n,i){var s=x(t),a=[o,e].indexOf(s)>=0?-1:1,u="function"==typeof i?i(Object.assign({},n,{placement:t})):i,c=u[0],l=u[1];return c=c||0,l=(l||0)*a,[o,r].indexOf(s)>=0?{x:l,y:c}:{x:c,y:l}}(i,n.rects,u),t}),{}),l=c[n.placement],h=l.x,f=l.y;null!=n.modifiersData.popperOffsets&&(n.modifiersData.popperOffsets.x+=h,n.modifiersData.popperOffsets.y+=f),n.modifiersData[s]=c}};const Et={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=vt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}};const Ct={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var n=t.state,s=t.options,a=t.name,c=s.mainAxis,l=void 0===c||c,h=s.altAxis,f=void 0!==h&&h,d=s.boundary,p=s.rootBoundary,v=s.altBoundary,g=s.padding,m=s.tether,y=void 0===m||m,_=s.tetherOffset,b=void 0===_?0:_,w=gt(n,{boundary:d,rootBoundary:p,padding:g,altBoundary:v}),E=x(n.placement),C=pt(n.placement),I=!C,T=B(E),k="x"===T?"y":"x",S=n.modifiersData.popperOffsets,A=n.rects.reference,N=n.rects.popper,P="function"==typeof b?b(Object.assign({},n.rects,{placement:n.placement})):b,O={x:0,y:0};if(S){if(l||f){var D="y"===T?e:o,R="y"===T?i:r,M="y"===T?"height":"width",j=S[T],F=S[T]+w[D],q=S[T]-w[R],U=y?-N[M]/2:0,V=C===u?A[M]:N[M],K=C===u?-N[M]:-A[M],Y=n.elements.arrow,$=y&&Y?L(Y):{width:0,height:0},X=n.modifiersData["arrow#persistent"]?n.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},Q=X[D],Z=X[R],J=G(0,A[M],$[M]),tt=I?A[M]/2-U-J-Q-P:V-J-Q-P,et=I?-A[M]/2+U+J+Z+P:K+J+Z+P,nt=n.elements.arrow&&W(n.elements.arrow),it=nt?"y"===T?nt.clientTop||0:nt.clientLeft||0:0,rt=n.modifiersData.offset?n.modifiersData.offset[n.placement][T]:0,ot=S[T]+tt-rt-it,st=S[T]+et-rt;if(l){var at=G(y?z(F,ot):F,j,y?H(q,st):q);S[T]=at,O[T]=at-j}if(f){var ut="x"===T?e:o,ct="x"===T?i:r,lt=S[k],ht=lt+w[ut],ft=lt-w[ct],dt=G(y?z(ht,ot):ht,lt,y?H(ft,st):ft);S[k]=dt,O[k]=dt-lt}}n.modifiersData[a]=O}},requiresIfExists:["offset"]};function It(t,e,n){void 0===n&&(n=!1);var i,r,o=N(e),s=N(e)&&function(t){var e=t.getBoundingClientRect(),n=e.width/t.offsetWidth||1,i=e.height/t.offsetHeight||1;return 1!==n||1!==i}(e),a=q(e),u=R(t,s),c={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(o||!o&&!n)&&(("body"!==k(e)||ut(a))&&(c=(i=e)!==S(i)&&N(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:st(i)),N(e)?((l=R(e,!0)).x+=e.clientLeft,l.y+=e.clientTop):a&&(l.x=at(a))),{x:u.left+c.scrollLeft-l.x,y:u.top+c.scrollTop-l.y,width:u.width,height:u.height}}function Tt(t){var e=new Map,n=new Set,i=[];function r(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&r(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||r(t)})),i}var kt={placement:"bottom",modifiers:[],strategy:"absolute"};function St(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function At(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,r=e.defaultOptions,o=void 0===r?kt:r;return function(t,e,n){void 0===n&&(n=o);var r,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},kt,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},u=[],c=!1,l={state:a,setOptions:function(n){h(),a.options=Object.assign({},o,a.options,n),a.scrollParents={reference:A(t)?lt(t):t.contextElement?lt(t.contextElement):[],popper:lt(e)};var r=function(t){var e=Tt(t);return T.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}(function(t){var e=t.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}([].concat(i,a.options.modifiers)));return a.orderedModifiers=r.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,r=t.effect;if("function"==typeof r){var o=r({state:a,name:e,instance:l,options:i}),s=function(){};u.push(o||s)}})),l.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(St(e,n)){a.rects={reference:It(e,W(n),"fixed"===a.options.strategy),popper:L(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var r=a.orderedModifiers[i],o=r.fn,s=r.options,u=void 0===s?{}:s,h=r.name;"function"==typeof o&&(a=o({state:a,options:u,name:h,instance:l})||a)}else a.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(t){l.forceUpdate(),t(a)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(r())}))}))),s}),destroy:function(){h(),c=!0}};if(!St(t,e))return l;function h(){u.forEach((function(t){return t()})),u=[]}return l.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),l}}var Nt=At(),Pt=At({defaultModifiers:[et,Et,J,O,wt,mt,Ct,X,bt]}),Ot=At({defaultModifiers:[et,Et,J,O]});
/*!
  * Bootstrap v5.1.0 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
const xt="transitionend",Dt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},Rt=t=>{const e=Dt(t);return e&&document.querySelector(e)?e:null},Lt=t=>{const e=Dt(t);return e?document.querySelector(e):null},Mt=t=>{t.dispatchEvent(new Event(xt))},jt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Ft=t=>jt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,qt=(t,e,n)=>{Object.keys(n).forEach((i=>{const r=n[i],o=e[i],s=o&&jt(o)?"element":null==(a=o)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(r).test(s))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${s}" but expected type "${r}".`)}))},Ut=t=>!(!jt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),Vt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled"))),Wt=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Wt(t.parentNode):null},Bt=()=>{},Ht=t=>{t.offsetHeight},zt=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Kt=[],Gt=()=>"rtl"===document.documentElement.dir,Yt=t=>{var e;e=()=>{const e=zt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Kt.length||document.addEventListener("DOMContentLoaded",(()=>{Kt.forEach((t=>t()))})),Kt.push(e)):e()},$t=t=>{"function"==typeof t&&t()},Xt=(t,e,n=!0)=>{if(!n)return void $t(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),r=Number.parseFloat(n);return i||r?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let r=!1;const o=({target:n})=>{n===e&&(r=!0,e.removeEventListener(xt,o),$t(t))};e.addEventListener(xt,o),setTimeout((()=>{r||Mt(e)}),i)},Qt=(t,e,n,i)=>{let r=t.indexOf(e);if(-1===r)return t[!n&&i?t.length-1:0];const o=t.length;return r+=n?1:-1,i&&(r=(r+o)%o),t[Math.max(0,Math.min(r,o-1))]},Zt=/[^.]*(?=\..*)\.|.*/,Jt=/\..*/,te=/::\d+$/,ee={};let ne=1;const ie={mouseenter:"mouseover",mouseleave:"mouseout"},re=/^(mouseenter|mouseleave)/i,oe=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function se(t,e){return e&&`${e}::${ne++}`||t.uidEvent||ne++}function ae(t){const e=se(t);return t.uidEvent=e,ee[e]=ee[e]||{},ee[e]}function ue(t,e,n=null){const i=Object.keys(t);for(let r=0,o=i.length;r<o;r++){const o=t[i[r]];if(o.originalHandler===e&&o.delegationSelector===n)return o}return null}function ce(t,e,n){const i="string"==typeof e,r=i?n:e;let o=fe(t);return oe.has(o)||(o=t),[i,r,o]}function le(t,e,n,i,r){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),re.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[o,s,a]=ce(e,n,i),u=ae(t),c=u[a]||(u[a]={}),l=ue(c,s,o?n:null);if(l)return void(l.oneOff=l.oneOff&&r);const h=se(s,e.replace(Zt,"")),f=o?function(t,e,n){return function i(r){const o=t.querySelectorAll(e);for(let{target:s}=r;s&&s!==this;s=s.parentNode)for(let a=o.length;a--;)if(o[a]===s)return r.delegateTarget=s,i.oneOff&&de.off(t,r.type,e,n),n.apply(s,[r]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&de.off(t,i.type,e),e.apply(t,[i])}}(t,n);f.delegationSelector=o?n:null,f.originalHandler=s,f.oneOff=r,f.uidEvent=h,c[h]=f,t.addEventListener(a,f,o)}function he(t,e,n,i,r){const o=ue(e[n],i,r);o&&(t.removeEventListener(n,o,Boolean(r)),delete e[n][o.uidEvent])}function fe(t){return t=t.replace(Jt,""),ie[t]||t}const de={on(t,e,n,i){le(t,e,n,i,!1)},one(t,e,n,i){le(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[r,o,s]=ce(e,n,i),a=s!==e,u=ae(t),c=e.startsWith(".");if(void 0!==o){if(!u||!u[s])return;return void he(t,u,s,o,r?n:null)}c&&Object.keys(u).forEach((n=>{!function(t,e,n,i){const r=e[n]||{};Object.keys(r).forEach((o=>{if(o.includes(i)){const i=r[o];he(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,u,n,e.slice(1))}));const l=u[s]||{};Object.keys(l).forEach((n=>{const i=n.replace(te,"");if(!a||e.includes(i)){const e=l[n];he(t,u,s,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=zt(),r=fe(e),o=e!==r,s=oe.has(r);let a,u=!0,c=!0,l=!1,h=null;return o&&i&&(a=i.Event(e,n),i(t).trigger(a),u=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),l=a.isDefaultPrevented()),s?(h=document.createEvent("HTMLEvents"),h.initEvent(r,u,!0)):h=new CustomEvent(e,{bubbles:u,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(h,t,{get:()=>n[t]})})),l&&h.preventDefault(),c&&t.dispatchEvent(h),h.defaultPrevented&&void 0!==a&&a.preventDefault(),h}},pe=new Map;var ve={set(t,e,n){pe.has(t)||pe.set(t,new Map);const i=pe.get(t);(i.has(e)||0===i.size)&&i.set(e,n)},get:(t,e)=>pe.has(t)&&pe.get(t).get(e)||null,remove(t,e){if(!pe.has(t))return;const n=pe.get(t);n.delete(e),0===n.size&&pe.delete(t)}};class ge{constructor(t){(t=Ft(t))&&(this._element=t,ve.set(this._element,this.constructor.DATA_KEY,this))}dispose(){ve.remove(this._element,this.constructor.DATA_KEY),de.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Xt(t,e,n)}static getInstance(t){return ve.get(Ft(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.1.0"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const me=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;de.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Vt(this))return;const r=Lt(this)||this.closest(`.${i}`);t.getOrCreateInstance(r)[e]()}))};class ye extends ge{static get NAME(){return"alert"}close(){if(de.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),de.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=ye.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me(ye,"close"),Yt(ye);const _e='[data-bs-toggle="button"]';class be extends ge{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function we(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function Ee(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}de.on(document,"click.bs.button.data-api",_e,(t=>{t.preventDefault();const e=t.target.closest(_e);be.getOrCreateInstance(e).toggle()})),Yt(be);const Ce={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${Ee(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${Ee(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=we(t.dataset[n])})),e},getDataAttribute:(t,e)=>we(t.getAttribute(`data-bs-${Ee(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},Ie={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(", ");return this.find(e,t).filter((t=>!Vt(t)&&Ut(t)))}},Te="carousel",ke={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Se={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Ae="next",Ne="prev",Pe="left",Oe="right",xe={ArrowLeft:Oe,ArrowRight:Pe},De="slid.bs.carousel",Re="active",Le=".active.carousel-item",Me="touch";class je extends ge{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=Ie.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return ke}static get NAME(){return Te}next(){this._slide(Ae)}nextWhenVisible(){!document.hidden&&Ut(this._element)&&this.next()}prev(){this._slide(Ne)}pause(t){t||(this._isPaused=!0),Ie.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Mt(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=Ie.findOne(Le,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void de.one(this._element,De,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Ae:Ne;this._slide(n,this._items[t])}_getConfig(t){return t={...ke,...Ce.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Te,t,Se),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?Oe:Pe)}_addEventListeners(){this._config.keyboard&&de.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(de.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),de.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>{!this._pointerEvent||"pen"!==t.pointerType&&t.pointerType!==Me?this._pointerEvent||(this.touchStartX=t.touches[0].clientX):this.touchStartX=t.clientX},e=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},n=t=>{!this._pointerEvent||"pen"!==t.pointerType&&t.pointerType!==Me||(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};Ie.find(".carousel-item img",this._element).forEach((t=>{de.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(de.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),de.on(this._element,"pointerup.bs.carousel",(t=>n(t))),this._element.classList.add("pointer-event")):(de.on(this._element,"touchstart.bs.carousel",(e=>t(e))),de.on(this._element,"touchmove.bs.carousel",(t=>e(t))),de.on(this._element,"touchend.bs.carousel",(t=>n(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=xe[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?Ie.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Ae;return Qt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(Ie.findOne(Le,this._element));return de.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=Ie.findOne(".active",this._indicatorsElement);e.classList.remove(Re),e.removeAttribute("aria-current");const n=Ie.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Re),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||Ie.findOne(Le,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=Ie.findOne(Le,this._element),r=this._getItemIndex(i),o=e||this._getItemByOrder(n,i),s=this._getItemIndex(o),a=Boolean(this._interval),u=n===Ae,c=u?"carousel-item-start":"carousel-item-end",l=u?"carousel-item-next":"carousel-item-prev",h=this._orderToDirection(n);if(o&&o.classList.contains(Re))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,h).defaultPrevented)return;if(!i||!o)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const f=()=>{de.trigger(this._element,De,{relatedTarget:o,direction:h,from:r,to:s})};if(this._element.classList.contains("slide")){o.classList.add(l),Ht(o),i.classList.add(c),o.classList.add(c);const t=()=>{o.classList.remove(c,l),o.classList.add(Re),i.classList.remove(Re,l,c),this._isSliding=!1,setTimeout(f,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Re),o.classList.add(Re),this._isSliding=!1,f();a&&this.cycle()}_directionToOrder(t){return[Oe,Pe].includes(t)?Gt()?t===Pe?Ne:Ae:t===Pe?Ae:Ne:t}_orderToDirection(t){return[Ae,Ne].includes(t)?Gt()?t===Ne?Pe:Oe:t===Ne?Oe:Pe:t}static carouselInterface(t,e){const n=je.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const r="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof r){if(void 0===n[r])throw new TypeError(`No method named "${r}"`);n[r]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){je.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=Lt(this);if(!e||!e.classList.contains("carousel"))return;const n={...Ce.getDataAttributes(e),...Ce.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),je.carouselInterface(e,n),i&&je.getInstance(e).to(i),t.preventDefault()}}de.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",je.dataApiClickHandler),de.on(window,"load.bs.carousel.data-api",(()=>{const t=Ie.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)je.carouselInterface(t[e],je.getInstance(t[e]))})),Yt(je);const Fe="collapse",qe="bs.collapse",Ue={toggle:!0,parent:null},Ve={toggle:"boolean",parent:"(null|element)"},We="show",Be="collapse",He="collapsing",ze="collapsed",Ke='[data-bs-toggle="collapse"]';class Ge extends ge{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const n=Ie.find(Ke);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=Rt(e),r=Ie.find(i).filter((t=>t===this._element));null!==i&&r.length&&(this._selector=i,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ue}static get NAME(){return Fe}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=Ie.find(".collapse .collapse",this._config.parent);e=Ie.find(".show, .collapsing",this._config.parent).filter((e=>!t.includes(e)))}const n=Ie.findOne(this._selector);if(e.length){const i=e.find((t=>n!==t));if(t=i?Ge.getInstance(i):null,t&&t._isTransitioning)return}if(de.trigger(this._element,"show.bs.collapse").defaultPrevented)return;e.forEach((e=>{n!==e&&Ge.getOrCreateInstance(e,{toggle:!1}).hide(),t||ve.set(e,qe,null)}));const i=this._getDimension();this._element.classList.remove(Be),this._element.classList.add(He),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const r=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(He),this._element.classList.add(Be,We),this._element.style[i]="",de.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[r]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(de.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Ht(this._element),this._element.classList.add(He),this._element.classList.remove(Be,We);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],n=Lt(e);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(He),this._element.classList.add(Be),de.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(We)}_getConfig(t){return(t={...Ue,...Ce.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=Ft(t.parent),qt(Fe,t,Ve),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=Ie.find(".collapse .collapse",this._config.parent);Ie.find(Ke,this._config.parent).filter((e=>!t.includes(e))).forEach((t=>{const e=Lt(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}))}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach((t=>{e?t.classList.remove(ze):t.classList.add(ze),t.setAttribute("aria-expanded",e)}))}static jQueryInterface(t){return this.each((function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const n=Ge.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}de.on(document,"click.bs.collapse.data-api",Ke,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=Rt(this);Ie.find(e).forEach((t=>{Ge.getOrCreateInstance(t,{toggle:!1}).toggle()}))})),Yt(Ge);const Ye="dropdown",$e="Escape",Xe="Space",Qe="ArrowUp",Ze="ArrowDown",Je=new RegExp("ArrowUp|ArrowDown|Escape"),tn="click.bs.dropdown.data-api",en="keydown.bs.dropdown.data-api",nn="show",rn='[data-bs-toggle="dropdown"]',on=".dropdown-menu",sn=Gt()?"top-end":"top-start",an=Gt()?"top-start":"top-end",un=Gt()?"bottom-end":"bottom-start",cn=Gt()?"bottom-start":"bottom-end",ln=Gt()?"left-start":"right-start",hn=Gt()?"right-start":"left-start",fn={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},dn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends ge{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return fn}static get DefaultType(){return dn}static get NAME(){return Ye}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Vt(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(de.trigger(this._element,"show.bs.dropdown",t).defaultPrevented)return;const e=pn.getParentFromElement(this._element);this._inNavbar?Ce.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>de.on(t,"mouseover",Bt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(nn),this._element.classList.add(nn),de.trigger(this._element,"shown.bs.dropdown",t)}hide(){if(Vt(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){de.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>de.off(t,"mouseover",Bt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(nn),this._element.classList.remove(nn),this._element.setAttribute("aria-expanded","false"),Ce.removeDataAttribute(this._menu,"popper"),de.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...Ce.getDataAttributes(this._element),...t},qt(Ye,t,this.constructor.DefaultType),"object"==typeof t.reference&&!jt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Ye.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(e){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let n=this._element;"parent"===this._config.reference?n=e:jt(this._config.reference)?n=Ft(this._config.reference):"object"==typeof this._config.reference&&(n=this._config.reference);const i=this._getPopperConfig(),r=i.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=Pt(n,this._menu,i),r&&Ce.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(nn)}_getMenuElement(){return Ie.next(this._element,on)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return ln;if(t.classList.contains("dropstart"))return hn;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?an:sn:e?cn:un}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=Ie.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Ut);n.length&&Qt(n,e,t===Ze,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=pn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=Ie.find(rn);for(let n=0,i=e.length;n<i;n++){const i=pn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const r={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(r.clickEvent=t)}i._completeHide(r)}}static getParentFromElement(t){return Lt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Xe||t.key!==$e&&(t.key!==Ze&&t.key!==Qe||t.target.closest(on)):!Je.test(t.key))return;const e=this.classList.contains(nn);if(!e&&t.key===$e)return;if(t.preventDefault(),t.stopPropagation(),Vt(this))return;const n=this.matches(rn)?this:Ie.prev(this,rn)[0],i=pn.getOrCreateInstance(n);if(t.key!==$e)return t.key===Qe||t.key===Ze?(e||i.show(),void i._selectMenuItem(t)):void(e&&t.key!==Xe||pn.clearMenus());i.hide()}}de.on(document,en,rn,pn.dataApiKeydownHandler),de.on(document,en,on,pn.dataApiKeydownHandler),de.on(document,tn,pn.clearMenus),de.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),de.on(document,tn,rn,(function(t){t.preventDefault(),pn.getOrCreateInstance(this).toggle()})),Yt(pn);const vn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",gn=".sticky-top";class mn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(vn,"paddingRight",(e=>e+t)),this._setElementAttributes(gn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const r=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(r))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(vn,"paddingRight"),this._resetElementAttributes(gn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&Ce.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=Ce.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(Ce.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){jt(t)?e(t):Ie.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const yn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},_n={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},bn="backdrop",wn="show",En="mousedown.bs.backdrop";class Cn{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&Ht(this._getElement()),this._getElement().classList.add(wn),this._emulateAnimation((()=>{$t(t)}))):$t(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(wn),this._emulateAnimation((()=>{this.dispose(),$t(t)}))):$t(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...yn,..."object"==typeof t?t:{}}).rootElement=Ft(t.rootElement),qt(bn,t,_n),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),de.on(this._getElement(),En,(()=>{$t(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(de.off(this._element,En),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Xt(t,this._getElement(),this._config.isAnimated)}}const In={trapElement:null,autofocus:!0},Tn={trapElement:"element",autofocus:"boolean"},kn=".bs.focustrap",Sn="backward";class An{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),de.off(document,kn),de.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),de.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,de.off(document,kn))}_handleFocusin(t){const{target:e}=t,{trapElement:n}=this._config;if(e===document||e===n||n.contains(e))return;const i=Ie.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===Sn?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Sn:"forward")}_getConfig(t){return t={...In,..."object"==typeof t?t:{}},qt("focustrap",t,Tn),t}}const Nn="modal",Pn=".bs.modal",On="Escape",xn={backdrop:!0,keyboard:!0,focus:!0},Dn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Rn="hidden.bs.modal",Ln="show.bs.modal",Mn="resize.bs.modal",jn="click.dismiss.bs.modal",Fn="keydown.dismiss.bs.modal",qn="mousedown.dismiss.bs.modal",Un="modal-open",Vn="show",Wn="modal-static";class Bn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=Ie.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new mn}static get Default(){return xn}static get NAME(){return Nn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown||this._isTransitioning)return;de.trigger(this._element,Ln,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Un),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),de.on(this._dialog,qn,(()=>{de.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;if(de.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Vn),de.off(this._element,jn),de.off(this._dialog,qn),this._queueCallback((()=>this._hideModal()),this._element,t)}dispose(){[window,this._dialog].forEach((t=>de.off(t,Pn))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Cn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new An({trapElement:this._element})}_getConfig(t){return t={...xn,...Ce.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Nn,t,Dn),t}_showElement(t){const e=this._isAnimated(),n=Ie.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&Ht(this._element),this._element.classList.add(Vn);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,de.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_setEscapeEvent(){this._isShown?de.on(this._element,Fn,(t=>{this._config.keyboard&&t.key===On?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==On||this._triggerBackdropTransition()})):de.off(this._element,Fn)}_setResizeEvent(){this._isShown?de.on(window,Mn,(()=>this._adjustDialog())):de.off(window,Mn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Un),this._resetAdjustments(),this._scrollBar.reset(),de.trigger(this._element,Rn)}))}_showBackdrop(t){de.on(this._element,jn,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(de.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(Wn)||(i||(n.overflowY="hidden"),t.add(Wn),this._queueCallback((()=>{t.remove(Wn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!Gt()||n&&!t&&Gt())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!Gt()||!n&&t&&Gt())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Bn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}de.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=Lt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),de.one(e,Ln,(t=>{t.defaultPrevented||de.one(e,Rn,(()=>{Ut(this)&&this.focus()}))}));Bn.getOrCreateInstance(e).toggle(this)})),me(Bn),Yt(Bn);const Hn="offcanvas",zn={backdrop:!0,keyboard:!0,scroll:!1},Kn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Gn="show",Yn=".offcanvas.show",$n="hidden.bs.offcanvas";class Xn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Hn}static get Default(){return zn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown)return;if(de.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented)return;this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new mn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Gn);this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),de.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0)}hide(){if(!this._isShown)return;if(de.trigger(this._element,"hide.bs.offcanvas").defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(Gn),this._backdrop.hide();this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new mn).reset(),de.trigger(this._element,$n)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...zn,...Ce.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Hn,t,Kn),t}_initializeBackDrop(){return new Cn({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new An({trapElement:this._element})}_addEventListeners(){de.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=Xn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}de.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=Lt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Vt(this))return;de.one(e,$n,(()=>{Ut(this)&&this.focus()}));const n=Ie.findOne(Yn);n&&n!==e&&Xn.getInstance(n).hide();Xn.getOrCreateInstance(e).toggle(this)})),de.on(window,"load.bs.offcanvas.data-api",(()=>Ie.find(Yn).forEach((t=>Xn.getOrCreateInstance(t).show())))),me(Xn),Yt(Xn);const Qn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Zn=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Jn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,ti=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Qn.has(n)||Boolean(Zn.test(t.nodeValue)||Jn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1},ei={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function ni(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),r=Object.keys(e),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!r.includes(i)){n.remove();continue}const s=[].concat(...n.attributes),a=[].concat(e["*"]||[],e[i]||[]);s.forEach((t=>{ti(t,a)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const ii="tooltip",ri=new Set(["sanitize","allowList","sanitizeFn"]),oi={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},si={AUTO:"auto",TOP:"top",RIGHT:Gt()?"left":"right",BOTTOM:"bottom",LEFT:Gt()?"right":"left"},ai={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:ei,popperConfig:null},ui={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},ci="fade",li="show",hi="show",fi="out",di=".modal",pi="hide.bs.modal",vi="hover",gi="focus";class mi extends ge{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(n),this.tip=null,this._setListeners()}static get Default(){return ai}static get NAME(){return ii}static get Event(){return ui}static get DefaultType(){return oi}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(li))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),de.off(this._element.closest(di),pi,this._hideModalHandler),this.tip&&this.tip.remove(),this._popper&&this._popper.destroy(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=de.trigger(this._element,this.constructor.Event.SHOW),e=Wt(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;const i=this.getTipElement(),r=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME);i.setAttribute("id",r),this._element.setAttribute("aria-describedby",r),this._config.animation&&i.classList.add(ci);const o="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,s=this._getAttachment(o);this._addAttachmentClass(s);const{container:a}=this._config;ve.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(i),de.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Pt(this._element,i,this._getPopperConfig(s)),i.classList.add(li);const u=this._resolvePossibleFunction(this._config.customClass);u&&i.classList.add(...u.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{de.on(t,"mouseover",Bt)}));const c=this.tip.classList.contains(ci);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,de.trigger(this._element,this.constructor.Event.SHOWN),t===fi&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const t=this.getTipElement();if(de.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(li),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>de.off(t,"mouseover",Bt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(ci);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==hi&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),de.trigger(this._element,this.constructor.Event.HIDDEN),this._popper&&(this._popper.destroy(),this._popper=null))}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(ci,li),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),".tooltip-inner")}_sanitizeAndSetContent(t,e,n){const i=Ie.findOne(n,t);e||!i?this.setElementContent(i,e):i.remove()}setElementContent(t,e){if(null!==t)return jt(e)?(e=Ft(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=ni(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return si[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)de.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===vi?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===vi?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;de.on(this._element,e,this._config.selector,(t=>this._enter(t))),de.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},de.on(this._element.closest(di),pi,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?gi:vi]=!0),e.getTipElement().classList.contains(li)||e._hoverState===hi?e._hoverState=hi:(clearTimeout(e._timeout),e._hoverState=hi,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===hi&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?gi:vi]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=fi,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===fi&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=Ce.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{ri.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:Ft(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),qt(ii,t,this.constructor.DefaultType),t.sanitize&&(t.template=ni(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=t.getAttribute("class").match(e);null!==n&&n.length>0&&n.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}static jQueryInterface(t){return this.each((function(){const e=mi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Yt(mi);const yi={...mi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},_i={...mi.DefaultType,content:"(string|element|function)"},bi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class wi extends mi{static get Default(){return yi}static get NAME(){return"popover"}static get Event(){return bi}static get DefaultType(){return _i}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(t){return this.each((function(){const e=wi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Yt(wi);const Ei="scrollspy",Ci=".bs.scrollspy",Ii={offset:10,method:"auto",target:""},Ti={offset:"number",method:"string",target:"(string|element)"},ki="dropdown-item",Si="active",Ai=".nav-link",Ni=".nav-link, .list-group-item, .dropdown-item",Pi="position";class Oi extends ge{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,de.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return Ii}static get NAME(){return Ei}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":Pi,e="auto"===this._config.method?t:this._config.method,n=e===Pi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();Ie.find(Ni,this._config.target).map((t=>{const i=Rt(t),r=i?Ie.findOne(i):null;if(r){const t=r.getBoundingClientRect();if(t.width||t.height)return[Ce[e](r).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){de.off(this._scrollElement,Ci),super.dispose()}_getConfig(t){return(t={...Ii,...Ce.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=Ft(t.target)||document.documentElement,qt(Ei,t,Ti),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;){this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}}_activate(t){this._activeTarget=t,this._clear();const e=Ni.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=Ie.findOne(e.join(","),this._config.target);n.classList.add(Si),n.classList.contains(ki)?Ie.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(Si):Ie.parents(n,".nav, .list-group").forEach((t=>{Ie.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(Si))),Ie.prev(t,".nav-item").forEach((t=>{Ie.children(t,Ai).forEach((t=>t.classList.add(Si)))}))})),de.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){Ie.find(Ni,this._config.target).filter((t=>t.classList.contains(Si))).forEach((t=>t.classList.remove(Si)))}static jQueryInterface(t){return this.each((function(){const e=Oi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}de.on(window,"load.bs.scrollspy.data-api",(()=>{Ie.find('[data-bs-spy="scroll"]').forEach((t=>new Oi(t)))})),Yt(Oi);const xi="active",Di="fade",Ri="show",Li=".active",Mi=":scope > li > .active";class ji extends ge{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(xi))return;let t;const e=Lt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Mi:Li;t=Ie.find(e,n),t=t[t.length-1]}const i=t?de.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(de.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const r=()=>{de.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),de.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,r):r()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?Ie.children(e,Li):Ie.find(Mi,e))[0],r=n&&i&&i.classList.contains(Di),o=()=>this._transitionComplete(t,i,n);i&&r?(i.classList.remove(Ri),this._queueCallback(o,t,!0)):o()}_transitionComplete(t,e,n){if(e){e.classList.remove(xi);const t=Ie.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(xi),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(xi),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Ht(t),t.classList.contains(Di)&&t.classList.add(Ri);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&Ie.find(".dropdown-toggle",e).forEach((t=>t.classList.add(xi))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=ji.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}de.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Vt(this))return;ji.getOrCreateInstance(this).show()})),Yt(ji);const Fi="toast",qi="hide",Ui="show",Vi="showing",Wi={animation:"boolean",autohide:"boolean",delay:"number"},Bi={animation:!0,autohide:!0,delay:5e3};class Hi extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Wi}static get Default(){return Bi}static get NAME(){return Fi}show(){if(de.trigger(this._element,"show.bs.toast").defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(qi),Ht(this._element),this._element.classList.add(Ui),this._element.classList.add(Vi),this._queueCallback((()=>{this._element.classList.remove(Vi),de.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this._element.classList.contains(Ui))return;if(de.trigger(this._element,"hide.bs.toast").defaultPrevented)return;this._element.classList.add(Vi),this._queueCallback((()=>{this._element.classList.add(qi),this._element.classList.remove(Vi),this._element.classList.remove(Ui),de.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this._element.classList.contains(Ui)&&this._element.classList.remove(Ui),super.dispose()}_getConfig(t){return t={...Bi,...Ce.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},qt(Fi,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){de.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),de.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),de.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),de.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me(Hi),Yt(Hi);var zi=n(99),Ki="8.9.1";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
zi.Z.registerVersion("firebase",Ki,"app"),zi.Z.SDK_VERSION=Ki,function(){var t,e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)};var i=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,t];for(var e=0;e<t.length;++e){var i=t[e];if(i&&i.Math==Math)return i}return globalThis}(this);function r(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function o(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:r(t)}}!function(t,n){if(n){var r=i;t=t.split(".");for(var o=0;o<t.length-1;o++){var s=t[o];s in r||(r[s]={}),r=r[s]}(n=n(o=r[t=t[t.length-1]]))!=o&&null!=n&&e(r,t,{configurable:!0,writable:!0,value:n})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function r(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var s=i.setTimeout;n.prototype.c=function(t){s(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(i){n||(n=!0,t.call(e,i))}}var e=this,n=!1;return{resolve:t(this.m),reject:t(this.g)}},e.prototype.m=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.s(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.v(t):this.h(t)}},e.prototype.v=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.u(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)a.b(this.a[t]);this.a=null}};var a=new n;return e.prototype.s=function(t){var e=this.f();t.Ra(e.resolve,e.reject)},e.prototype.u=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function i(t,e){return"function"==typeof t?function(e){try{r(t(e))}catch(t){o(t)}}:e}var r,o,s=new e((function(t,e){r=t,o=e}));return this.Ra(i(t,r),i(n,o)),s},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Ra=function(t,e){function n(){switch(i.b){case 1:t(i.c);break;case 2:e(i.c);break;default:throw Error("Unexpected state: "+i.b)}}var i=this;null==this.a?a.b(n):this.a.push(n)},e.resolve=r,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var i=o(t),s=i.next();!s.done;s=i.next())r(s.value).Ra(e,n)}))},e.all=function(t){var n=o(t),i=n.next();return i.done?r([]):new e((function(t,e){function o(e){return function(n){s[e]=n,0==--a&&t(s)}}var s=[],a=0;do{s.push(void 0),a++,r(i.value).Ra(o(s.length-1),e),i=n.next()}while(!i.done)}))},e}));var s=s||{},a=this||self,u=/^[\w+/_-]+[=]{0,2}$/,c=null;function l(t){return(t=t.querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&u.test(t)?t:""}function h(){}function f(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function d(t){var e=f(t);return"array"==e||"object"==e&&"number"==typeof t.length}function p(t){return"function"==f(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function g(t){return Object.prototype.hasOwnProperty.call(t,m)&&t[m]||(t[m]=++y)}var m="closure_uid_"+(1e9*Math.random()>>>0),y=0;function _(t,e,n){return t.call.apply(t.bind,arguments)}function b(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function w(t,e,n){return(w=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?_:b).apply(null,arguments)}function E(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var C=Date.now;function I(t,e){function n(){}n.prototype=e.prototype,t.bb=e.prototype,t.prototype=new n,t.prototype.constructor=t}function T(t){return t}function k(t,e,n){this.code=N+t,this.message=e||P[t]||"",this.a=n||null}function S(t){var e=t&&t.code;return e?new k(e.substring(N.length),t.message,t.serverResponse):null}I(k,Error),k.prototype.w=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},k.prototype.toJSON=function(){return this.w()};var A,N="auth/",P={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},O={ld:{Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},sd:{Ua:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://securetoken.googleapis.com/v1/token",Xa:"https://identitytoolkit.googleapis.com/v2/",id:"p"},ud:{Ua:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",$a:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},vd:{Ua:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",$a:"https://test-securetoken.sandbox.googleapis.com/v1/token",Xa:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function x(t){for(var e in O)if(O[e].id===t)return{firebaseEndpoint:(t=O[e]).Ua,secureTokenEndpoint:t.$a,identityPlatformEndpoint:t.Xa};return null}function D(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function R(t){if(Error.captureStackTrace)Error.captureStackTrace(this,R);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function L(t,e){for(var n="",i=(t=t.split("%s")).length-1,r=0;r<i;r++)n+=t[r]+(r<e.length?e[r]:"%s");R.call(this,n+t[i])}function M(t,e){throw new L("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function j(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function F(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function q(){this.b=this.a=null}A=x("__EID__")?"__EID__":void 0,I(R,Error),R.prototype.name="CustomError",I(L,R),L.prototype.name="AssertionError",j.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var U=new j((function(){return new W}),(function(t){t.reset()}));function V(){var t=be,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function W(){this.next=this.b=this.a=null}q.prototype.add=function(t,e){var n=U.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},W.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},W.prototype.reset=function(){this.next=this.b=this.a=null};var B=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},H=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var i=t.length,r="string"==typeof t?t.split(""):t,o=0;o<i;o++)o in r&&e.call(n,r[o],o,t)};var z=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,i=[],r=0,o="string"==typeof t?t.split(""):t,s=0;s<n;s++)if(s in o){var a=o[s];e.call(void 0,a,s,t)&&(i[r++]=a)}return i},K=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,i=Array(n),r="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in r&&(i[o]=e.call(void 0,r[o],o,t));return i},G=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,i="string"==typeof t?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t))return!0;return!1};function Y(t,e){return 0<=B(t,e)}function $(t,e){var n;return(n=0<=(e=B(t,e)))&&Array.prototype.splice.call(t,e,1),n}function X(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,i=t.length-1;0<=i;--i)i in n&&e.call(void 0,n[i],i,t)}(t,(function(n,i){e.call(void 0,n,i,t)&&1==Array.prototype.splice.call(t,i,1).length&&0}))}function Q(t){return Array.prototype.concat.apply([],arguments)}function Z(t){var e=t.length;if(0<e){for(var n=Array(e),i=0;i<e;i++)n[i]=t[i];return n}return[]}var J,tt=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},et=/&/g,nt=/</g,it=/>/g,rt=/"/g,ot=/'/g,st=/\x00/g,at=/[\x00&<>"']/;function ut(t,e){return-1!=t.indexOf(e)}function ct(t,e){return t<e?-1:t>e?1:0}t:{var lt=a.navigator;if(lt){var ht=lt.userAgent;if(ht){J=ht;break t}}J=""}function ft(t){return ut(J,t)}function dt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function pt(t){for(var e in t)return!1;return!0}function vt(t){var e,n={};for(e in t)n[e]=t[e];return n}var gt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function mt(t,e){for(var n,i,r=1;r<arguments.length;r++){for(n in i=arguments[r])t[n]=i[n];for(var o=0;o<gt.length;o++)n=gt[o],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function yt(t,e){t:{try{var n=t&&t.ownerDocument,i=n&&(n.defaultView||n.parentWindow);if((i=i||a).Element&&i.Location){var r=i;break t}}catch(t){}r=null}if(r&&void 0!==r[e]&&(!t||!(t instanceof r[e])&&(t instanceof r.Location||t instanceof r.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function _t(t,e){this.a=t===Ct&&e||"",this.b=Et}function bt(t){return t instanceof _t&&t.constructor===_t&&t.b===Et?t.a:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")}_t.prototype.ta=!0,_t.prototype.sa=function(){return this.a},_t.prototype.toString=function(){return"Const{"+this.a+"}"};var wt,Et={},Ct={};function It(){if(void 0===wt){var t=null,e=a.trustedTypes;if(e&&e.createPolicy){try{t=e.createPolicy("goog#html",{createHTML:T,createScript:T,createScriptURL:T})}catch(t){a.console&&a.console.error(t.message)}wt=t}else wt=t}return wt}function Tt(t,e){this.a=e===Pt?t:""}function kt(t){return t instanceof Tt&&t.constructor===Tt?t.a:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+f(t)),"type_error:TrustedResourceUrl")}function St(t,e){var n=bt(t);if(!Nt.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=It();return new Tt(t=e?e.createScriptURL(t):t,Pt)}(t=n.replace(At,(function(t,i){if(!Object.prototype.hasOwnProperty.call(e,i))throw Error('Found marker, "'+i+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[i])instanceof _t?bt(t):encodeURIComponent(String(t))})))}Tt.prototype.ta=!0,Tt.prototype.sa=function(){return this.a.toString()},Tt.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var At=/%{(\w+)}/g,Nt=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Pt={};function Ot(t,e){this.a=e===Ft?t:""}function xt(t){return t instanceof Ot&&t.constructor===Ot?t.a:(M("expected object of type SafeUrl, got '"+t+"' of type "+f(t)),"type_error:SafeUrl")}Ot.prototype.ta=!0,Ot.prototype.sa=function(){return this.a.toString()},Ot.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Dt=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Rt=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Lt=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Mt(t){if(t instanceof Ot)return t;if(t="object"==typeof t&&t.ta?t.sa():String(t),Lt.test(t))t=new Ot(t,Ft);else{var e=(t=(t=String(t)).replace(/(%0A|%0D)/g,"")).match(Rt);t=e&&Dt.test(e[1])?new Ot(t,Ft):null}return t}function jt(t){return t instanceof Ot?t:(t="object"==typeof t&&t.ta?t.sa():String(t),Lt.test(t)||(t="about:invalid#zClosurez"),new Ot(t,Ft))}var Ft={},qt=new Ot("about:invalid#zClosurez",Ft);function Ut(t,e,n){this.a=n===Vt?t:""}Ut.prototype.ta=!0,Ut.prototype.sa=function(){return this.a.toString()},Ut.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Vt={};function Wt(t,e,n,i){return t=t instanceof Ot?t:jt(t),e=e||a,n=n instanceof _t?bt(n):n||"",e.open(xt(t),n,i,void 0)}function Bt(t,e){for(var n=t.split("%s"),i="",r=Array.prototype.slice.call(arguments,1);r.length&&1<n.length;)i+=n.shift()+r.shift();return i+n.join("%s")}function Ht(t){return at.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(et,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(nt,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(it,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(rt,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(ot,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(st,"&#0;"))),t}function zt(t){return zt[" "](t),t}zt[" "]=h;var Kt,Gt,Yt=ft("Opera"),$t=ft("Trident")||ft("MSIE"),Xt=ft("Edge"),Qt=Xt||$t,Zt=ft("Gecko")&&!(ut(J.toLowerCase(),"webkit")&&!ft("Edge"))&&!(ft("Trident")||ft("MSIE"))&&!ft("Edge"),Jt=ut(J.toLowerCase(),"webkit")&&!ft("Edge");function te(){var t=a.document;return t?t.documentMode:void 0}t:{var ee="",ne=(Gt=J,Zt?/rv:([^\);]+)(\)|;)/.exec(Gt):Xt?/Edge\/([\d\.]+)/.exec(Gt):$t?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Gt):Jt?/WebKit\/(\S+)/.exec(Gt):Yt?/(?:Version)[ \/]?(\S+)/.exec(Gt):void 0);if(ne&&(ee=ne?ne[1]:""),$t){var ie=te();if(null!=ie&&ie>parseFloat(ee)){Kt=String(ie);break t}}Kt=ee}var re,oe={};function se(t){return function(t,e){var n=oe;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)}(t,(function(){for(var e=0,n=tt(String(Kt)).split("."),i=tt(String(t)).split("."),r=Math.max(n.length,i.length),o=0;0==e&&o<r;o++){var s=n[o]||"",a=i[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],0==s[0].length&&0==a[0].length)break;e=ct(0==s[1].length?0:parseInt(s[1],10),0==a[1].length?0:parseInt(a[1],10))||ct(0==s[2].length,0==a[2].length)||ct(s[2],a[2]),s=s[3],a=a[3]}while(0==e)}return 0<=e}))}if(a.document&&$t){var ae=te();re=ae||(parseInt(Kt,10)||void 0)}else re=void 0;var ue=re;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Gt){}var ce=!$t||9<=Number(ue);function le(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function he(t,e){dt(e,(function(e,n){e&&"object"==typeof e&&e.ta&&(e=e.sa()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:pe.hasOwnProperty(n)?t.setAttribute(pe[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var fe,de,pe={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ve(t,e,n){function i(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var r=2;r<n.length;r++){var o=n[r];if(!d(o)||v(o)&&0<o.nodeType)i(o);else{t:{if(o&&"number"==typeof o.length){if(v(o)){var s="function"==typeof o.item||"string"==typeof o.item;break t}if(p(o)){s="function"==typeof o.item;break t}}s=!1}H(s?Z(o):o,i)}}}function ge(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function me(t){a.setTimeout((function(){throw t}),0)}function ye(t,e){de||function(){if(a.Promise&&a.Promise.resolve){var t=a.Promise.resolve(void 0);de=function(){t.then(we)}}else de=function(){var t=we;!p(a.setImmediate)||a.Window&&a.Window.prototype&&!ft("Edge")&&a.Window.prototype.setImmediate==a.setImmediate?(fe||(fe=function(){var t=a.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!ft("Presto")&&(t=function(){var t=ge(document,"IFRAME");t.style.display="none",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.close();var n="callImmediate"+Math.random(),i="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=w((function(t){"*"!=i&&t.origin!=i||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,i)}}}),void 0!==t&&!ft("Trident")&&!ft("MSIE")){var e=new t,n={},i=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Hb;n.Hb=null,t()}},function(t){i.next={Hb:t},i=i.next,e.port2.postMessage(0)}}return function(t){a.setTimeout(t,0)}}()),fe(t)):a.setImmediate(t)}}(),_e||(de(),_e=!0),be.add(t,e)}var _e=!1,be=new q;function we(){for(var t;t=V();){try{t.a.call(t.b)}catch(t){me(t)}F(U,t)}_e=!1}function Ee(t,e){if(this.a=Ce,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=h)try{var n=this;t.call(e,(function(t){Me(n,Ie,t)}),(function(t){if(!(t instanceof Be))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Me(n,Te,t)}))}catch(t){Me(this,Te,t)}}var Ce=0,Ie=2,Te=3;function ke(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}ke.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Se=new j((function(){return new ke}),(function(t){t.reset()}));function Ae(t,e,n){var i=Se.get();return i.g=t,i.b=e,i.f=n,i}function Ne(t){if(t instanceof Ee)return t;var e=new Ee(h);return Me(e,Ie,t),e}function Pe(t){return new Ee((function(e,n){n(t)}))}function Oe(t,e,n){je(t,e,n,null)||ye(E(e,t))}function xe(t){return new Ee((function(e){var n=t.length,i=[];if(n)for(var r=function(t,r,o){n--,i[t]=r?{Qb:!0,value:o}:{Qb:!1,reason:o},0==n&&e(i)},o=0;o<t.length;o++)Oe(t[o],E(r,o,!0),E(r,o,!1));else e(i)}))}function De(t,e){if(t.a==Ce)if(t.c){var n=t.c;if(n.b){for(var i=0,r=null,o=null,s=n.b;s&&(s.c||(i++,s.a==t&&(r=s),!(r&&1<i)));s=s.next)r||(o=s);r&&(n.a==Ce&&1==i?De(n,e):(o?((i=o).next==n.f&&(n.f=i),i.next=i.next.next):qe(n),Ue(n,r,Te,e)))}t.c=null}else Me(t,Te,e)}function Re(t,e){t.b||t.a!=Ie&&t.a!=Te||Fe(t),t.f?t.f.next=e:t.b=e,t.f=e}function Le(t,e,n,i){var r=Ae(null,null,null);return r.a=new Ee((function(t,o){r.g=e?function(n){try{var r=e.call(i,n);t(r)}catch(t){o(t)}}:t,r.b=n?function(e){try{var r=n.call(i,e);void 0===r&&e instanceof Be?o(e):t(r)}catch(t){o(t)}}:o})),r.a.c=t,Re(t,r),r.a}function Me(t,e,n){t.a==Ce&&(t===n&&(e=Te,n=new TypeError("Promise cannot resolve to itself")),t.a=1,je(n,t.$c,t.ad,t)||(t.i=n,t.a=e,t.c=null,Fe(t),e!=Te||n instanceof Be||function(t,e){t.g=!0,ye((function(){t.g&&We.call(null,e)}))}(t,n)))}function je(t,e,n,i){if(t instanceof Ee)return Re(t,Ae(e||h,n||null,i)),!0;if(D(t))return t.then(e,n,i),!0;if(v(t))try{var r=t.then;if(p(r))return function(t,e,n,i,r){function o(t){a||(a=!0,i.call(r,t))}function s(t){a||(a=!0,n.call(r,t))}var a=!1;try{e.call(t,s,o)}catch(t){o(t)}}(t,r,e,n,i),!0}catch(t){return n.call(i,t),!0}return!1}function Fe(t){t.h||(t.h=!0,ye(t.gc,t))}function qe(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Ue(t,e,n,i){if(n==Te&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,Ve(e,n,i);else try{e.c?e.g.call(e.f):Ve(e,n,i)}catch(t){We.call(null,t)}F(Se,e)}function Ve(t,e,n){e==Ie?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}Ee.prototype.then=function(t,e,n){return Le(this,p(t)?t:null,p(e)?e:null,n)},Ee.prototype.$goog_Thenable=!0,(t=Ee.prototype).oa=function(t,e){return(t=Ae(t,t,e)).c=!0,Re(this,t),this},t.o=function(t,e){return Le(this,null,t,e)},t.cancel=function(t){if(this.a==Ce){var e=new Be(t);ye((function(){De(this,e)}),this)}},t.$c=function(t){this.a=Ce,Me(this,Ie,t)},t.ad=function(t){this.a=Ce,Me(this,Te,t)},t.gc=function(){for(var t;t=qe(this);)Ue(this,t,this.a,this.i);this.h=!1};var We=me;function Be(t){R.call(this,t)}function He(){0!=ze&&(Ke[g(this)]=this),this.ya=this.ya,this.pa=this.pa}I(Be,R),Be.prototype.name="cancel";var ze=0,Ke={};function Ge(t){if(!t.ya&&(t.ya=!0,t.Da(),0!=ze)){var e=g(t);if(0!=ze&&t.pa&&0<t.pa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Ke[e]}}He.prototype.ya=!1,He.prototype.Da=function(){if(this.pa)for(;this.pa.length;)this.pa.shift()()};var Ye=Object.freeze||function(t){return t},$e=!$t||9<=Number(ue),Xe=$t&&!se("9"),Qe=function(){if(!a.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{a.addEventListener("test",h,e),a.removeEventListener("test",h,e)}catch(t){}return t}();function Ze(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Je(t,e){if(Ze.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,i=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Zt){t:{try{zt(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,i?(this.clientX=void 0!==i.clientX?i.clientX:i.pageX,this.clientY=void 0!==i.clientY?i.clientY:i.pageY,this.screenX=i.screenX||0,this.screenY=i.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:tn[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}Ze.prototype.preventDefault=function(){this.defaultPrevented=!0},I(Je,Ze);var tn=Ye({2:"touch",3:"pen",4:"mouse"});Je.prototype.preventDefault=function(){Je.bb.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Xe)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Je.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),nn=0;function rn(t,e,n,i,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!i,this.Wa=r,this.key=++nn,this.wa=this.Qa=!1}function on(t){t.wa=!0,t.listener=null,t.proxy=null,t.src=null,t.Wa=null}function sn(t){this.src=t,this.a={},this.b=0}function an(t,e){var n=e.type;n in t.a&&$(t.a[n],e)&&(on(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function un(t,e,n,i){for(var r=0;r<t.length;++r){var o=t[r];if(!o.wa&&o.listener==e&&o.capture==!!n&&o.Wa==i)return r}return-1}sn.prototype.add=function(t,e,n,i,r){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var s=un(t,e,i,r);return-1<s?(e=t[s],n||(e.Qa=!1)):((e=new rn(e,this.src,o,!!i,r)).Qa=n,t.push(e)),e};var cn="closure_lm_"+(1e6*Math.random()|0),ln={};function hn(t,e,n,i,r){if(i&&i.once)dn(t,e,n,i,r);else if(Array.isArray(e))for(var o=0;o<e.length;o++)hn(t,e[o],n,i,r);else n=En(n),t&&t[en]?In(t,e,n,v(i)?!!i.capture:!!i,r):fn(t,e,n,!1,i,r)}function fn(t,e,n,i,r,o){if(!e)throw Error("Invalid event type");var s=v(r)?!!r.capture:!!r,a=bn(t);if(a||(t[cn]=a=new sn(t)),!(n=a.add(e,n,i,s,o)).proxy){if(i=function(){var t=_n,e=$e?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)Qe||(r=s),void 0===r&&(r=!1),t.addEventListener(e.toString(),i,r);else if(t.attachEvent)t.attachEvent(gn(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}0}}function dn(t,e,n,i,r){if(Array.isArray(e))for(var o=0;o<e.length;o++)dn(t,e[o],n,i,r);else n=En(n),t&&t[en]?Tn(t,e,n,v(i)?!!i.capture:!!i,r):fn(t,e,n,!0,i,r)}function pn(t,e,n,i,r){if(Array.isArray(e))for(var o=0;o<e.length;o++)pn(t,e[o],n,i,r);else i=v(i)?!!i.capture:!!i,n=En(n),t&&t[en]?(t=t.v,(e=String(e).toString())in t.a&&(-1<(n=un(o=t.a[e],n,i,r))&&(on(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--)))):t&&(t=bn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=un(e,n,i,r)),(n=-1<t?e[t]:null)&&vn(n))}function vn(t){if("number"!=typeof t&&t&&!t.wa){var e=t.src;if(e&&e[en])an(e.v,t);else{var n=t.type,i=t.proxy;e.removeEventListener?e.removeEventListener(n,i,t.capture):e.detachEvent?e.detachEvent(gn(n),i):e.addListener&&e.removeListener&&e.removeListener(i),(n=bn(e))?(an(n,t),0==n.b&&(n.src=null,e[cn]=null)):on(t)}}}function gn(t){return t in ln?ln[t]:ln[t]="on"+t}function mn(t,e,n,i){var r=!0;if((t=bn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.wa&&(o=yn(o,i),r=r&&!1!==o)}return r}function yn(t,e){var n=t.listener,i=t.Wa||t.src;return t.Qa&&vn(t),n.call(i,e)}function _n(t,e){if(t.wa)return!0;if(!$e){if(!e)t:{e=["window","event"];for(var n=a,i=0;i<e.length;i++)if(null==(n=n[e[i]])){e=null;break t}e=n}if(e=new Je(i=e,this),n=!0,!(0>i.keyCode||null!=i.returnValue)){t:{var r=!1;if(0==i.keyCode)try{i.keyCode=-1;break t}catch(t){r=!0}(r||null==i.returnValue)&&(i.returnValue=!0)}for(i=[],r=e.b;r;r=r.parentNode)i.push(r);for(t=t.type,r=i.length-1;0<=r;r--){e.b=i[r];var o=mn(i[r],t,!0,e);n=n&&o}for(r=0;r<i.length;r++)e.b=i[r],o=mn(i[r],t,!1,e),n=n&&o}return n}return yn(t,new Je(e,this))}function bn(t){return(t=t[cn])instanceof sn?t:null}var wn="__closure_events_fn_"+(1e9*Math.random()>>>0);function En(t){return p(t)?t:(t[wn]||(t[wn]=function(e){return t.handleEvent(e)}),t[wn])}function Cn(){He.call(this),this.v=new sn(this),this.bc=this,this.hb=null}function In(t,e,n,i,r){t.v.add(String(e),n,!1,i,r)}function Tn(t,e,n,i,r){t.v.add(String(e),n,!0,i,r)}function kn(t,e,n,i){if(!(e=t.v.a[String(e)]))return!0;e=e.concat();for(var r=!0,o=0;o<e.length;++o){var s=e[o];if(s&&!s.wa&&s.capture==n){var a=s.listener,u=s.Wa||s.src;s.Qa&&an(t.v,s),r=!1!==a.call(u,i)&&r}}return r&&!i.defaultPrevented}function Sn(t,e,n){if(p(t))n&&(t=w(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=w(t.handleEvent,t)}return 2147483647<Number(e)?-1:a.setTimeout(t,e||0)}function An(t){var e=null;return new Ee((function(n,i){-1==(e=Sn((function(){n(void 0)}),t))&&i(Error("Failed to schedule timer."))})).o((function(t){throw a.clearTimeout(e),t}))}function Nn(t){if(t.X&&"function"==typeof t.X)return t.X();if("string"==typeof t)return t.split("");if(d(t)){for(var e=[],n=t.length,i=0;i<n;i++)e.push(t[i]);return e}for(i in e=[],n=0,t)e[n++]=t[i];return e}function Pn(t){if(t.Y&&"function"==typeof t.Y)return t.Y();if(!t.X||"function"!=typeof t.X){if(d(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var i in e=[],n=0,t)e[n++]=i;return e}}function On(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var i=0;i<n;i+=2)this.set(arguments[i],arguments[i+1])}else if(t)if(t instanceof On)for(n=t.Y(),i=0;i<n.length;i++)this.set(n[i],t.get(n[i]));else for(i in t)this.set(i,t[i])}function xn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var i=t.a[e];Dn(t.b,i)&&(t.a[n++]=i),e++}t.a.length=n}if(t.c!=t.a.length){var r={};for(n=e=0;e<t.a.length;)Dn(r,i=t.a[e])||(t.a[n++]=i,r[i]=1),e++;t.a.length=n}}function Dn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}I(Cn,He),Cn.prototype[en]=!0,Cn.prototype.addEventListener=function(t,e,n,i){hn(this,t,e,n,i)},Cn.prototype.removeEventListener=function(t,e,n,i){pn(this,t,e,n,i)},Cn.prototype.dispatchEvent=function(t){var e,n=this.hb;if(n)for(e=[];n;n=n.hb)e.push(n);n=this.bc;var i=t.type||t;if("string"==typeof t)t=new Ze(t,n);else if(t instanceof Ze)t.target=t.target||n;else{var r=t;mt(t=new Ze(i,n),r)}if(r=!0,e)for(var o=e.length-1;0<=o;o--){var s=t.b=e[o];r=kn(s,i,!0,t)&&r}if(r=kn(s=t.b=n,i,!0,t)&&r,r=kn(s,i,!1,t)&&r,e)for(o=0;o<e.length;o++)r=kn(s=t.b=e[o],i,!1,t)&&r;return r},Cn.prototype.Da=function(){if(Cn.bb.Da.call(this),this.v){var t,e=this.v;for(t in e.a){for(var n=e.a[t],i=0;i<n.length;i++)on(n[i]);delete e.a[t],e.b--}}this.hb=null},(t=On.prototype).X=function(){xn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.Y=function(){return xn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Dn(this.b,t)?this.b[t]:e},t.set=function(t,e){Dn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.Y(),i=0;i<n.length;i++){var r=n[i],o=this.get(r);t.call(e,o,r,this)}};var Rn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Ln(t,e){var n;this.a=this.l=this.c="",this.g=null,this.h=this.f="",this.i=!1,t instanceof Ln?(this.i=void 0!==e?e:t.i,Mn(this,t.c),this.l=t.l,this.a=t.a,jn(this,t.g),this.f=t.f,Fn(this,ii(t.b)),this.h=t.h):t&&(n=String(t).match(Rn))?(this.i=!!e,Mn(this,n[1]||"",!0),this.l=Bn(n[2]||""),this.a=Bn(n[3]||"",!0),jn(this,n[4]),this.f=Bn(n[5]||"",!0),Fn(this,n[6]||"",!0),this.h=Bn(n[7]||"")):(this.i=!!e,this.b=new Qn(null,this.i))}function Mn(t,e,n){t.c=n?Bn(e,!0):e,t.c&&(t.c=t.c.replace(/:$/,""))}function jn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.g=e}else t.g=null}function Fn(t,e,n){e instanceof Qn?(t.b=e,function(t,e){e&&!t.f&&(Zn(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(ti(this,e),ni(this,n,t))}),t)),t.f=e}(t.b,t.i)):(n||(e=Hn(e,$n)),t.b=new Qn(e,t.i))}function qn(t,e,n){t.b.set(e,n)}function Un(t,e){return t.b.get(e)}function Vn(t){return t instanceof Ln?new Ln(t):new Ln(t,void 0)}function Wn(t,e,n,i){var r=new Ln(null,void 0);return t&&Mn(r,t),e&&(r.a=e),n&&jn(r,n),i&&(r.f=i),r}function Bn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Hn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,zn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function zn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Ln.prototype.toString=function(){var t=[],e=this.c;e&&t.push(Hn(e,Kn,!0),":");var n=this.a;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(Hn(e,Kn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&t.push(":",String(n))),(n=this.f)&&(this.a&&"/"!=n.charAt(0)&&t.push("/"),t.push(Hn(n,"/"==n.charAt(0)?Yn:Gn,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Hn(n,Xn)),t.join("")},Ln.prototype.resolve=function(t){var e=new Ln(this),n=!!t.c;n?Mn(e,t.c):n=!!t.l,n?e.l=t.l:n=!!t.a,n?e.a=t.a:n=null!=t.g;var i=t.f;if(n)jn(e,t.g);else if(n=!!t.f){if("/"!=i.charAt(0))if(this.a&&!this.f)i="/"+i;else{var r=e.f.lastIndexOf("/");-1!=r&&(i=e.f.substr(0,r+1)+i)}if(".."==(r=i)||"."==r)i="";else if(ut(r,"./")||ut(r,"/.")){i=0==r.lastIndexOf("/",0),r=r.split("/");for(var o=[],s=0;s<r.length;){var a=r[s++];"."==a?i&&s==r.length&&o.push(""):".."==a?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),i&&s==r.length&&o.push("")):(o.push(a),i=!0)}i=o.join("/")}else i=r}return n?e.f=i:n=""!==t.b.toString(),n?Fn(e,ii(t.b)):n=!!t.h,n&&(e.h=t.h),e};var Kn=/[#\/\?@]/g,Gn=/[#\?:]/g,Yn=/[#\?]/g,$n=/[#\?@]/g,Xn=/#/g;function Qn(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function Zn(t){t.a||(t.a=new On,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var i=t[n].indexOf("="),r=null;if(0<=i){var o=t[n].substring(0,i);r=t[n].substring(i+1)}else o=t[n];e(o,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Jn(t){var e=Pn(t);if(void 0===e)throw Error("Keys are undefined");var n=new Qn(null,void 0);t=Nn(t);for(var i=0;i<e.length;i++){var r=e[i],o=t[i];Array.isArray(o)?ni(n,r,o):n.add(r,o)}return n}function ti(t,e){Zn(t),e=ri(t,e),Dn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Dn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&xn(t)))}function ei(t,e){return Zn(t),e=ri(t,e),Dn(t.a.b,e)}function ni(t,e,n){ti(t,e),0<n.length&&(t.c=null,t.a.set(ri(t,e),Z(n)),t.b+=n.length)}function ii(t){var e=new Qn;return e.c=t.c,t.a&&(e.a=new On(t.a),e.b=t.b),e}function ri(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function oi(t){var e=[];return ai(new si,t,e),e.join("")}function si(){}function ai(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(Array.isArray(e)){var i=e;e=i.length,n.push("[");for(var r="",o=0;o<e;o++)n.push(r),ai(t,i[o],n),r=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){for(i in n.push("{"),r="",e)Object.prototype.hasOwnProperty.call(e,i)&&("function"!=typeof(o=e[i])&&(n.push(r),li(i,n),n.push(":"),ai(t,o,n),r=","));return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":li(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}}(t=Qn.prototype).add=function(t,e){Zn(this),this.c=null,t=ri(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){Zn(this),this.a.forEach((function(n,i){H(n,(function(n){t.call(e,n,i,this)}),this)}),this)},t.Y=function(){Zn(this);for(var t=this.a.X(),e=this.a.Y(),n=[],i=0;i<e.length;i++)for(var r=t[i],o=0;o<r.length;o++)n.push(e[i]);return n},t.X=function(t){Zn(this);var e=[];if("string"==typeof t)ei(this,t)&&(e=Q(e,this.a.get(ri(this,t))));else{t=this.a.X();for(var n=0;n<t.length;n++)e=Q(e,t[n])}return e},t.set=function(t,e){return Zn(this),this.c=null,ei(this,t=ri(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return t&&0<(t=this.X(t)).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.Y(),n=0;n<e.length;n++){var i=e[n],r=encodeURIComponent(String(i));i=this.X(i);for(var o=0;o<i.length;o++){var s=r;""!==i[o]&&(s+="="+encodeURIComponent(String(i[o]))),t.push(s)}}return this.c=t.join("&")};var ui={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},ci=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function li(t,e){e.push('"',t.replace(ci,(function(t){var e=ui[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ui[t]=e),e})),'"')}function hi(){var t=Oi();return $t&&!!ue&&11==ue||/Edge\/\d+/.test(t)}function fi(){return a.window&&a.window.location.href||self&&self.location&&self.location.href||""}function di(t,e){e=e||a.window;var n="about:blank";t&&(n=xt(Mt(t)||qt)),e.location.href=n}function pi(t,e){var n,i=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?i.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<pi(t[n],e[n]).length&&i.push(n):t[n]!==e[n]&&i.push(n):i.push(n);for(n in e)n in t||i.push(n);return i}function vi(t){return!!((t=(t||Oi()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function gi(t){t=t||a.window;try{t.close()}catch(t){}}function mi(t,e,n){var i=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var r=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(s in e={width:e,height:n,top:0<r?r:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Oi().toLowerCase(),i&&(e.target=i,ut(n,"crios/")&&(e.target="_blank")),Ai(Oi())==ki&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),i=window,e=n instanceof Ot?n:Mt(void 0!==n.href?n.href:String(n))||qt,n=t.target||n.target,r=[],t)switch(s){case"width":case"height":case"top":case"left":r.push(s+"="+t[s]);break;case"target":case"noopener":case"noreferrer":break;default:r.push(s+"="+(t[s]?1:0))}var s=r.join(",");if((ft("iPhone")&&!ft("iPod")&&!ft("iPad")||ft("iPad")||ft("iPod"))&&i.navigator&&i.navigator.standalone&&n&&"_self"!=n?(yt(s=ge(document,"A"),"HTMLAnchorElement"),e=e instanceof Ot?e:jt(e),s.href=xt(e),s.setAttribute("target",n),t.noreferrer&&s.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,i,1),s.dispatchEvent(t),s={}):t.noreferrer?(s=Wt("",i,n,s),t=xt(e),s&&(Qt&&ut(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),s.opener=null,t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ht(t)+'">',t=new Ut(t=(i=It())?i.createHTML(t):t,null,Vt),i=s.document)&&(i.write(function(t){return t instanceof Ut&&t.constructor===Ut?t.a:(M("expected object of type SafeHtml, got '"+t+"' of type "+f(t)),"type_error:SafeHtml")}(t)),i.close())):(s=Wt(e,i,n,s))&&t.noopener&&(s.opener=null),s)try{s.focus()}catch(t){}return s}var yi=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,_i=/^[^@]+@[^@]+$/;function bi(){var t=null;return new Ee((function(e){"complete"==a.document.readyState?e():(t=function(){e()},dn(window,"load",t))})).o((function(e){throw pn(window,"load",t),e}))}function wi(t){return t=t||Oi(),!("file:"!==Mi()&&"ionic:"!==Mi()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ei(){var t=a.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Ci(){return void 0!==a.WorkerGlobalScope&&"function"==typeof a.importScripts}function Ii(){return zi.Z.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":zi.Z.INTERNAL.hasOwnProperty("node")?"Node":Ci()?"Worker":"Browser"}function Ti(){var t=Ii();return"ReactNative"===t||"Node"===t}var ki="Firefox",Si="Chrome";function Ai(t){var e=t.toLowerCase();return ut(e,"opera/")||ut(e,"opr/")||ut(e,"opios/")?"Opera":ut(e,"iemobile")?"IEMobile":ut(e,"msie")||ut(e,"trident/")?"IE":ut(e,"edge/")?"Edge":ut(e,"firefox/")?ki:ut(e,"silk/")?"Silk":ut(e,"blackberry")?"Blackberry":ut(e,"webos")?"Webos":!ut(e,"safari/")||ut(e,"chrome/")||ut(e,"crios/")||ut(e,"android")?!ut(e,"chrome/")&&!ut(e,"crios/")||ut(e,"edge/")?ut(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":Si:"Safari"}var Ni={md:"FirebaseCore-web",od:"FirebaseUI-web"};function Pi(t,e){e=e||[];var n,i=[],r={};for(n in Ni)r[Ni[n]]=!0;for(n=0;n<e.length;n++)void 0!==r[e[n]]&&(delete r[e[n]],i.push(e[n]));return i.sort(),(e=i).length||(e=["FirebaseCore-web"]),"Browser"===(i=Ii())?i=Ai(r=Oi()):"Worker"===i&&(i=Ai(r=Oi())+"-"+i),i+"/JsCore/"+t+"/"+e.join(",")}function Oi(){return a.navigator&&a.navigator.userAgent||""}function xi(t,e){t=t.split("."),e=e||a;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Di(){try{var t=a.localStorage,e=Vi();if(t)return t.setItem(e,"1"),t.removeItem(e),!hi()||!!a.indexedDB}catch(t){return Ci()&&!!a.indexedDB}return!1}function Ri(){return(Li()||"chrome-extension:"===Mi()||wi())&&!Ti()&&Di()&&!Ci()}function Li(){return"http:"===Mi()||"https:"===Mi()}function Mi(){return a.location&&a.location.protocol||null}function ji(t){return!vi(t=t||Oi())&&Ai(t)!=ki}function Fi(t){return void 0===t?null:oi(t)}function qi(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Ui(t){if(null!==t)return JSON.parse(t)}function Vi(t){return t||Math.floor(1e9*Math.random()).toString()}function Wi(t){return"Safari"!=Ai(t=t||Oi())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Bi(){var t=a.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Hi(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Oi(),e=Ii(),this.b=vi(t)||"ReactNative"===e}function Ki(){var t=a.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Gi(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Yi(){return!(!xi("fireauth.oauthhelper",a)&&!xi("fireauth.iframe",a))}Hi.prototype.get=function(){var t=a.navigator;return!t||"boolean"!=typeof t.onLine||!Li()&&"chrome-extension:"!==Mi()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var $i,Xi={};function Qi(t){Xi[t]||(Xi[t]=!0,"undefined"!=typeof console&&console.warn)}try{var Zi={};Object.defineProperty(Zi,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Zi,"abcd",{configurable:!0,enumerable:!0,value:2}),$i=2==Zi.abcd}catch(Gt){$i=!1}function Ji(t,e,n){$i?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function tr(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Ji(t,n,e[n])}function er(t){var e={};return tr(e,t),e}function nr(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Ji(e,n,nr(t[n]));return e}function ir(t){var e=t&&(t[ur]?"phone":null);if(!(e&&t&&t[ar]))throw new k("internal-error","Internal assert: invalid MultiFactorInfo object");Ji(this,"uid",t[ar]),Ji(this,"displayName",t[or]||null);var n=null;t[sr]&&(n=new Date(t[sr]).toUTCString()),Ji(this,"enrollmentTime",n),Ji(this,"factorId",e)}function rr(t){try{var e=new cr(t)}catch(t){e=null}return e}ir.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var or="displayName",sr="enrolledAt",ar="mfaEnrollmentId",ur="phoneInfo";function cr(t){ir.call(this,t),Ji(this,"phoneNumber",t[ur])}function lr(t){var e={},n=t[pr],i=t[gr],r=t[mr];if(t=rr(t[vr]),!r||r!=fr&&r!=dr&&!n||r==dr&&!i||r==hr&&!t)throw Error("Invalid checkActionCode response!");r==dr?(e[_r]=n||null,e[wr]=n||null,e[yr]=i):(e[_r]=i||null,e[wr]=i||null,e[yr]=n||null),e[br]=t||null,Ji(this,Cr,r),Ji(this,Er,nr(e))}I(cr,ir),cr.prototype.w=function(){var t=cr.bb.w.call(this);return t.phoneNumber=this.phoneNumber,t};var hr="REVERT_SECOND_FACTOR_ADDITION",fr="EMAIL_SIGNIN",dr="VERIFY_AND_CHANGE_EMAIL",pr="email",vr="mfaInfo",gr="newEmail",mr="requestType",yr="email",_r="fromEmail",br="multiFactorInfo",wr="previousEmail",Er="data",Cr="operation";function Ir(t){var e=Un(t=Vn(t),Tr)||null,n=Un(t,kr)||null,i=Un(t,Nr)||null;if(i=i&&Or[i]||null,!e||!n||!i)throw new k("argument-error",Tr+", "+kr+"and "+Nr+" are required in a valid action code URL.");tr(this,{apiKey:e,operation:i,code:n,continueUrl:Un(t,Sr)||null,languageCode:Un(t,Ar)||null,tenantId:Un(t,Pr)||null})}var Tr="apiKey",kr="oobCode",Sr="continueUrl",Ar="languageCode",Nr="mode",Pr="tenantId",Or={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:hr,signIn:fr,verifyAndChangeEmail:dr,verifyEmail:"VERIFY_EMAIL"};function xr(t){try{return new Ir(t)}catch(t){return null}}function Dr(t){var e=t[Fr];if(void 0===e)throw new k("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new k("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Rr];if(n&&"object"==typeof n){e=n[Vr];var i=n[qr];if(n=n[Ur],"string"==typeof e&&e.length){if(this.a=e,void 0!==i&&"boolean"!=typeof i)throw new k("argument-error",qr+" property must be a boolean when specified.");if(this.g=!!i,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new k("argument-error",Ur+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new k("argument-error",Vr+" property must be a non empty string when specified.");if(void 0!==i||void 0!==n)throw new k("missing-android-pkg-name")}}else if(void 0!==n)throw new k("argument-error",Rr+" property must be a non null object when specified.");if(this.f=null,(e=t[jr])&&"object"==typeof e){if("string"==typeof(e=e[Wr])&&e.length)this.f=e;else if(void 0!==e)throw new k("argument-error",Wr+" property must be a non empty string when specified.")}else if(void 0!==e)throw new k("argument-error",jr+" property must be a non null object when specified.");if(void 0!==(e=t[Mr])&&"boolean"!=typeof e)throw new k("argument-error",Mr+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[Lr])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new k("argument-error",Lr+" property must be a non empty string when specified.");this.i=t||null}var Rr="android",Lr="dynamicLinkDomain",Mr="handleCodeInApp",jr="iOS",Fr="url",qr="installApp",Ur="minimumVersion",Vr="packageName",Wr="bundleId";function Br(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Hr=null;function zr(t){var e=[];return function(t,e){function n(e){for(;i<t.length;){var n=t.charAt(i++),r=Hr[n];if(null!=r)return r;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Hr){Hr={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var i=t.concat(e[n].split("")),r=0;r<i.length;r++){var o=i[r];void 0===Hr[o]&&(Hr[o]=r)}}}();for(var i=0;;){var r=n(-1),o=n(0),s=n(64),a=n(64);if(64===a&&-1===r)break;e(r<<2|o>>4),64!=s&&(e(o<<4&240|s>>2),64!=a&&e(s<<6&192|a))}}(t,(function(t){e.push(t)})),e}function Kr(t){var e=Yr(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.h=t,this.a=e.exp,this.i=e.sub,t=Date.now()/1e3,this.g=e.iat||(t>this.a?this.a:t),this.b=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.c=!!e.is_anonymous||"anonymous"==this.b}function Gr(t){try{return new Kr(t)}catch(t){return null}}function Yr(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{var i=zr(t);for(t=[],n=e=0;e<i.length;){var r=i[e++];if(128>r)t[n++]=String.fromCharCode(r);else if(191<r&&224>r){var o=i[e++];t[n++]=String.fromCharCode((31&r)<<6|63&o)}else if(239<r&&365>r){o=i[e++];var s=i[e++],a=((7&r)<<18|(63&o)<<12|(63&s)<<6|63&i[e++])-65536;t[n++]=String.fromCharCode(55296+(a>>10)),t[n++]=String.fromCharCode(56320+(1023&a))}else o=i[e++],s=i[e++],t[n++]=String.fromCharCode((15&r)<<12|(63&o)<<6|63&s)}return JSON.parse(t.join(""))}catch(t){}return null}Kr.prototype.T=function(){return this.f},Kr.prototype.l=function(){return this.c},Kr.prototype.toString=function(){return this.h};var $r="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Xr=["client_id","response_type","scope","redirect_uri","state"],Qr={nd:{Ja:"locale",va:700,ua:600,fa:"facebook.com",Ya:Xr},pd:{Ja:null,va:500,ua:750,fa:"github.com",Ya:Xr},qd:{Ja:"hl",va:515,ua:680,fa:"google.com",Ya:Xr},wd:{Ja:"lang",va:485,ua:705,fa:"twitter.com",Ya:$r},kd:{Ja:"locale",va:640,ua:600,fa:"apple.com",Ya:[]}};function Zr(t){for(var e in Qr)if(Qr[e].fa==t)return Qr[e];return null}function Jr(t){var e={};e["facebook.com"]=ro,e["google.com"]=so,e["github.com"]=oo,e["twitter.com"]=ao;var n=t&&t[eo];try{if(n)return e[n]?new e[n](t):new io(t);if(void 0!==t[to])return new no(t)}catch(t){}return null}var to="idToken",eo="providerId";function no(t){var e=t[eo];if(!e&&t[to]){var n=Gr(t[to]);n&&n.b&&(e=n.b)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Ji(this,"providerId",e),Ji(this,"isNewUser",n)}function io(t){no.call(this,t),Ji(this,"profile",nr((t=Ui(t.rawUserInfo||"{}"))||{}))}function ro(t){if(io.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function oo(t){if(io.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Ji(this,"username",this.profile&&this.profile.login||null)}function so(t){if(io.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function ao(t){if(io.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Ji(this,"username",t.screenName||null)}function uo(t){var e=Vn(t),n=Un(e,"link"),i=Un(Vn(n),"link");return e=Un(e,"deep_link_id"),Un(Vn(e),"link")||e||i||n||t}function co(t,e){if(!t&&!e)throw new k("internal-error","Internal assert: no raw session string available");if(t&&e)throw new k("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?lo:ho}I(io,no),I(ro,io),I(oo,io),I(so,io),I(ao,io);var lo="enroll",ho="signin";function fo(){}function po(t,e){return t.then((function(t){if(t[na]){var n=Gr(t[na]);if(!n||e!=n.i)throw new k("user-mismatch");return t}throw new k("user-mismatch")})).o((function(t){throw t&&t.code&&t.code==N+"user-not-found"?new k("user-mismatch"):t}))}function vo(t,e){if(!e)throw new k("internal-error","failed to construct a credential");this.a=e,Ji(this,"providerId",t),Ji(this,"signInMethod",t)}function go(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function mo(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new vo(t.providerId,t.pendingToken)}catch(t){}return null}function yo(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Ji(this,"idToken",e.idToken),e.accessToken&&Ji(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Ji(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new k("internal-error","failed to construct a credential");Ji(this,"accessToken",e.oauthToken),Ji(this,"secret",e.oauthTokenSecret)}Ji(this,"providerId",t),Ji(this,"signInMethod",n)}function _o(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Jn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function bo(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new yo(t.providerId,e,t.signInMethod)}catch(t){}}return null}function wo(t,e){this.Qc=e||[],tr(this,{providerId:t,isOAuthProvider:!0}),this.Jb={},this.qb=(Zr(t)||{}).Ja||null,this.pb=null}function Eo(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new k("argument-error",'SAML provider IDs must be prefixed with "saml."');wo.call(this,t,[])}function Co(t){wo.call(this,t,Xr),this.a=[]}function Io(){Co.call(this,"facebook.com")}function To(t){if(!t)throw new k("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new Io).credential({accessToken:e})}function ko(){Co.call(this,"github.com")}function So(t){if(!t)throw new k("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new ko).credential({accessToken:e})}function Ao(){Co.call(this,"google.com"),this.Ca("profile")}function No(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new Ao).credential({idToken:n,accessToken:e})}function Po(){wo.call(this,"twitter.com",$r)}function Oo(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new k("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new yo("twitter.com",n,"twitter.com")}function xo(t,e,n){this.a=t,this.f=e,Ji(this,"providerId","password"),Ji(this,"signInMethod",n===Ro.EMAIL_LINK_SIGN_IN_METHOD?Ro.EMAIL_LINK_SIGN_IN_METHOD:Ro.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Do(t){return t&&t.email&&t.password?new xo(t.email,t.password,t.signInMethod):null}function Ro(){tr(this,{providerId:"password",isOAuthProvider:!1})}function Lo(t,e){if(!(e=Mo(e)))throw new k("argument-error","Invalid email link!");return new xo(t,e.code,Ro.EMAIL_LINK_SIGN_IN_METHOD)}function Mo(t){return(t=xr(t=uo(t)))&&t.operation===fr?t:null}function jo(t){if(!(t.fb&&t.eb||t.La&&t.ea))throw new k("internal-error");this.a=t,Ji(this,"providerId","phone"),this.fa="phone",Ji(this,"signInMethod","phone")}function Fo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return H(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new jo(e)}return null}function qo(t){return t.a.La&&t.a.ea?{temporaryProof:t.a.La,phoneNumber:t.a.ea}:{sessionInfo:t.a.fb,code:t.a.eb}}function Uo(t){try{this.a=t||zi.Z.auth()}catch(t){throw new k("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}tr(this,{providerId:"phone",isOAuthProvider:!1})}function Vo(t,e){if(!t)throw new k("missing-verification-id");if(!e)throw new k("missing-verification-code");return new jo({fb:t,eb:e})}function Wo(t){if(t.temporaryProof&&t.phoneNumber)return new jo({La:t.temporaryProof,ea:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,i=t&&t.oauthTokenSecret,r=t&&t.nonce,o=t&&t.oauthIdToken,s=t&&t.pendingToken;try{switch(e){case"google.com":return No(o,n);case"facebook.com":return To(n);case"github.com":return So(n);case"twitter.com":return Oo(n,i);default:return n||i||o||s?s?0==e.indexOf("saml.")?new vo(e,s):new yo(e,{pendingToken:s,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new Co(e).credential({idToken:o,accessToken:n,rawNonce:r}):null}}catch(t){return null}}function Bo(t){if(!t.isOAuthProvider)throw new k("invalid-oauth-provider")}function Ho(t,e,n,i,r,o,s){if(this.c=t,this.b=e||null,this.g=n||null,this.f=i||null,this.i=o||null,this.h=s||null,this.a=r||null,!this.g&&!this.a)throw new k("invalid-auth-event");if(this.g&&this.a)throw new k("invalid-auth-event");if(this.g&&!this.f)throw new k("invalid-auth-event")}function zo(t){return(t=t||{}).type?new Ho(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&S(t.error),t.postBody,t.tenantId):null}function Ko(){this.b=null,this.a=[]}co.prototype.Ha=function(){return this.a?Ne(this.a):Ne(this.b)},co.prototype.w=function(){return this.type==lo?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},fo.prototype.ka=function(){},fo.prototype.b=function(){},fo.prototype.c=function(){},fo.prototype.w=function(){},vo.prototype.ka=function(t){return Ia(t,go(this))},vo.prototype.b=function(t,e){var n=go(this);return n.idToken=e,Ta(t,n)},vo.prototype.c=function(t,e){return po(ka(t,go(this)),e)},vo.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},yo.prototype.ka=function(t){return Ia(t,_o(this))},yo.prototype.b=function(t,e){var n=_o(this);return n.idToken=e,Ta(t,n)},yo.prototype.c=function(t,e){return po(ka(t,_o(this)),e)},yo.prototype.w=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},wo.prototype.Ka=function(t){return this.Jb=vt(t),this},I(Eo,wo),I(Co,wo),Co.prototype.Ca=function(t){return Y(this.a,t)||this.a.push(t),this},Co.prototype.Rb=function(){return Z(this.a)},Co.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new k("argument-error","credential failed: must provide the ID token and/or the access token.");return new yo(this.providerId,n,this.providerId)},I(Io,Co),Ji(Io,"PROVIDER_ID","facebook.com"),Ji(Io,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),I(ko,Co),Ji(ko,"PROVIDER_ID","github.com"),Ji(ko,"GITHUB_SIGN_IN_METHOD","github.com"),I(Ao,Co),Ji(Ao,"PROVIDER_ID","google.com"),Ji(Ao,"GOOGLE_SIGN_IN_METHOD","google.com"),I(Po,wo),Ji(Po,"PROVIDER_ID","twitter.com"),Ji(Po,"TWITTER_SIGN_IN_METHOD","twitter.com"),xo.prototype.ka=function(t){return this.signInMethod==Ro.EMAIL_LINK_SIGN_IN_METHOD?au(t,Ra,{email:this.a,oobCode:this.f}):au(t,nu,{email:this.a,password:this.f})},xo.prototype.b=function(t,e){return this.signInMethod==Ro.EMAIL_LINK_SIGN_IN_METHOD?au(t,La,{idToken:e,email:this.a,oobCode:this.f}):au(t,Ya,{idToken:e,email:this.a,password:this.f})},xo.prototype.c=function(t,e){return po(this.ka(t),e)},xo.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},tr(Ro,{PROVIDER_ID:"password"}),tr(Ro,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),tr(Ro,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),jo.prototype.ka=function(t){return t.gb(qo(this))},jo.prototype.b=function(t,e){var n=qo(this);return n.idToken=e,au(t,ru,n)},jo.prototype.c=function(t,e){var n=qo(this);return n.operation="REAUTH",po(t=au(t,ou,n),e)},jo.prototype.w=function(){var t={providerId:"phone"};return this.a.fb&&(t.verificationId=this.a.fb),this.a.eb&&(t.verificationCode=this.a.eb),this.a.La&&(t.temporaryProof=this.a.La),this.a.ea&&(t.phoneNumber=this.a.ea),t},Uo.prototype.gb=function(t,e){var n=this.a.a;return Ne(e.verify()).then((function(i){if("string"!=typeof i)throw new k("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var r=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(r&&r.type==lo?r.Ha().then((function(t){return function(t,e){return au(t,Xa,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:i}})})):r&&r.type==ho?r.Ha().then((function(e){return function(t,e){return au(t,Qa,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:i}})})):function(t,e){return au(t,Ka,e)}(n,{phoneNumber:o,recaptchaToken:i})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new k("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},tr(Uo,{PROVIDER_ID:"phone"}),tr(Uo,{PHONE_SIGN_IN_METHOD:"phone"}),Ho.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Ho.prototype.T=function(){return this.h},Ho.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var Go,Yo=null;function $o(t){var e="unauthorized-domain",n=void 0,i=Vn(t);t=i.a,"chrome-extension"==(i=i.c)?n=Bt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==i||"https"==i?n=Bt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",k.call(this,e,n)}function Xo(t,e,n){k.call(this,t,n),(t=e||{}).Kb&&Ji(this,"email",t.Kb),t.ea&&Ji(this,"phoneNumber",t.ea),t.credential&&Ji(this,"credential",t.credential),t.$b&&Ji(this,"tenantId",t.$b)}function Qo(t){if(t.code){var e=t.code||"";0==e.indexOf(N)&&(e=e.substring(N.length));var n={credential:Wo(t),$b:t.tenantId};if(t.email)n.Kb=t.email;else if(t.phoneNumber)n.ea=t.phoneNumber;else if(!n.credential)return new k(e,t.message||void 0);return new Xo(e,n,t.message)}return null}function Zo(){}function Jo(t){return t.c||(t.c=t.b())}function ts(){}function es(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var i=e[n];try{return new ActiveXObject(i),t.f=i}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function ns(){}function is(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=w(this.qc,this),this.a.onerror=w(this.Tb,this),this.a.onprogress=w(this.rc,this),this.a.ontimeout=w(this.vc,this)}function rs(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function os(t,e,n){this.reset(t,e,n,void 0,void 0)}I($o,k),I(Xo,k),Xo.prototype.w=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.w();return e&&mt(t,e),t},Xo.prototype.toJSON=function(){return this.w()},Zo.prototype.c=null,I(ts,Zo),ts.prototype.a=function(){var t=es(this);return t?new ActiveXObject(t):new XMLHttpRequest},ts.prototype.b=function(){var t={};return es(this)&&(t[0]=!0,t[1]=!0),t},Go=new ts,I(ns,Zo),ns.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new is;throw Error("Unsupported browser")},ns.prototype.b=function(){return{}},(t=is.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.qc=function(){this.status=200,this.response=this.responseText=this.a.responseText,rs(this,4)},t.Tb=function(){this.status=500,this.response=this.responseText="",rs(this,4)},t.vc=function(){this.Tb()},t.rc=function(){this.status=200,rs(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},os.prototype.a=null;function ss(t){this.f=t,this.b=this.c=this.a=null}function as(t,e){this.name=t,this.value=e}os.prototype.reset=function(t,e,n,i,r){"number"==typeof r||0,i||C(),delete this.a},as.prototype.toString=function(){return this.name};var us=new as("SEVERE",1e3),cs=new as("WARNING",900),ls=new as("CONFIG",700),hs=new as("FINE",500);function fs(t){return t.c?t.c:t.a?fs(t.a):(M("Root logger has no level set."),null)}ss.prototype.log=function(t,e,n){if(t.value>=fs(this).value)for(p(e)&&(e=e()),t=new os(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var ds={},ps=null;function vs(t){var e;if(ps||(ps=new ss(""),ds[""]=ps,ps.c=ls),!(e=ds[t])){e=new ss(t);var n=t.lastIndexOf("."),i=t.substr(n+1);(n=vs(t.substr(0,n))).b||(n.b={}),n.b[i]=e,e.a=n,ds[t]=e}return e}function gs(t,e){t&&t.log(hs,e,void 0)}function ms(t){this.f=t}function ys(t){Cn.call(this),this.u=t,this.h=void 0,this.readyState=_s,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.s="GET",this.f="",this.a=!1,this.i=vs("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}I(ms,Zo),ms.prototype.a=function(){return new ys(this.f)},ms.prototype.b=function(t){return function(){return t}}({}),I(ys,Cn);var _s=0;function bs(t){t.c.read().then(t.pc.bind(t)).catch(t.Va.bind(t))}function ws(t){t.readyState=4,t.g=null,t.c=null,t.m=null,Es(t)}function Es(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function Cs(t){Cn.call(this),this.headers=new On,this.D=t||null,this.c=!1,this.C=this.a=null,this.h=this.P=this.l="",this.f=this.N=this.i=this.J=!1,this.g=0,this.s=null,this.m=Is,this.u=this.S=!1}(t=ys.prototype).open=function(t,e){if(this.readyState!=_s)throw this.abort(),Error("Error reopening a connection");this.s=t,this.f=e,this.readyState=1,Es(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.l,method:this.s,credentials:this.h,cache:void 0};t&&(e.body=t),this.u.fetch(new Request(this.f,e)).then(this.uc.bind(this),this.Va.bind(this))},t.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ws(this)),this.readyState=_s},t.uc=function(t){this.a&&(this.g=t,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=t.headers,this.readyState=2,Es(this)),this.a&&(this.readyState=3,Es(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.sc.bind(this),this.Va.bind(this)):void 0!==a.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.m=new TextDecoder,bs(this)):t.text().then(this.tc.bind(this),this.Va.bind(this)))))},t.pc=function(t){if(this.a){var e=this.m.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?ws(this):Es(this),3==this.readyState&&bs(this)}},t.tc=function(t){this.a&&(this.response=this.responseText=t,ws(this))},t.sc=function(t){this.a&&(this.response=t,ws(this))},t.Va=function(t){var e=this.i;e&&e.log(cs,"Failed to fetch url "+this.f,t instanceof Error?t:Error(t)),this.a&&ws(this)},t.setRequestHeader=function(t,e){this.l.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.i)&&t.log(cs,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.i;return t&&t.log(cs,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(ys.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(t){this.h=t?"include":"same-origin"}}),I(Cs,Cn);var Is="";Cs.prototype.b=vs("goog.net.XhrIo");var Ts=/^https?$/i,ks=["POST","PUT"];function Ss(t,e,n,i,r){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.J=!1,t.c=!0,t.a=t.D?t.D.a():Go.a(),t.C=t.D?Jo(t.D):Jo(Go),t.a.onreadystatechange=w(t.Wb,t);try{gs(t.b,Ms(t,"Opening Xhr")),t.N=!0,t.a.open(n,String(e),!0),t.N=!1}catch(e){return gs(t.b,Ms(t,"Error opening Xhr: "+e.message)),void Ns(t,e)}e=i||"";var o=new On(t.headers);r&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(d(t)||"string"==typeof t)H(t,e,void 0);else for(var n=Pn(t),i=Nn(t),r=i.length,o=0;o<r;o++)e.call(void 0,i[o],n&&n[o],t)}(r,(function(t,e){o.set(e,t)})),r=function(t){t:{for(var e=As,n=t.length,i="string"==typeof t?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t)){e=r;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.Y()),i=a.FormData&&e instanceof a.FormData,!Y(ks,n)||r||i||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.S&&(t.a.withCredentials=t.S);try{Ds(t),0<t.g&&(t.u=function(t){return $t&&se(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),gs(t.b,Ms(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.u)),t.u?(t.a.timeout=t.g,t.a.ontimeout=w(t.Ma,t)):t.s=Sn(t.Ma,t.g,t)),gs(t.b,Ms(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){gs(t.b,Ms(t,"Send error: "+e.message)),Ns(t,e)}}function As(t){return"content-type"==t.toLowerCase()}function Ns(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Ps(t),xs(t)}function Ps(t){t.J||(t.J=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Os(t){if(t.c&&void 0!==s)if(t.C[1]&&4==Rs(t)&&2==Ls(t))gs(t.b,Ms(t,"Local request error detected and ignored"));else if(t.i&&4==Rs(t))Sn(t.Wb,0,t);else if(t.dispatchEvent("readystatechange"),4==Rs(t)){gs(t.b,Ms(t,"Request complete")),t.c=!1;try{var e,n=Ls(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break t;default:i=!1}if(!(e=i)){var r;if(r=0===n){var o=String(t.l).match(Rn)[1]||null;if(!o&&a.self&&a.self.location){var u=a.self.location.protocol;o=u.substr(0,u.length-1)}r=!Ts.test(o?o.toLowerCase():"")}e=r}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Rs(t)?t.a.statusText:""}catch(e){gs(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Ls(t)+"]",Ps(t)}}finally{xs(t)}}}function xs(t,e){if(t.a){Ds(t);var n=t.a,i=t.C[0]?h:null;t.a=null,t.C=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=i}catch(e){(t=t.b)&&t.log(us,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Ds(t){t.a&&t.u&&(t.a.ontimeout=null),t.s&&(a.clearTimeout(t.s),t.s=null)}function Rs(t){return t.a?t.a.readyState:0}function Ls(t){try{return 2<Rs(t)?t.a.status:-1}catch(t){return-1}}function Ms(t,e){return e+" ["+t.P+" "+t.l+" "+Ls(t)+"]"}function js(t){var e=Ys;this.g=[],this.u=e,this.s=t||null,this.f=this.a=!1,this.c=void 0,this.v=this.C=this.i=!1,this.h=0,this.b=null,this.l=0}function Fs(t,e,n){t.a=!0,t.c=n,t.f=!e,Ws(t)}function qs(t){if(t.a){if(!t.v)throw new Bs(t);t.v=!1}}function Us(t,e,n,i){t.g.push([e,n,i]),t.a&&Ws(t)}function Vs(t){return G(t.g,(function(t){return p(t[1])}))}function Ws(t){if(t.h&&t.a&&Vs(t)){var e=t.h,n=Ks[e];n&&(a.clearTimeout(n.a),delete Ks[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var i=n=!1;t.g.length&&!t.i;){var r=t.g.shift(),o=r[0],s=r[1];if(r=r[2],o=t.f?s:o)try{var u=o.call(r||t.s,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(D(e)||"function"==typeof a.Promise&&e instanceof a.Promise)&&(i=!0,t.i=!0)}catch(i){e=i,t.f=!0,Vs(t)||(n=!0)}}t.c=e,i&&(u=w(t.m,t,!0),i=w(t.m,t,!1),e instanceof js?(Us(e,u,i),e.C=!0):e.then(u,i)),n&&(e=new zs(e),Ks[e.a]=e,t.h=e.a)}function Bs(){R.call(this)}function Hs(){R.call(this)}function zs(t){this.a=a.setTimeout(w(this.c,this),0),this.b=t}(t=Cs.prototype).Ma=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",gs(this.b,Ms(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(gs(this.b,Ms(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),xs(this))},t.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),xs(this,!0)),Cs.bb.Da.call(this)},t.Wb=function(){this.ya||(this.N||this.i||this.f?Os(this):this.Jc())},t.Jc=function(){Os(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Is:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(us,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return gs(this.b,"Can not get response: "+t.message),null}},js.prototype.cancel=function(t){if(this.a)this.c instanceof js&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.u?this.u.call(this.s,this):this.v=!0,this.a||(t=new Hs(this),qs(this),Fs(this,!1,t))}},js.prototype.m=function(t,e){this.i=!1,Fs(this,t,e)},js.prototype.then=function(t,e,n){var i,r,o=new Ee((function(t,e){i=t,r=e}));return Us(this,i,(function(t){t instanceof Hs?o.cancel():r(t)})),o.then(t,e,n)},js.prototype.$goog_Thenable=!0,I(Bs,R),Bs.prototype.message="Deferred has already fired",Bs.prototype.name="AlreadyCalledError",I(Hs,R),Hs.prototype.message="Deferred was canceled",Hs.prototype.name="CanceledError",zs.prototype.c=function(){throw delete Ks[this.a],this.b};var Ks={};function Gs(t){var e={},n=e.document||document,i=kt(t).toString(),r=ge(document,"SCRIPT"),o={Xb:r,Ma:void 0},s=new js(o),u=null,h=null!=e.timeout?e.timeout:5e3;return 0<h&&(u=window.setTimeout((function(){$s(r,!0);var t=new Zs(Qs,"Timeout reached for loading script "+i);qs(s),Fs(s,!1,t)}),h),o.Ma=u),r.onload=r.onreadystatechange=function(){r.readyState&&"loaded"!=r.readyState&&"complete"!=r.readyState||($s(r,e.xd||!1,u),qs(s),Fs(s,!0,null))},r.onerror=function(){$s(r,!0,u);var t=new Zs(Xs,"Error while loading script "+i);qs(s),Fs(s,!1,t)},mt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),he(r,o),function(t,e){yt(t,"HTMLScriptElement"),t.src=kt(e),(e=t.ownerDocument&&t.ownerDocument.defaultView)&&e!=a?e=l(e.document):(null===c&&(c=l(a.document)),e=c),e&&t.setAttribute("nonce",e)}(r,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(r),s}function Ys(){if(this&&this.Xb){var t=this.Xb;t&&"SCRIPT"==t.tagName&&$s(t,!0,this.Ma)}}function $s(t,e,n){null!=n&&a.clearTimeout(n),t.onload=h,t.onerror=h,t.onreadystatechange=h,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var Xs=0,Qs=1;function Zs(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),R.call(this,n),this.code=t}function Js(t){this.f=t}function ta(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.m=t.secureTokenTimeout||ia,this.g=vt(t.secureTokenHeaders||ra),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.v=t.firebaseTimeout||oa,this.a=vt(t.firebaseHeaders||sa),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==Ii(),!(n=a.XMLHttpRequest||n&&zi.Z.INTERNAL.node&&zi.Z.INTERNAL.node.XMLHttpRequest)&&!Ci())throw new k("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Ci()?this.f=new ms(self):Ti()?this.f=new Js(n):this.f=new ns,this.b=null}I(Zs,R),I(Js,Zo),Js.prototype.a=function(){return new this.f},Js.prototype.b=function(){return{}};var ea,na="idToken",ia=new Hi(3e4,6e4),ra={"Content-Type":"application/x-www-form-urlencoded"},oa=new Hi(3e4,6e4),sa={"Content-Type":"application/json"};function aa(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function ua(t,e){e&&(t.l=ca("https://securetoken.googleapis.com/v1/token",e),t.h=ca("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",e),t.i=ca("https://identitytoolkit.googleapis.com/v2/",e))}function ca(t,e){return t=Vn(t),e=Vn(e.url),t.f=t.a+t.f,Mn(t,e.c),t.a=e.a,jn(t,e.g),t.toString()}function la(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function ha(t,e,n,i,r,o,s){(function(){var t=Oi();return!((t=Ai(t)!=Si?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||$t&&ue&&!(9<ue))})()||Ci()?t=w(t.u,t):(ea||(ea=new Ee((function(t,e){!function(t,e){if(((window.gapi||{}).client||{}).request)t();else{a[da]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){Us(t,null,e,void 0)}(Gs(St(fa,{onload:da})),(function(){e(Error("CORS_UNSUPPORTED"))}))}}(t,e)}))),t=w(t.s,t)),t(e,n,i,r,o,s)}ta.prototype.T=function(){return this.b},ta.prototype.u=function(t,e,n,i,r,o){if(Ci()&&(void 0===a.fetch||void 0===a.Headers||void 0===a.Request))throw new k("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new Cs(this.f);if(o){s.g=Math.max(0,o);var u=setTimeout((function(){s.dispatchEvent("timeout")}),o)}In(s,"complete",(function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return gs(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),Tn(s,"ready",(function(){u&&clearTimeout(u),Ge(this)})),Tn(s,"timeout",(function(){u&&clearTimeout(u),Ge(this),e&&e(null)})),Ss(s,t,n,i,r)};var fa=new _t(Ct,"https://apis.google.com/js/client.js?onload=%{onload}"),da="__fcb"+Math.floor(1e6*Math.random()).toString();function pa(t,e,n,i,r,o,s){var a=Vn(e+n);qn(a,"key",t.c),s&&qn(a,"cb",Date.now().toString());var u="GET"==i;if(u)for(var c in r)r.hasOwnProperty(c)&&qn(a,c,r[c]);return new Ee((function(e,n){ha(t,a.toString(),(function(t){t?t.error?n(cu(t,o||{})):e(t):n(new k("network-request-failed"))}),i,u?void 0:oi(qi(r)),t.a,t.v.get())}))}function va(t){if("string"!=typeof(t=t.email)||!_i.test(t))throw new k("invalid-email")}function ga(t){"email"in t&&va(t)}function ma(t){if(!t[na]){if(t.mfaPendingCredential)throw new k("multi-factor-auth-required",null,vt(t));throw new k("internal-error")}}function ya(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new k("internal-error")}else{if(!t.sessionInfo)throw new k("missing-verification-id");if(!t.code)throw new k("missing-verification-code")}}ta.prototype.s=function(t,e,n,i,r){var o=this;ea.then((function(){window.gapi.client.setApiKey(o.c);var s=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:i,headers:r,authType:"none",callback:function(t){window.gapi.auth.setToken(s),e&&e(t)}})})).o((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},ta.prototype.Ab=function(){return au(this,$a,{})},ta.prototype.Cb=function(t,e){return au(this,Ga,{idToken:t,email:e})},ta.prototype.Db=function(t,e){return au(this,Ya,{idToken:t,password:e})};var _a={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ba(t){if(!t.phoneVerificationInfo)throw new k("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new k("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new k("missing-verification-code")}function wa(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new k("internal-error")}function Ea(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&(ei(t=new Qn(t.postBody),"nonce")&&(e.nonce=t.get("nonce")))),e}function Ca(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Qo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Qo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Qo(t)):t.errorMessage&&(e=uu(t.errorMessage)),e)throw e;ma(t)}function Ia(t,e){return e.returnIdpCredential=!0,au(t,Za,e)}function Ta(t,e){return e.returnIdpCredential=!0,au(t,tu,e)}function ka(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,au(t,Ja,e)}function Sa(t){if(!t.oobCode)throw new k("invalid-action-code")}(t=ta.prototype).Eb=function(t,e){var n={idToken:t},i=[];return dt(_a,(function(t,r){var o=e[r];null===o?i.push(t):r in e&&(n[r]=o)})),i.length&&(n.deleteAttribute=i),au(this,Ga,n)},t.wb=function(t,e){return mt(t={requestType:"PASSWORD_RESET",email:t},e),au(this,Wa,t)},t.xb=function(t,e){return mt(t={requestType:"EMAIL_SIGNIN",email:t},e),au(this,qa,t)},t.vb=function(t,e){return mt(t={requestType:"VERIFY_EMAIL",idToken:t},e),au(this,Ua,t)},t.Fb=function(t,e,n){return mt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),au(this,Va,t)},t.gb=function(t){return au(this,iu,t)},t.ob=function(t,e){return au(this,za,{oobCode:t,newPassword:e})},t.Sa=function(t){return au(this,Na,{oobCode:t})},t.kb=function(t){return au(this,Aa,{oobCode:t})};var Aa={endpoint:"setAccountInfo",A:Sa,Z:"email",B:!0},Na={endpoint:"resetPassword",A:Sa,G:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new k("internal-error")},B:!0},Pa={endpoint:"signupNewUser",A:function(t){if(va(t),!t.password)throw new k("weak-password")},G:ma,V:!0,B:!0},Oa={endpoint:"createAuthUri",B:!0},xa={endpoint:"deleteAccount",O:["idToken"]},Da={endpoint:"setAccountInfo",O:["idToken","deleteProvider"],A:function(t){if(!Array.isArray(t.deleteProvider))throw new k("internal-error")}},Ra={endpoint:"emailLinkSignin",O:["email","oobCode"],A:va,G:ma,V:!0,B:!0},La={endpoint:"emailLinkSignin",O:["idToken","email","oobCode"],A:va,G:ma,V:!0},Ma={endpoint:"accounts/mfaEnrollment:finalize",O:["idToken","phoneVerificationInfo"],A:ba,G:ma,B:!0,Na:!0},ja={endpoint:"accounts/mfaSignIn:finalize",O:["mfaPendingCredential","phoneVerificationInfo"],A:ba,G:ma,B:!0,Na:!0},Fa={endpoint:"getAccountInfo"},qa={endpoint:"getOobConfirmationCode",O:["requestType"],A:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new k("internal-error");va(t)},Z:"email",B:!0},Ua={endpoint:"getOobConfirmationCode",O:["idToken","requestType"],A:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new k("internal-error")},Z:"email",B:!0},Va={endpoint:"getOobConfirmationCode",O:["idToken","newEmail","requestType"],A:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new k("internal-error")},Z:"email",B:!0},Wa={endpoint:"getOobConfirmationCode",O:["requestType"],A:function(t){if("PASSWORD_RESET"!=t.requestType)throw new k("internal-error");va(t)},Z:"email",B:!0},Ba={mb:!0,endpoint:"getProjectConfig",Vb:"GET"},Ha={mb:!0,endpoint:"getRecaptchaParam",Vb:"GET",G:function(t){if(!t.recaptchaSiteKey)throw new k("internal-error")}},za={endpoint:"resetPassword",A:Sa,Z:"email",B:!0},Ka={endpoint:"sendVerificationCode",O:["phoneNumber","recaptchaToken"],Z:"sessionInfo",B:!0},Ga={endpoint:"setAccountInfo",O:["idToken"],A:ga,V:!0},Ya={endpoint:"setAccountInfo",O:["idToken"],A:function(t){if(ga(t),!t.password)throw new k("weak-password")},G:ma,V:!0},$a={endpoint:"signupNewUser",G:ma,V:!0,B:!0},Xa={endpoint:"accounts/mfaEnrollment:start",O:["idToken","phoneEnrollmentInfo"],A:function(t){if(!t.phoneEnrollmentInfo)throw new k("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new k("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new k("missing-app-credential")},G:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new k("internal-error")},B:!0,Na:!0},Qa={endpoint:"accounts/mfaSignIn:start",O:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new k("missing-app-credential")},G:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new k("internal-error")},B:!0,Na:!0},Za={endpoint:"verifyAssertion",A:wa,Za:Ea,G:Ca,V:!0,B:!0},Ja={endpoint:"verifyAssertion",A:wa,Za:Ea,G:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new k("user-not-found");if(t.errorMessage)throw uu(t.errorMessage);ma(t)},V:!0,B:!0},tu={endpoint:"verifyAssertion",A:function(t){if(wa(t),!t.idToken)throw new k("internal-error")},Za:Ea,G:Ca,V:!0},eu={endpoint:"verifyCustomToken",A:function(t){if(!t.token)throw new k("invalid-custom-token")},G:ma,V:!0,B:!0},nu={endpoint:"verifyPassword",A:function(t){if(va(t),!t.password)throw new k("wrong-password")},G:ma,V:!0,B:!0},iu={endpoint:"verifyPhoneNumber",A:ya,G:ma,B:!0},ru={endpoint:"verifyPhoneNumber",A:function(t){if(!t.idToken)throw new k("internal-error");ya(t)},G:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Qo(t);ma(t)}},ou={Ib:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ya,G:ma,B:!0},su={endpoint:"accounts/mfaEnrollment:withdraw",O:["idToken","mfaEnrollmentId"],G:function(t){if(!!t[na]^!!t.refreshToken)throw new k("internal-error")},B:!0,Na:!0};function au(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var i=t[e[n]];if(null==i||""===i)return!1}return!0}(n,e.O))return Pe(new k("internal-error"));var i,r=!!e.Na,o=e.Vb||"POST";return Ne(n).then(e.A).then((function(){return e.V&&(n.returnSecureToken=!0),e.B&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),pa(t,r?t.i:t.h,e.endpoint,o,n,e.Ib,e.mb||!1)})).then((function(t){return i=t,e.Za?e.Za(n,i):i})).then(e.G).then((function(){if(!e.Z)return i;if(!(e.Z in i))throw new k("internal-error");return i[e.Z]}))}function uu(t){return cu({error:{errors:[{message:t}],code:400,message:t}})}function cu(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",i={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=i[n]?new k(i[n]):null)return n;for(var r in n=t.error&&t.error.message||"",mt(i={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,i)if(0===n.indexOf(r))return new k(i[r],e);return!e&&t&&(e=Fi(t)),new k("internal-error",e)}function lu(t){this.b=t,this.a=null,this.sb=function(t){return(pu||(pu=new Ee((function(t,e){function n(){Bi(),xi("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Bi(),e(Error("Network Error"))},timeout:fu.get()})}if(xi("gapi.iframes.Iframe"))t();else if(xi("gapi.load"))n();else{var i="__iframefcb"+Math.floor(1e6*Math.random()).toString();a[i]=function(){xi("gapi.load")?n():e(Error("Network Error"))},Ne(Gs(i=St(hu,{onload:i}))).o((function(){e(Error("Network Error"))}))}})).o((function(t){throw pu=null,t})))).then((function(){return new Ee((function(e,n){xi("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:xi("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(i){function r(){clearTimeout(o),e()}t.a=i,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),du.get());i.ping(r).then(r,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var hu=new _t(Ct,"https://apis.google.com/js/api.js?onload=%{onload}"),fu=new Hi(3e4,6e4),du=new Hi(5e3,15e3),pu=null;function vu(t,e,n,i){this.l=t,this.h=e,this.i=n,this.g=i,this.f=null,this.g?t=Wn((t=Vn(this.g.url)).c,t.a,t.g,"/emulator/auth/iframe"):t=Wn("https",this.l,null,"/__/auth/iframe"),this.a=t,qn(this.a,"apiKey",this.h),qn(this.a,"appName",this.i),this.b=null,this.c=[]}function gu(t,e,n,i,r,o){this.u=t,this.s=e,this.c=n,this.m=i,this.v=o,this.i=this.g=this.l=null,this.a=r,this.h=this.f=null}function mu(t){try{return zi.Z.app(t).auth().Ga()}catch(t){return[]}}function yu(t,e,n,i,r,o){this.s=t,this.g=e,this.b=n,this.f=o,this.c=i||null,this.i=r||null,this.l=this.u=this.C=null,this.h=[],this.m=this.a=null}function _u(t){var e=fi();return function(t){return au(t,Ba,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=Vn(e),i=n.c;n=n.a;for(var r=0;r<t.length;r++){var o=t[r],s=n,a=i;if(0==o.indexOf("chrome-extension://")?s=Vn(o).a==s&&"chrome-extension"==a:"http"!=a&&"https"!=a?s=!1:yi.test(o)?s=s==o:(o=o.split(".").join("\\."),s=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(s)),s){t=!0;break t}}t=!1}if(!t)throw new $o(fi())}))}function bu(t){return t.m||(t.m=bi().then((function(){if(!t.u){var e=t.c,n=t.i,i=mu(t.b),r=new vu(t.s,t.g,t.b,t.f);r.f=e,r.b=n,r.c=Z(i||[]),t.u=r.toString()}t.v=new lu(t.u),function(t){if(!t.v)throw Error("IfcHandler must be initialized!");!function(t,e){t.sb.then((function(){t.a.register("authEvent",e,xi("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.v,(function(e){var n={};if(e&&e.authEvent){var i=!1;for(e=zo(e.authEvent),n=0;n<t.h.length;n++)i=t.h[n](e)||i;return(n={}).status=i?"ACK":"ERROR",Ne(n)}return n.status="ERROR",Ne(n)}))}(t)}))),t.m}function wu(t){return t.l||(t.C=t.c?Pi(t.c,mu(t.b)):null,t.l=new ta(t.g,x(t.i),t.C),t.f&&ua(t.l,t.f)),t.l}function Eu(t,e,n,i,r,o,s,a,u,c,l,h){return(t=new gu(t,e,n,i,r,h)).l=o,t.g=s,t.i=a,t.b=vt(u||null),t.f=c,t.zb(l).toString()}function Cu(t){if(this.a=t||zi.Z.INTERNAL.reactNative&&zi.Z.INTERNAL.reactNative.AsyncStorage,!this.a)throw new k("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Iu(t){this.b=t,this.a={},this.f=w(this.c,this)}vu.prototype.toString=function(){return this.f?qn(this.a,"v",this.f):ti(this.a.b,"v"),this.b?qn(this.a,"eid",this.b):ti(this.a.b,"eid"),this.c.length?qn(this.a,"fw",this.c.join(",")):ti(this.a.b,"fw"),this.a.toString()},gu.prototype.zb=function(t){return this.h=t,this},gu.prototype.toString=function(){if(this.v){var t=Vn(this.v.url);t=Wn(t.c,t.a,t.g,"/emulator/auth/handler")}else t=Wn("https",this.u,null,"/__/auth/handler");if(qn(t,"apiKey",this.s),qn(t,"appName",this.c),qn(t,"authType",this.m),this.a.isOAuthProvider){var e=this.a;try{var n=zi.Z.app(this.c).auth().la()}catch(t){n=null}for(var i in e.pb=n,qn(t,"providerId",this.a.providerId),e=qi((n=this.a).Jb))e[i]=e[i].toString();i=n.Qc,e=vt(e);for(var r=0;r<i.length;r++){var o=i[r];o in e&&delete e[o]}n.qb&&n.pb&&!e[n.qb]&&(e[n.qb]=n.pb),pt(e)||qn(t,"customParameters",Fi(e))}if("function"==typeof this.a.Rb&&((n=this.a.Rb()).length&&qn(t,"scopes",n.join(","))),this.l?qn(t,"redirectUrl",this.l):ti(t.b,"redirectUrl"),this.g?qn(t,"eventId",this.g):ti(t.b,"eventId"),this.i?qn(t,"v",this.i):ti(t.b,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Un(t,s)&&qn(t,s,this.b[s]);return this.h?qn(t,"tid",this.h):ti(t.b,"tid"),this.f?qn(t,"eid",this.f):ti(t.b,"eid"),(s=mu(this.c)).length&&qn(t,"fw",s.join(",")),t.toString()},(t=yu.prototype).Pb=function(t,e,n){var i=new k("popup-closed-by-user"),r=new k("web-storage-unsupported"),o=this,s=!1;return this.ma().then((function(){(function(t){var e={type:"webStorageSupport"};return bu(t).then((function(){return function(t,e){return t.sb.then((function(){return new Ee((function(n){t.a.send(e.type,e,n,xi("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.v,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&gi(t),e(r),s=!0)}))})).o((function(){})).then((function(){if(!s)return function(t){return new Ee((function(e){return function n(){An(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!s)return An(n).then((function(){e(i)}))}))},t.Yb=function(){var t=Oi();return!ji(t)&&!Wi(t)},t.Ub=function(){return!1},t.Nb=function(t,e,n,i,r,o,s,a){if(!t)return Pe(new k("popup-blocked"));if(s&&!ji())return this.ma().o((function(e){gi(t),r(e)})),i(),Ne();this.a||(this.a=_u(wu(this)));var u=this;return this.a.then((function(){var e=u.ma().o((function(e){throw gi(t),r(e),e}));return i(),e})).then((function(){(Bo(n),s)||di(Eu(u.s,u.g,u.b,e,n,null,o,u.c,void 0,u.i,a,u.f),t)})).o((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},t.Ob=function(t,e,n,i){this.a||(this.a=_u(wu(this)));var r=this;return this.a.then((function(){Bo(e),di(Eu(r.s,r.g,r.b,t,e,fi(),n,r.c,void 0,r.i,i,r.f))})).o((function(t){throw"auth/network-request-failed"==t.code&&(r.a=null),t}))},t.ma=function(){var t=this;return bu(this).then((function(){return t.v.sb})).o((function(){throw t.a=null,new k("network-request-failed")}))},t.ac=function(){return!0},t.Ea=function(t){this.h.push(t)},t.Ta=function(t){X(this.h,(function(e){return e==t}))},(t=Cu.prototype).get=function(t){return Ne(this.a.getItem(t)).then((function(t){return t&&Ui(t)}))},t.set=function(t,e){return Ne(this.a.setItem(t,Fi(e)))},t.U=function(t){return Ne(this.a.removeItem(t))},t.ca=function(){},t.ia=function(){};var Tu,ku=[];function Su(t,e,n){pt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function Au(t){this.a=t}function Nu(t){this.c=t,this.b=!1,this.a=[]}function Pu(t,e,n,i){var r,o,s,a,u=n||{},c=null;if(t.b)return Pe(Error("connection_unavailable"));var l=i?800:50,h="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Ee((function(n,i){h?(r=Math.floor(Math.random()*Math.pow(10,20)).toString(),h.port1.start(),s=setTimeout((function(){i(Error("unsupported_event"))}),l),c={messageChannel:h,onMessage:o=function(t){t.data.eventId===r&&("ack"===t.data.status?(clearTimeout(s),a=setTimeout((function(){i(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(a),void 0!==t.data.response?n(t.data.response):i(Error("unknown_error"))):(clearTimeout(s),clearTimeout(a),i(Error("invalid_response"))))}},t.a.push(c),h.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:r,data:u},[h.port2])):i(Error("connection_unavailable"))})).then((function(e){return Ou(t,c),e})).o((function(e){throw Ou(t,c),e}))}function Ou(t,e){if(e){var n=e.messageChannel,i=e.onMessage;n&&(n.port1.removeEventListener("message",i),n.port1.close()),X(t.a,(function(t){return t==e}))}}function xu(){if(!Mu())throw new k("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.m=a.indexedDB,this.type="indexedDB",this.g=this.v=this.f=this.l=null,this.s=!1,this.h=null;var t=this;Ci()&&self?(this.v=function(){var t=Ci()?self:null;if(H(ku,(function(n){n.b==t&&(e=n)})),!e){var e=new Iu(t);ku.push(e)}return e}(),Su(this.v,"keyChanged",(function(e,n){return Vu(t).then((function(e){return 0<e.length&&H(t.a,(function(t){t(e)})),{keyProcessed:Y(e,n.key)}}))})),Su(this.v,"ping",(function(){return Ne(["keyChanged"])}))):function(){var t=a.navigator;return t&&t.serviceWorker?Ne().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).o((function(){return null})):Ne(null)}().then((function(e){(t.h=e)&&(t.g=new Nu(new Au(e)),Pu(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&Y(e[0].value,"keyChanged")&&(t.s=!0)})).o((function(){})))}))}function Du(t){return new Ee((function(e,n){var i=t.m.open("firebaseLocalStorageDb",1);i.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},i.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},i.onsuccess=function(i){(i=i.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(i):function(t){return new Ee((function(e,n){var i=t.m.deleteDatabase("firebaseLocalStorageDb");i.onsuccess=function(){e()},i.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return Du(t)})).then((function(t){e(t)})).o((function(t){n(t)}))}}))}function Ru(t){return t.i||(t.i=Du(t)),t.i}function Lu(t,e){var n=0;return new Ee((function i(r,o){Ru(t).then(e).then(r).o((function(e){if(!(3<++n))return Ru(t).then((function(e){return e.close(),t.i=void 0,i(r,o)})).o((function(t){o(t)}));o(e)}))}))}function Mu(){try{return!!a.indexedDB}catch(t){return!1}}function ju(t){return t.objectStore("firebaseLocalStorage")}function Fu(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function qu(t){return new Ee((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function Uu(t,e){return t.g&&t.h&&function(){var t=a.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?Pu(t.g,"keyChanged",{key:e},t.s).then((function(){})).o((function(){})):Ne()}function Vu(t){return Ru(t).then((function(t){var e=ju(Fu(t,!1));return e.getAll?qu(e.getAll()):new Ee((function(t,n){var i=[],r=e.openCursor();r.onsuccess=function(e){(e=e.target.result)?(i.push(e.value),e.continue()):t(i)},r.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},i=[];if(0==t.b){for(i=0;i<e.length;i++)n[e[i].fbase_key]=e[i].value;i=pi(t.c,n),t.c=n}return i}))}function Wu(t){t.l&&t.l.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Bu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Ne().then((function(){if(Mu()){var t=Vi(),i="__sak"+t;return Tu||(Tu=new xu),(n=Tu).set(i,t).then((function(){return n.get(i)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.U(i)})).then((function(){return n})).o((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ca((function(t){H(e.a,(function(e){e(t)}))})),t}))}function Hu(){this.a={},this.type="inMemory"}function zu(){if(!function(){var t="Node"==Ii();if(!(t=Ku()||t&&zi.Z.INTERNAL.node&&zi.Z.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Ii())throw new k("internal-error","The LocalStorage compatibility library was not found.");throw new k("web-storage-unsupported")}this.a=Ku()||zi.Z.INTERNAL.node.localStorage,this.type="localStorage"}function Ku(){try{var t=a.localStorage,e=Vi();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Gu(){this.type="nullStorage"}function Yu(){if(!function(){var t="Node"==Ii();if(!(t=$u()||t&&zi.Z.INTERNAL.node&&zi.Z.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Ii())throw new k("internal-error","The SessionStorage compatibility library was not found.");throw new k("web-storage-unsupported")}this.a=$u()||zi.Z.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function $u(){try{var t=a.sessionStorage,e=Vi();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Xu(){var t={};t.Browser=Ju,t.Node=tc,t.ReactNative=ec,t.Worker=nc,this.a=t[Ii()]}Iu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,i=this.a[e];if(i&&0<i.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var r=[];H(i,(function(e){r.push(Ne().then((function(){return e(t.origin,t.data.data)})))})),xe(r).then((function(i){var r=[];H(i,(function(t){r.push({fulfilled:t.Qb,value:t.value,reason:t.reason?t.reason.message:void 0})})),H(r,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:r})}))}},Au.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},Nu.prototype.close=function(){for(;0<this.a.length;)Ou(this,this.a[0]);this.b=!0},(t=xu.prototype).set=function(t,e){var n=this,i=!1;return Lu(this,(function(e){return qu((e=ju(Fu(e,!0))).get(t))})).then((function(r){return Lu(n,(function(o){if(o=ju(Fu(o,!0)),r)return r.value=e,qu(o.put(r));n.b++,i=!0;var s={};return s.fbase_key=t,s.value=e,qu(o.add(s))}))})).then((function(){return n.c[t]=e,Uu(n,t)})).oa((function(){i&&n.b--}))},t.get=function(t){return Lu(this,(function(e){return qu(ju(Fu(e,!1)).get(t))})).then((function(t){return t&&t.value}))},t.U=function(t){var e=this,n=!1;return Lu(this,(function(i){return n=!0,e.b++,qu(ju(Fu(i,!0)).delete(t))})).then((function(){return delete e.c[t],Uu(e,t)})).oa((function(){n&&e.b--}))},t.ca=function(t){0==this.a.length&&function(t){function e(){t.f=setTimeout((function(){t.l=Vu(t).then((function(e){0<e.length&&H(t.a,(function(t){t(e)}))})).then((function(){e()})).o((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}Wu(t),e()}(this),this.a.push(t)},t.ia=function(t){X(this.a,(function(e){return e==t})),0==this.a.length&&Wu(this)},(t=Bu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},t.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},t.U=function(t){return this.b.then((function(e){return e.U(t)}))},t.ca=function(t){this.a.push(t)},t.ia=function(t){X(this.a,(function(e){return e==t}))},(t=Hu.prototype).get=function(t){return Ne(this.a[t])},t.set=function(t,e){return this.a[t]=e,Ne()},t.U=function(t){return delete this.a[t],Ne()},t.ca=function(){},t.ia=function(){},(t=zu.prototype).get=function(t){var e=this;return Ne().then((function(){return Ui(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ne().then((function(){var i=Fi(e);null===i?n.U(t):n.a.setItem(t,i)}))},t.U=function(t){var e=this;return Ne().then((function(){e.a.removeItem(t)}))},t.ca=function(t){a.window&&hn(a.window,"storage",t)},t.ia=function(t){a.window&&pn(a.window,"storage",t)},(t=Gu.prototype).get=function(){return Ne(null)},t.set=function(){return Ne()},t.U=function(){return Ne()},t.ca=function(){},t.ia=function(){},(t=Yu.prototype).get=function(t){var e=this;return Ne().then((function(){return Ui(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Ne().then((function(){var i=Fi(e);null===i?n.U(t):n.a.setItem(t,i)}))},t.U=function(t){var e=this;return Ne().then((function(){e.a.removeItem(t)}))},t.ca=function(){},t.ia=function(){};var Qu,Zu,Ju={F:zu,cb:Yu},tc={F:zu,cb:Yu},ec={F:Cu,cb:Gu},nc={F:zu,cb:Gu},ic={rd:"local",NONE:"none",td:"session"};function rc(){var t=!(Wi(Oi())||!Ei()),e=ji(),n=Di();this.m=t,this.h=e,this.l=n,this.a={},Qu||(Qu=new Xu),t=Qu;try{this.g=!hi()&&Yi()||!a.indexedDB?new t.a.F:new Bu(Ci()?new Hu:new t.a.F)}catch(t){this.g=new Hu,this.h=!0}try{this.i=new t.a.cb}catch(t){this.i=new Hu}this.v=new Hu,this.f=w(this.Zb,this),this.b={}}function oc(){return Zu||(Zu=new rc),Zu}function sc(t,e){switch(e){case"session":return t.i;case"none":return t.v;default:return t.g}}function ac(t,e){return"firebase:"+t.name+(e?":"+e:"")}function uc(t,e,n){return n=ac(e,n),"local"==e.F&&(t.b[n]=null),sc(t,e.F).U(n)}function cc(t){t.c&&(clearInterval(t.c),t.c=null)}function lc(t){this.a=t,this.b=oc()}(t=rc.prototype).get=function(t,e){return sc(this,t.F).get(ac(t,e))},t.set=function(t,e,n){var i=ac(t,n),r=this,o=sc(this,t.F);return o.set(i,e).then((function(){return o.get(i)})).then((function(e){"local"==t.F&&(r.b[i]=e)}))},t.addListener=function(t,e,n){t=ac(t,e),this.l&&(this.b[t]=a.localStorage.getItem(t)),pt(this.a)&&(sc(this,"local").ca(this.f),this.h||(hi()||!Yi())&&a.indexedDB||!this.l||function(t){cc(t),t.c=setInterval((function(){for(var e in t.a){var n=a.localStorage.getItem(e),i=t.b[e];n!=i&&(t.b[e]=n,n=new Je({type:"storage",key:e,target:window,oldValue:i,newValue:n,a:!0}),t.Zb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=ac(t,e),this.a[t]&&(X(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),pt(this.a)&&(sc(this,"local").ia(this.f),cc(this))},t.Zb=function(t){if(t&&t.g){var e=t.a.key;if(null==e)for(var n in this.a){var i=this.b[n];void 0===i&&(i=null);var r=a.localStorage.getItem(n);r!==i&&(this.b[n]=r,this.nb(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?sc(this,"local").ia(this.f):cc(this),this.m)if(n=a.localStorage.getItem(e),(i=t.a.newValue)!==n)null!==i?a.localStorage.setItem(e,i):a.localStorage.removeItem(e);else if(this.b[e]===i&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===a.localStorage.getItem(e)||(o.b[e]=a.localStorage.getItem(e),o.nb(e))},$t&&ue&&10==ue&&a.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else H(t,w(this.nb,this))},t.nb=function(t){this.a[t]&&H(this.a[t],(function(t){t()}))};var hc,fc={name:"authEvent",F:"local"};function dc(){this.a=oc()}function pc(t,e){this.b=vc,this.f=a.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=a.Int32Array?new Int32Array(64):Array(64),void 0===hc&&(hc=a.Int32Array?new Int32Array(Ec):Ec),this.reset()}I(pc,(function(){this.b=-1}));for(var vc=64,gc=vc-1,mc=[],yc=0;yc<gc;yc++)mc[yc]=0;var _c=Q(128,mc);function bc(t){for(var e=t.f,n=t.l,i=0,r=0;r<e.length;)n[i++]=e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3],r=4*i;for(e=16;64>e;e++){r=0|n[e-15],i=0|n[e-2];var o=(0|n[e-16])+((r>>>7|r<<25)^(r>>>18|r<<14)^r>>>3)|0,s=(0|n[e-7])+((i>>>17|i<<15)^(i>>>19|i<<13)^i>>>10)|0;n[e]=o+s|0}i=0|t.a[0],r=0|t.a[1];var a=0|t.a[2],u=0|t.a[3],c=0|t.a[4],l=0|t.a[5],h=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10))+(i&r^i&a^r&a)|0;s=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((s=(s=c&l^~c&h)+(0|hc[e])|0)+(0|n[e])|0)|0,o=h,h=l,l=c,c=u+s|0,u=a,a=r,r=i,i=s+f|0}t.a[0]=t.a[0]+i|0,t.a[1]=t.a[1]+r|0,t.a[2]=t.a[2]+a|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+l|0,t.a[6]=t.a[6]+h|0,t.a[7]=t.a[7]+o|0}function wc(t,e,n){void 0===n&&(n=e.length);var i=0,r=t.c;if("string"==typeof e)for(;i<n;)t.f[r++]=e.charCodeAt(i++),r==t.b&&(bc(t),r=0);else{if(!d(e))throw Error("message must be string or array");for(;i<n;){var o=e[i++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[r++]=o,r==t.b&&(bc(t),r=0)}}t.c=r,t.g+=n}pc.prototype.reset=function(){this.g=this.c=0,this.a=a.Int32Array?new Int32Array(this.h):Z(this.h)};var Ec=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Cc(){pc.call(this,8,Ic)}I(Cc,pc);var Ic=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Tc(t,e,n,i,r,o){this.v=t,this.i=e,this.l=n,this.m=i||null,this.u=r||null,this.s=o,this.h=e+":"+n,this.C=new dc,this.g=new lc(this.h),this.f=null,this.b=[],this.a=this.c=null}function kc(t){return new k("invalid-cordova-configuration",t)}function Sc(t){var e=new Cc;wc(e,t),t=[];var n=8*e.g;56>e.c?wc(e,_c,56-e.c):wc(e,_c,e.b-(e.c-56));for(var i=63;56<=i;i--)e.f[i]=255&n,n/=256;for(bc(e),i=n=0;i<e.i;i++)for(var r=24;0<=r;r-=8)t[n++]=e.a[i]>>r&255;return function(t){return K(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}function Ac(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function Nc(t){return t.f||(t.f=t.ma().then((function(){return new Ee((function(e){t.Ea((function n(i){return e(i),t.Ta(n),!1})),function(t){function e(e){i=!0,r&&r.cancel(),Pc(t).then((function(i){var r=n;if(i&&e&&e.url){var o=null;-1!=(r=uo(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Ui(Un(o=Vn(r),"firebaseError")||null))?S(o):null)?new Ho(i.c,i.b,null,null,o,null,i.T()):new Ho(i.c,i.b,r,i.f,null,null,i.T())),r=o||n}Ac(t,r)}))}var n=new Ho("unknown",null,null,null,new k("no-auth-event")),i=!1,r=An(500).then((function(){return Pc(t).then((function(){i||Ac(t,n)}))})),o=a.handleOpenURL;a.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(xi("BuildInfo.packageName",a).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){}},Yo||(Yo=new Ko),function(t){var e=Yo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=xi("universalLinks.subscribe",a))&&t(null,e.b))}(e)}(t)}))}))),t.f}function Pc(t){var e=null;return function(t){return t.b.get(fc,t.a).then((function(t){return zo(t)}))}(t.g).then((function(n){return e=n,uc((n=t.g).b,fc,n.a)})).then((function(){return e}))}function Oc(t){this.a=t,this.b=oc()}(t=Tc.prototype).ma=function(){return this.Ia?this.Ia:this.Ia=(wi(void 0)?bi().then((function(){return new Ee((function(t,e){var n=a.document,i=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(i),t()}),!1)}))})):Pe(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof xi("universalLinks.subscribe",a))throw kc("cordova-universal-links-plugin-fix is not installed");if(void 0===xi("BuildInfo.packageName",a))throw kc("cordova-plugin-buildinfo is not installed");if("function"!=typeof xi("cordova.plugins.browsertab.openUrl",a))throw kc("cordova-plugin-browsertab is not installed");if("function"!=typeof xi("cordova.InAppBrowser.open",a))throw kc("cordova-plugin-inappbrowser is not installed")}),(function(){throw new k("cordova-not-ready")}))},t.Pb=function(t,e){return e(new k("operation-not-supported-in-this-environment")),Ne()},t.Nb=function(){return Pe(new k("operation-not-supported-in-this-environment"))},t.ac=function(){return!1},t.Yb=function(){return!0},t.Ub=function(){return!0},t.Ob=function(t,e,n,i){if(this.c)return Pe(new k("redirect-operation-pending"));var r=this,o=a.document,s=null,u=null,c=null,l=null;return this.c=Ne().then((function(){return Bo(e),Nc(r)})).then((function(){return function(t,e,n,i,r){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),s=new Ho(e,i,null,o,new k("no-auth-event"),null,r),u=xi("BuildInfo.packageName",a);if("string"!=typeof u)throw new k("invalid-cordova-configuration");var c=xi("BuildInfo.displayName",a),l={};if(Oi().toLowerCase().match(/iphone|ipad|ipod/))l.ibi=u;else{if(!Oi().toLowerCase().match(/android/))return Pe(new k("operation-not-supported-in-this-environment"));l.apn=u}c&&(l.appDisplayName=c),o=Sc(o),l.sessionId=o;var h=Eu(t.v,t.i,t.l,e,n,null,i,t.m,l,t.u,r,t.s);return t.ma().then((function(){var e=t.h;return t.C.a.set(fc,s.w(),e)})).then((function(){var e=xi("cordova.plugins.browsertab.isAvailable",a);if("function"!=typeof e)throw new k("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=xi("cordova.plugins.browsertab.openUrl",a)))throw new k("invalid-cordova-configuration");n(h)}else{if("function"!=typeof(n=xi("cordova.InAppBrowser.open",a)))throw new k("invalid-cordova-configuration");e=Oi(),t.a=n(h,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(r,t,e,n,i)})).then((function(){return new Ee((function(t,e){u=function(){var e=xi("cordova.plugins.browsertab.close",a);return t(),"function"==typeof e&&e(),r.a&&"function"==typeof r.a.close&&(r.a.close(),r.a=null),!1},r.Ea(u),c=function(){s||(s=An(2e3).then((function(){e(new k("redirect-cancelled-by-user"))})))},l=function(){Ki()&&c()},o.addEventListener("resume",c,!1),Oi().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",l,!1)})).o((function(t){return Pc(r).then((function(){throw t}))}))})).oa((function(){c&&o.removeEventListener("resume",c,!1),l&&o.removeEventListener("visibilitychange",l,!1),s&&s.cancel(),u&&r.Ta(u),r.c=null}))},t.Ea=function(t){this.b.push(t),Nc(this).o((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Ho("unknown",null,null,null,new k("no-auth-event")),t(e))}))},t.Ta=function(t){X(this.b,(function(e){return e==t}))};var xc={name:"pendingRedirect",F:"session"};function Dc(t){return uc(t.b,xc,t.a)}function Rc(t,e,n,i){this.i={},this.u=0,this.D=t,this.v=e,this.m=n,this.J=i,this.h=[],this.f=!1,this.l=w(this.s,this),this.b=new $c,this.C=new tl,this.g=new Oc(Gc(this.v,this.m)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.C,this.c.linkViaPopup=this.C,this.c.reauthViaPopup=this.C,this.a=Lc(this.D,this.v,this.m,A,this.J)}function Lc(t,e,n,i,r){var o=zi.Z.SDK_VERSION||null;return wi()?new Tc(t,e,n,o,i,r):new yu(t,e,n,o,i,r)}function Mc(t){t.f||(t.f=!0,t.a.Ea(t.l));var e=t.a;return t.a.ma().o((function(n){throw t.a==e&&t.reset(),n}))}function jc(t){t.a.Yb()&&Mc(t).o((function(e){var n=new Ho("unknown",null,null,null,new k("operation-not-supported-in-this-environment"));Bc(e)&&t.s(n)})),t.a.Ub()||Xc(t.b)}function Fc(t,e){Y(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(xc,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Dc(t.g).then((function(){Mc(t).o((function(e){var n=new Ho("unknown",null,null,null,new k("operation-not-supported-in-this-environment"));Bc(e)&&t.s(n)}))})):jc(t)})).o((function(){jc(t)}))}function qc(t,e){X(t.h,(function(t){return t==e}))}Rc.prototype.reset=function(){this.f=!1,this.a.Ta(this.l),this.a=Lc(this.D,this.v,this.m,null,this.J),this.i={}},Rc.prototype.s=function(t){if(!t)throw new k("invalid-auth-event");if(6e5<=Date.now()-this.u&&(this.i={},this.u=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var i=this.h[n];if(i.Gb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,i),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.u=Date.now())),e=!0;break}}return Xc(this.b),e};var Uc=new Hi(2e3,1e4),Vc=new Hi(3e4,6e4);function Wc(t,e,n,i,r,o,s){return t.a.Nb(e,n,i,(function(){t.f||(t.f=!0,t.a.Ea(t.l))}),(function(){t.reset()}),r,o,s)}function Bc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Hc(t,e,n,i,r){var o;return function(t){return t.b.set(xc,"pending",t.a)}(t.g).then((function(){return t.a.Ob(e,n,i,r).o((function(e){if(Bc(e))throw new k("operation-not-supported-in-this-environment");return o=e,Dc(t.g).then((function(){throw o}))})).then((function(){return t.a.ac()?new Ee((function(){})):Dc(t.g).then((function(){return t.ra()})).then((function(){})).o((function(){}))}))}))}function zc(t,e,n,i,r){return t.a.Pb(i,(function(t){e.na(n,null,t,r)}),Uc.get())}Rc.prototype.ra=function(){return this.b.ra()};var Kc={};function Gc(t,e,n){return t=t+":"+e,n&&(t=t+":"+n.url),t}function Yc(t,e,n,i){var r=Gc(e,n,i);return Kc[r]||(Kc[r]=new Rc(t,e,n,i)),Kc[r]}function $c(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Xc(t){t.g||(t.g=!0,Jc(t,!1,null,null))}function Qc(t){t.g&&!t.i&&Jc(t,!1,null,null)}function Zc(t,e){if(t.b=function(){return Ne(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Jc(t,e,n,i){e?i?function(t,e){if(t.b=function(){return Pe(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,i):Zc(t,n):Zc(t,{user:null}),t.f=[],t.c=[]}function tl(){}function el(){this.jb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.jb},set:function(t){this.jb=t},enumerable:!1})}function nl(t,e){this.a=e,Ji(this,"verificationId",t)}function il(t,e,n,i){return new Uo(t).gb(e,n).then((function(t){return new nl(t,i)}))}function rl(t){var e=Yr(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new k("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");tr(this,{token:t,expirationTime:Gi(1e3*e.exp),authTime:Gi(1e3*e.auth_time),issuedAtTime:Gi(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function ol(t,e,n){var i=e&&e[al];if(!i)throw new k("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=vt(e),this.g=n,this.c=new co(null,i),this.b=[];var r=this;H(e[sl]||[],(function(t){(t=rr(t))&&r.b.push(t)})),Ji(this,"auth",this.a),Ji(this,"session",this.c),Ji(this,"hints",this.b)}$c.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},$c.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,i=t.b,r=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!r&&!o),"unknown"!=n||r||o?t.a?(Jc(this,!0,null,t.a),Ne()):e.Fa(n,i)?function(t,e,n){n=n.Fa(e.c,e.b);var i=e.g,r=e.f,o=e.i,s=e.T(),a=!!e.c.match(/Redirect$/);n(i,r,s,o).then((function(e){Jc(t,a,e,null)})).o((function(e){Jc(t,a,null,e)}))}(this,t,e):Pe(new k("invalid-auth-event")):(Jc(this,!1,null,null),Ne())}else Pe(new k("invalid-auth-event"))},$c.prototype.ra=function(){var t=this;return new Ee((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new k("timeout");t.a&&t.a.cancel(),t.a=An(Vc.get()).then((function(){t.b||(t.g=!0,Jc(t,!0,null,e))}))}(t))}))},tl.prototype.h=function(t,e){if(t){var n=t.c,i=t.b;t.a?(e.na(t.c,null,t.a,t.b),Ne()):e.Fa(n,i)?function(t,e){var n=t.b,i=t.c;e.Fa(i,n)(t.g,t.f,t.T(),t.i).then((function(t){e.na(i,t,null,n)})).o((function(t){e.na(i,null,t,n)}))}(t,e):Pe(new k("invalid-auth-event"))}else Pe(new k("invalid-auth-event"))},nl.prototype.confirm=function(t){return t=Vo(this.verificationId,t),this.a(t)};var sl="mfaInfo",al="mfaPendingCredential";function ul(t,e,n,i){k.call(this,"multi-factor-auth-required",i,e),this.b=new ol(t,e,n),Ji(this,"resolver",this.b)}function cl(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new ul(e,t.serverResponse,n,t.message)}catch(t){}return null}function ll(){}function hl(t){Ji(this,"factorId",t.fa),this.a=t}function fl(t){if(hl.call(this,t),this.a.fa!=Uo.PROVIDER_ID)throw new k("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function dl(t,e){for(var n in Ze.call(this,t),e)this[n]=e[n]}function pl(t,e){this.a=t,this.b=[],this.c=w(this.yc,this),hn(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&H(e.multiFactor.enrolledFactors,(function(t){var e=null,i={};if(t){t.uid&&(i[ar]=t.uid),t.displayName&&(i[or]=t.displayName),t.enrollmentTime&&(i[sr]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(i[ur]=t.phoneNumber);try{e=new cr(i)}catch(t){}t=e}else t=null;t&&n.push(t)})),vl(this,n)}function vl(t,e){t.b=e,Ji(t,"enrolledFactors",e)}function gl(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function ml(t,e){t.stop(),t.b=An(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(t,e)).then((function(){return function(){var t=a.document,e=null;return Ki()||!t?Ne():new Ee((function(n){e=function(){Ki()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).o((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return t.h()})).then((function(){ml(t,!0)})).o((function(e){t.i(e)&&ml(t,!1)}))}function yl(t){this.f=t,this.b=this.a=null,this.c=Date.now()}function _l(t,e){void 0===e&&(t.b?e=(e=t.b).a-e.g:e=0),t.c=Date.now()+1e3*e}function bl(t,e){t.b=Gr(e[na]||""),t.a=e.refreshToken,_l(t,void 0!==(e=e.expiresIn)?Number(e):void 0)}function wl(t,e){return function(t,e){return new Ee((function(n,i){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?ha(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?i(cu(t)):t.access_token&&t.refresh_token?n(t):i(new k("internal-error")):i(new k("network-request-failed"))}),"POST",Jn(e).toString(),t.g,t.m.get()):i(new k("internal-error"))}))}(t.f,e).then((function(e){return t.b=Gr(e.access_token),t.a=e.refresh_token,_l(t,e.expires_in),{accessToken:t.b.toString(),refreshToken:t.a}})).o((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}function El(t,e){this.a=t||null,this.b=e||null,tr(this,{lastSignInTime:Gi(e||null),creationTime:Gi(t||null)})}function Cl(t,e,n,i,r,o){tr(this,{uid:t,displayName:i||null,photoURL:r||null,email:n||null,phoneNumber:o||null,providerId:e})}function Il(t,e,n){this.N=[],this.l=t.apiKey,this.m=t.appName,this.s=t.authDomain||null;var i=zi.Z.SDK_VERSION?Pi(zi.Z.SDK_VERSION):null;this.a=new ta(this.l,x(A),i),(this.u=t.emulatorConfig||null)&&ua(this.a,this.u),this.h=new yl(this.a),Dl(this,e[na]),bl(this.h,e),Ji(this,"refreshToken",this.h.a),Ml(this,n||{}),Cn.call(this),this.P=!1,this.s&&Ri()&&(this.b=Yc(this.s,this.l,this.m,this.u)),this.W=[],this.i=null,this.D=function(t){return new gl((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=t.h.c-Date.now()-3e5;return 0<e?e:0}))}(this),this.ba=w(this.ib,this);var r=this;this.za=null,this.Pa=function(t){r.xa(t.h)},this.qa=null,this.Ba=function(t){Tl(r,t.c)},this.$=null,this.aa=[],this.Oa=function(t){Al(r,t.f)},this.ja=null,this.S=new pl(this,n),Ji(this,"multiFactor",this.S)}function Tl(t,e){t.u=e,ua(t.a,e),t.b&&(e=t.b,t.b=Yc(t.s,t.l,t.m,t.u),t.P&&(qc(e,t),Fc(t.b,t)))}function kl(t,e){t.qa&&pn(t.qa,"languageCodeChanged",t.Pa),(t.qa=e)&&hn(e,"languageCodeChanged",t.Pa)}function Sl(t,e){t.$&&pn(t.$,"emulatorConfigChanged",t.Ba),(t.$=e)&&hn(e,"emulatorConfigChanged",t.Ba)}function Al(t,e){t.aa=e,la(t.a,zi.Z.SDK_VERSION?Pi(zi.Z.SDK_VERSION,t.aa):null)}function Nl(t,e){t.ja&&pn(t.ja,"frameworkChanged",t.Oa),(t.ja=e)&&hn(e,"frameworkChanged",t.Oa)}function Pl(t){try{return zi.Z.app(t.m).auth()}catch(e){throw new k("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function Ol(t){t.J||t.D.b||(t.D.start(),pn(t,"tokenChanged",t.ba),hn(t,"tokenChanged",t.ba))}function xl(t){pn(t,"tokenChanged",t.ba),t.D.stop()}function Dl(t,e){t.Aa=e,Ji(t,"_lat",e)}function Rl(t){for(var e=[],n=0;n<t.W.length;n++)e.push(t.W[n](t));return xe(e).then((function(){return t}))}function Ll(t){t.b&&!t.P&&(t.P=!0,Fc(t.b,t))}function Ml(t,e){tr(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new El(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function jl(){}function Fl(t){return Ne().then((function(){if(t.J)throw new k("app-deleted")}))}function ql(t){return K(t.providerData,(function(t){return t.providerId}))}function Ul(t,e){e&&(Vl(t,e.providerId),t.providerData.push(e))}function Vl(t,e){X(t.providerData,(function(t){return t.providerId==e}))}function Wl(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Ji(t,e,n)}function Bl(t,e){t!=e&&(tr(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Ji(t,"metadata",function(t){return new El(t.a,t.b)}(e.metadata)):Ji(t,"metadata",new El),H(e.providerData,(function(e){Ul(t,e)})),function(t,e){t.b=e.b,t.a=e.a,t.c=e.c}(t.h,e.h),Ji(t,"refreshToken",t.h.a),vl(t.S,e.S.b))}function Hl(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return au(t.a,Fa,{idToken:e}).then(w(t.Kc,t))}(t,e).then((function(){return n||Wl(t,"isAnonymous",!1),e}))}))}function zl(t,e){e[na]&&t.Aa!=e[na]&&(bl(t.h,e),t.dispatchEvent(new dl("tokenChanged")),Dl(t,e[na]),Wl(t,"refreshToken",t.h.a))}function Kl(t,e){return Hl(t).then((function(){if(Y(ql(t),e))return Rl(t).then((function(){throw new k("provider-already-linked")}))}))}function Gl(t,e,n){return er({user:t,credential:Wo(e),additionalUserInfo:e=Jr(e),operationType:n})}function Yl(t,e){return zl(t,e),t.reload().then((function(){return t}))}function $l(t,e,n,i,r){if(!Ri())return Pe(new k("operation-not-supported-in-this-environment"));if(t.i&&!r)return Pe(t.i);var o=Zr(n.providerId),s=Vi(t.uid+":::"),a=null;(!ji()||Ei())&&t.s&&n.isOAuthProvider&&(a=Eu(t.s,t.l,t.m,e,n,null,s,zi.Z.SDK_VERSION||null,null,null,t.tenantId,t.u));var u=mi(a,o&&o.va,o&&o.ua);return i=i().then((function(){if(Ql(t),!r)return t.I().then((function(){}))})).then((function(){return Wc(t.b,u,e,n,s,!!a,t.tenantId)})).then((function(){return new Ee((function(n,i){t.na(e,null,new k("cancelled-popup-request"),t.g||null),t.f=n,t.C=i,t.g=s,t.c=zc(t.b,t,e,u,s)}))})).then((function(t){return u&&gi(u),t?er(t):null})).o((function(t){throw u&&gi(u),t})),Zl(t,i,r)}function Xl(t,e,n,i,r){if(!Ri())return Pe(new k("operation-not-supported-in-this-environment"));if(t.i&&!r)return Pe(t.i);var o=null,s=Vi(t.uid+":::");return i=i().then((function(){if(Ql(t),!r)return t.I().then((function(){}))})).then((function(){return t.ga=s,Rl(t)})).then((function(e){return t.ha&&(e=(e=t.ha).b.set(eh,t.w(),e.a)),e})).then((function(){return Hc(t.b,e,n,s,t.tenantId)})).o((function(e){if(o=e,t.ha)return nh(t.ha);throw o})).then((function(){if(o)throw o})),Zl(t,i,r)}function Ql(t){if(!t.b||!t.P){if(t.b&&!t.P)throw new k("internal-error");throw new k("auth-domain-config-required")}}function Zl(t,e,n){var i=function(t,e,n){return t.i&&!n?(e.cancel(),Pe(t.i)):e.o((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.i||t.dispatchEvent(new dl("userInvalidated")),t.i=e),e}))}(t,e,n);return t.N.push(i),i.oa((function(){$(t.N,i)})),i.o((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=cl(e.w(),Pl(t),w(t.jc,t))),n||e}))}function Jl(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName,emulatorConfig:t.emulatorConfig},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[na]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var i=t.stsTokenManager.expirationTime;i&&(n.expiresIn=(i-Date.now())/1e3);var r=new Il(e,n,t);return t.providerData&&H(t.providerData,(function(t){t&&Ul(r,er(t))})),t.redirectEventId&&(r.ga=t.redirectEventId),r}function th(t){this.a=t,this.b=oc()}ol.prototype.Rc=function(t){var e=this;return t.tb(this.a.a,this.c).then((function(t){var n=vt(e.f);return delete n[sl],delete n[al],mt(n,t),e.g(n)}))},I(ul,k),ll.prototype.tb=function(t,e,n){return e.type==lo?function(t,e,n,i){return n.Ha().then((function(n){return n={idToken:n},void 0!==i&&(n.displayName=i),mt(n,{phoneVerificationInfo:qo(t.a)}),au(e,Ma,n)}))}(this,t,e,n):function(t,e,n){return n.Ha().then((function(n){return mt(n={mfaPendingCredential:n},{phoneVerificationInfo:qo(t.a)}),au(e,ja,n)}))}(this,t,e)},I(hl,ll),I(fl,hl),I(dl,Ze),(t=pl.prototype).yc=function(t){vl(this,function(t){var e=[];return H(t.mfaInfo||[],(function(t){(t=rr(t))&&e.push(t)})),e}(t.hd))},t.Sb=function(){return this.a.I().then((function(t){return new co(t,null)}))},t.fc=function(t,e){var n=this,i=this.a.a;return this.Sb().then((function(n){return t.tb(i,n,e)})).then((function(t){return zl(n.a,t),n.a.reload()}))},t.bd=function(t){var e=this,n="string"==typeof t?t:t.uid,i=this.a.a;return this.a.I().then((function(t){return au(i,su,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var i=z(e.b,(function(t){return t.uid!=n}));return vl(e,i),zl(e.a,t),e.a.reload().o((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},t.w=function(){return{multiFactor:{enrolledFactors:K(this.b,(function(t){return t.w()}))}}},gl.prototype.start=function(){this.a=this.c,ml(this,!0)},gl.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},yl.prototype.w=function(){return{apiKey:this.f.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:this.c}},yl.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Pe(new k("user-token-expired")):t||!this.b||Date.now()>this.c-3e4?this.a?wl(this,{grant_type:"refresh_token",refresh_token:this.a}):Ne(null):Ne({accessToken:this.b.toString(),refreshToken:this.a})},El.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},I(Il,Cn),Il.prototype.xa=function(t){this.za=t,aa(this.a,t)},Il.prototype.la=function(){return this.za},Il.prototype.Ga=function(){return Z(this.aa)},Il.prototype.ib=function(){this.D.b&&(this.D.stop(),this.D.start())},Ji(Il.prototype,"providerId","firebase"),(t=Il.prototype).reload=function(){var t=this;return Zl(this,Fl(this).then((function(){return Hl(t).then((function(){return Rl(t)})).then(jl)})))},t.oc=function(t){return this.I(t).then((function(t){return new rl(t)}))},t.I=function(t){var e=this;return Zl(this,Fl(this).then((function(){return e.h.getToken(t)})).then((function(t){if(!t)throw new k("internal-error");return t.accessToken!=e.Aa&&(Dl(e,t.accessToken),e.dispatchEvent(new dl("tokenChanged"))),Wl(e,"refreshToken",t.refreshToken),t.accessToken})))},t.Kc=function(t){if(!(t=t.users)||!t.length)throw new k("internal-error");Ml(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?K(t,(function(t){return new Cl(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Ul(this,e[n]);Wl(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new dl("userReloaded",{hd:t}))},t.Lc=function(t){return Qi("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.ub(t)},t.ub=function(t){var e=this,n=null;return Zl(this,t.c(this.a,this.uid).then((function(t){return zl(e,t),n=Gl(e,t,"reauthenticate"),e.i=null,e.reload()})).then((function(){return n})),!0)},t.Cc=function(t){return Qi("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.rb(t)},t.rb=function(t){var e=this,n=null;return Zl(this,Kl(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=Gl(e,t,"link"),Yl(e,t)})).then((function(){return n})))},t.Dc=function(t,e){var n=this;return Zl(this,Kl(this,"phone").then((function(){return il(Pl(n),t,e,w(n.rb,n))})))},t.Mc=function(t,e){var n=this;return Zl(this,Ne().then((function(){return il(Pl(n),t,e,w(n.ub,n))})),!0)},t.Cb=function(t){var e=this;return Zl(this,this.I().then((function(n){return e.a.Cb(n,t)})).then((function(t){return zl(e,t),e.reload()})))},t.ed=function(t){var e=this;return Zl(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return zl(e,t),e.reload()})))},t.Db=function(t){var e=this;return Zl(this,this.I().then((function(n){return e.a.Db(n,t)})).then((function(t){return zl(e,t),e.reload()})))},t.Eb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Fl(this);var e=this;return Zl(this,this.I().then((function(n){return e.a.Eb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return zl(e,t),Wl(e,"displayName",t.displayName||null),Wl(e,"photoURL",t.photoUrl||null),H(e.providerData,(function(t){"password"===t.providerId&&(Ji(t,"displayName",e.displayName),Ji(t,"photoURL",e.photoURL))})),Rl(e)})).then(jl))},t.cd=function(t){var e=this;return Zl(this,Hl(this).then((function(n){return Y(ql(e),t)?function(t,e,n){return au(t,Da,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return H(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),H(ql(e),(function(t){n[t]||Vl(e,t)})),n[Uo.PROVIDER_ID]||Ji(e,"phoneNumber",null),Rl(e)})):Rl(e).then((function(){throw new k("no-such-provider")}))})))},t.delete=function(){var t=this;return Zl(this,this.I().then((function(e){return au(t.a,xa,{idToken:e})})).then((function(){t.dispatchEvent(new dl("userDeleted"))}))).then((function(){for(var e=0;e<t.N.length;e++)t.N[e].cancel("app-deleted");kl(t,null),Sl(t,null),Nl(t,null),t.N=[],t.J=!0,xl(t),Ji(t,"refreshToken",null),t.b&&qc(t.b,t)}))},t.Gb=function(t,e){return!!("linkViaPopup"==t&&(this.g||null)==e&&this.f||"reauthViaPopup"==t&&(this.g||null)==e&&this.f||"linkViaRedirect"==t&&(this.ga||null)==e||"reauthViaRedirect"==t&&(this.ga||null)==e)},t.na=function(t,e,n,i){"linkViaPopup"!=t&&"reauthViaPopup"!=t||i!=(this.g||null)||(n&&this.C?this.C(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C)},t.Fa=function(t,e){return"linkViaPopup"==t&&e==(this.g||null)?w(this.Lb,this):"reauthViaPopup"==t&&e==(this.g||null)?w(this.Mb,this):"linkViaRedirect"==t&&(this.ga||null)==e?w(this.Lb,this):"reauthViaRedirect"==t&&(this.ga||null)==e?w(this.Mb,this):null},t.Ec=function(t){var e=this;return $l(this,"linkViaPopup",t,(function(){return Kl(e,t.providerId).then((function(){return Rl(e)}))}),!1)},t.Nc=function(t){return $l(this,"reauthViaPopup",t,(function(){return Ne()}),!0)},t.Fc=function(t){var e=this;return Xl(this,"linkViaRedirect",t,(function(){return Kl(e,t.providerId)}),!1)},t.Oc=function(t){return Xl(this,"reauthViaRedirect",t,(function(){return Ne()}),!0)},t.Lb=function(t,e,n,i){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Zl(this,this.I().then((function(n){return Ta(r.a,{requestUri:t,postBody:i,sessionId:e,idToken:n})})).then((function(t){return o=Gl(r,t,"link"),Yl(r,t)})).then((function(){return o})))},t.Mb=function(t,e,n,i){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Zl(this,Ne().then((function(){return po(ka(r.a,{requestUri:t,sessionId:e,postBody:i,tenantId:n}),r.uid)})).then((function(t){return o=Gl(r,t,"reauthenticate"),zl(r,t),r.i=null,r.reload()})).then((function(){return o})),!0)},t.vb=function(t){var e=this,n=null;return Zl(this,this.I().then((function(e){return n=e,void 0===t||pt(t)?{}:Br(new Dr(t))})).then((function(t){return e.a.vb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},t.Fb=function(t,e){var n=this,i=null;return Zl(this,this.I().then((function(t){return i=t,void 0===e||pt(e)?{}:Br(new Dr(e))})).then((function(e){return n.a.Fb(i,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},t.jc=function(t){var e=null,n=this;return Zl(this,t=po(Ne(t),n.uid).then((function(t){return e=Gl(n,t,"reauthenticate"),zl(n,t),n.i=null,n.reload()})).then((function(){return e})),!0)},t.toJSON=function(){return this.w()},t.w=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.h.w(),redirectEventId:this.ga||null};return this.metadata&&mt(t,this.metadata.w()),H(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),mt(t,this.S.w()),t};var eh={name:"redirectUser",F:"session"};function nh(t){return uc(t.b,eh,t.a)}function ih(t){this.a=t,this.b=oc(),this.c=null,this.f=function(t){var e=sh("local"),n=sh("session"),i=sh("none");return function(t,e,n){var i=ac(e,n),r=sc(t,e.F);return t.get(e,n).then((function(o){var s=null;try{s=Ui(a.localStorage.getItem(i))}catch(t){}if(s&&!o)return a.localStorage.removeItem(i),t.set(e,s,n);s&&o&&"localStorage"!=r.type&&a.localStorage.removeItem(i)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(r){return r?n:t.b.get(i,t.a).then((function(n){return n?i:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(oh,t.a).then((function(t){return t?sh(t):e}))}))}))})).then((function(e){return t.c=e,rh(t,e.F)})).o((function(){t.c||(t.c=e)}))}(this),this.b.addListener(sh("local"),this.a,w(this.g,this))}function rh(t,e){var n,i=[];for(n in ic)ic[n]!==e&&i.push(uc(t.b,sh(ic[n]),t.a));return i.push(uc(t.b,oh,t.a)),function(t){return new Ee((function(e,n){var i=t.length,r=[];if(i)for(var o=function(t,n){i--,r[t]=n,0==i&&e(r)},s=function(t){n(t)},a=0;a<t.length;a++)Oe(t[a],E(o,a),s);else e(r)}))}(i)}ih.prototype.g=function(){var t=this,e=sh("local");lh(this,(function(){return Ne().then((function(){return t.c&&"local"!=t.c.F?t.b.get(e,t.a):null})).then((function(n){if(n)return rh(t,"local").then((function(){t.c=e}))}))}))};var oh={name:"persistence",F:"session"};function sh(t){return{name:"authUser",F:t}}function ah(t,e){return lh(t,(function(){return t.b.set(t.c,e.w(),t.a)}))}function uh(t){return lh(t,(function(){return uc(t.b,t.c,t.a)}))}function ch(t,e,n){return lh(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),t&&n&&(t.emulatorConfig=n),Jl(t||{})}))}))}function lh(t,e){return t.f=t.f.then(e,e),t.f}function hh(t){if(this.l=!1,Ji(this,"settings",new el),Ji(this,"app",t),!bh(this).options||!bh(this).options.apiKey)throw new k("invalid-api-key");t=zi.Z.SDK_VERSION?Pi(zi.Z.SDK_VERSION):null,this.a=new ta(bh(this).options&&bh(this).options.apiKey,x(A),t),this.P=[],this.s=[],this.N=[],this.Pa=zi.Z.INTERNAL.createSubscribe(w(this.zc,this)),this.W=void 0,this.ib=zi.Z.INTERNAL.createSubscribe(w(this.Ac,this)),yh(this,null),this.i=new ih(bh(this).options.apiKey+":"+bh(this).name),this.D=new th(bh(this).options.apiKey+":"+bh(this).name),this.$=Ih(this,function(t){var e=bh(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(eh,t.a).then((function(t){return t&&e&&(t.authDomain=e),Jl(t||{})}))}(t.D,bh(t).options.authDomain).then((function(e){return(t.m=e)&&(e.ha=t.D),nh(t.D)}));return Ih(t,e)}(t).then((function(){return ch(t.i,e,t.R)})).then((function(e){return e?(e.ha=t.D,t.m&&(t.m.ga||null)==(e.ga||null)?e:e.reload().then((function(){return ah(t.i,e).then((function(){return e}))})).o((function(n){return"auth/network-request-failed"==n.code?e:uh(t.i)}))):null})).then((function(e){yh(t,e||null)}));return Ih(t,n)}(this)),this.h=Ih(this,function(t){return t.$.then((function(){return gh(t)})).o((function(){})).then((function(){if(!t.l)return t.ja()})).o((function(){})).then((function(){if(!t.l){t.ba=!0;var e=t.i;e.b.addListener(sh("local"),e.a,t.ja)}}))}(this)),this.ba=!1,this.ja=w(this.Zc,this),this.Ba=w(this.da,this),this.qa=w(this.mc,this),this.za=w(this.wc,this),this.Aa=w(this.xc,this),this.b=null,function(t){var e=bh(t).options.authDomain,n=bh(t).options.apiKey;e&&Ri()&&(t.Oa=t.$.then((function(){if(!t.l){if(t.b=Yc(e,n,bh(t).name,t.R),Fc(t.b,t),wh(t)&&Ll(wh(t)),t.m){Ll(t.m);var i=t.m;i.xa(t.la()),kl(i,t),Al(i=t.m,t.J),Nl(i,t),Tl(i=t.m,t.R),Sl(i,t),t.m=null}return t.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=w(this.delete,this),this.INTERNAL.logFramework=w(this.Gc,this),this.u=0,Cn.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.la()},set:function(t){this.xa(t)},enumerable:!1}),t.aa=null,Object.defineProperty(t,"ti",{get:function(){return this.T()},set:function(t){this.zb(t)},enumerable:!1}),t.S=null,Object.defineProperty(t,"emulatorConfig",{get:function(){if(this.R){var t=Vn(this.R.url);t=er({protocol:t.c,host:t.a,port:t.g,options:er({disableWarnings:this.R.ec})})}else t=null;return t},enumerable:!1})}(this),this.J=[],this.R=null}function fh(t){Ze.call(this,"languageCodeChanged"),this.h=t}function dh(t){Ze.call(this,"emulatorConfigChanged"),this.c=t}function ph(t){Ze.call(this,"frameworkChanged"),this.f=t}function vh(t){return t.Oa||Pe(new k("auth-domain-config-required"))}function gh(t){if(!Ri())return Pe(new k("operation-not-supported-in-this-environment"));var e=vh(t).then((function(){return t.b.ra()})).then((function(t){return t?er(t):null}));return Ih(t,e)}function mh(t,e){var n={};return n.apiKey=bh(t).options.apiKey,n.authDomain=bh(t).options.authDomain,n.appName=bh(t).name,t.R&&(n.emulatorConfig=t.R),t.$.then((function(){return function(t,e,n,i){var r=new Il(t,e);return n&&(r.ha=n),i&&Al(r,i),r.reload().then((function(){return r}))}(n,e,t.D,t.Ga())})).then((function(e){return wh(t)&&e.uid==wh(t).uid?(Bl(wh(t),e),t.da(e)):(yh(t,e),Ll(e),t.da(e))})).then((function(){Ch(t)}))}function yh(t,e){wh(t)&&(function(t,e){X(t.W,(function(t){return t==e}))}(wh(t),t.Ba),pn(wh(t),"tokenChanged",t.qa),pn(wh(t),"userDeleted",t.za),pn(wh(t),"userInvalidated",t.Aa),xl(wh(t))),e&&(e.W.push(t.Ba),hn(e,"tokenChanged",t.qa),hn(e,"userDeleted",t.za),hn(e,"userInvalidated",t.Aa),0<t.u&&Ol(e)),Ji(t,"currentUser",e),e&&(e.xa(t.la()),kl(e,t),Al(e,t.J),Nl(e,t),Tl(e,t.R),Sl(e,t))}function _h(t,e){var n=null,i=null;return Ih(t,e.then((function(e){return n=Wo(e),i=Jr(e),mh(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=cl(e.w(),t,w(t.kc,t))),n||e})).then((function(){return er({user:wh(t),credential:n,additionalUserInfo:i,operationType:"signIn"})})))}function bh(t){return t.app}function wh(t){return t.currentUser}function Eh(t){return wh(t)&&wh(t)._lat||null}function Ch(t){if(t.ba){for(var e=0;e<t.s.length;e++)t.s[e]&&t.s[e](Eh(t));if(t.W!==t.getUid()&&t.N.length)for(t.W=t.getUid(),e=0;e<t.N.length;e++)t.N[e]&&t.N[e](Eh(t))}}function Ih(t,e){return t.P.push(e),e.oa((function(){$(t.P,e)})),e}function Th(){}function kh(){this.a={},this.b=1e12}ih.prototype.yb=function(t){var e=null,n=this;return function(t){var e=new k("invalid-persistence-type"),n=new k("unsupported-persistence-type");t:{for(i in ic)if(ic[i]==t){var i=!0;break t}i=!1}if(!i||"string"!=typeof t)throw e;switch(Ii()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Mu()&&"none"!==t)throw n;break;default:if(!Di()&&"none"!==t)throw n}}(t),lh(this,(function(){return t!=n.c.F?n.b.get(n.c,n.a).then((function(i){return e=i,rh(n,t)})).then((function(){if(n.c=sh(t),e)return n.b.set(n.c,e,n.a)})):Ne()}))},I(hh,Cn),I(fh,Ze),I(dh,Ze),I(ph,Ze),(t=hh.prototype).yb=function(t){return Ih(this,t=this.i.yb(t))},t.xa=function(t){this.aa===t||this.l||(this.aa=t,aa(this.a,this.aa),this.dispatchEvent(new fh(this.la())))},t.la=function(){return this.aa},t.fd=function(){var t=a.navigator;this.xa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.gd=function(t,e){if(!this.R){if(!/^https?:\/\//.test(t))throw new k("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");(function(t){"undefined"!=typeof console&&console.info,a.document&&!t&&bi().then((function(){var t=a.document.createElement("div");t.innerText="Running in emulator mode. Do not use with production credentials.",t.style.position="fixed",t.style.width="100%",t.style.backgroundColor="#ffffff",t.style.border=".1em solid #000000",t.style.color="#b50000",t.style.bottom="0px",t.style.left="0px",t.style.margin="0px",t.style.zIndex=1e4,t.style.textAlign="center",t.classList.add("firebase-emulator-warning"),a.document.body.appendChild(t)}))})(e=!!e&&!!e.disableWarnings),this.R={url:t,ec:e},this.settings.jb=!0,ua(this.a,this.R),this.dispatchEvent(new dh(this.R))}},t.Gc=function(t){this.J.push(t),la(this.a,zi.Z.SDK_VERSION?Pi(zi.Z.SDK_VERSION,this.J):null),this.dispatchEvent(new ph(this.J))},t.Ga=function(){return Z(this.J)},t.zb=function(t){this.S===t||this.l||(this.S=t,this.a.b=this.S)},t.T=function(){return this.S},t.toJSON=function(){return{apiKey:bh(this).options.apiKey,authDomain:bh(this).options.authDomain,appName:bh(this).name,currentUser:wh(this)&&wh(this).w()}},t.Gb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==e&&!!this.f;default:return!1}},t.na=function(t,e,n,i){"signInViaPopup"==t&&this.g==i&&(n&&this.C?this.C(n):e&&!n&&this.f&&this.f(e),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C)},t.Fa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.g==e&&this.f?w(this.ic,this):null},t.ic=function(t,e,n,i){var r=this,o={requestUri:t,postBody:i,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),r.$.then((function(){return _h(r,Ia(r.a,o))}))},t.Xc=function(t){if(!Ri())return Pe(new k("operation-not-supported-in-this-environment"));var e=this,n=Zr(t.providerId),i=Vi(),r=null;(!ji()||Ei())&&bh(this).options.authDomain&&t.isOAuthProvider&&(r=Eu(bh(this).options.authDomain,bh(this).options.apiKey,bh(this).name,"signInViaPopup",t,null,i,zi.Z.SDK_VERSION||null,null,null,this.T(),this.R));var o=mi(r,n&&n.va,n&&n.ua);return Ih(this,n=vh(this).then((function(n){return Wc(n,o,"signInViaPopup",t,i,!!r,e.T())})).then((function(){return new Ee((function(t,n){e.na("signInViaPopup",null,new k("cancelled-popup-request"),e.g),e.f=t,e.C=n,e.g=i,e.c=zc(e.b,e,"signInViaPopup",o,i)}))})).then((function(t){return o&&gi(o),t?er(t):null})).o((function(t){throw o&&gi(o),t})))},t.Yc=function(t){if(!Ri())return Pe(new k("operation-not-supported-in-this-environment"));var e=this;return Ih(this,vh(this).then((function(){return function(t){return lh(t,(function(){return t.b.set(oh,t.c.F,t.a)}))}(e.i)})).then((function(){return Hc(e.b,"signInViaRedirect",t,void 0,e.T())})))},t.ra=function(){var t=this;return gh(this).then((function(e){return t.b&&Qc(t.b.b),e})).o((function(e){throw t.b&&Qc(t.b.b),e}))},t.dd=function(t){if(!t)return Pe(new k("null-user"));if(this.S!=t.tenantId)return Pe(new k("tenant-id-mismatch"));var e=this,n={};n.apiKey=bh(this).options.apiKey,n.authDomain=bh(this).options.authDomain,n.appName=bh(this).name;var i=function(t,e,n,i){var r=t.h,o={};return o[na]=r.b&&r.b.toString(),o.refreshToken=r.a,e=new Il(e||{apiKey:t.l,authDomain:t.s,appName:t.m},o),n&&(e.ha=n),i&&Al(e,i),Bl(e,t),e}(t,n,e.D,e.Ga());return Ih(this,this.h.then((function(){if(bh(e).options.apiKey!=t.l)return i.reload()})).then((function(){return wh(e)&&t.uid==wh(e).uid?(Bl(wh(e),t),e.da(t)):(yh(e,i),Ll(i),e.da(i))})).then((function(){Ch(e)})))},t.Bb=function(){var t=this;return Ih(this,this.h.then((function(){return t.b&&Qc(t.b.b),wh(t)?(yh(t,null),uh(t.i).then((function(){Ch(t)}))):Ne()})))},t.Zc=function(){var t=this;return ch(this.i,bh(this).options.authDomain).then((function(e){if(!t.l){var n;if(n=wh(t)&&e){n=wh(t).uid;var i=e.uid;n=null!=n&&""!==n&&null!=i&&""!==i&&n==i}if(n)return Bl(wh(t),e),wh(t).I();(wh(t)||e)&&(yh(t,e),e&&(Ll(e),e.ha=t.D),t.b&&Fc(t.b,t),Ch(t))}}))},t.da=function(t){return ah(this.i,t)},t.mc=function(){Ch(this),this.da(wh(this))},t.wc=function(){this.Bb()},t.xc=function(){this.Bb()},t.kc=function(t){var e=this;return this.h.then((function(){return _h(e,Ne(t))}))},t.zc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(wh(e))}))},t.Ac=function(t){var e=this;!function(t,e){t.N.push(e),Ih(t,t.h.then((function(){!t.l&&Y(t.N,e)&&t.W!==t.getUid()&&(t.W=t.getUid(),e(Eh(t)))})))}(this,(function(){t.next(wh(e))}))},t.Ic=function(t,e,n){var i=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof t?t(wh(i)):"function"==typeof t.next&&t.next(wh(i))})),this.Pa(t,e,n)},t.Hc=function(t,e,n){var i=this;return this.ba&&Promise.resolve().then((function(){i.W=i.getUid(),"function"==typeof t?t(wh(i)):"function"==typeof t.next&&t.next(wh(i))})),this.ib(t,e,n)},t.nc=function(t){var e=this;return Ih(this,this.h.then((function(){return wh(e)?wh(e).I(t).then((function(t){return{accessToken:t}})):null})))},t.Tc=function(t){var e=this;return this.h.then((function(){return _h(e,au(e.a,eu,{token:t}))})).then((function(t){var n=t.user;return Wl(n,"isAnonymous",!1),e.da(n),t}))},t.Uc=function(t,e){var n=this;return this.h.then((function(){return _h(n,au(n.a,nu,{email:t,password:e}))}))},t.dc=function(t,e){var n=this;return this.h.then((function(){return _h(n,au(n.a,Pa,{email:t,password:e}))}))},t.ab=function(t){var e=this;return this.h.then((function(){return _h(e,t.ka(e.a))}))},t.Sc=function(t){return Qi("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.ab(t)},t.Ab=function(){var t=this;return this.h.then((function(){var e=wh(t);if(e&&e.isAnonymous){var n=er({providerId:null,isNewUser:!1});return er({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return _h(t,t.a.Ab()).then((function(e){var n=e.user;return Wl(n,"isAnonymous",!0),t.da(n),e}))}))},t.getUid=function(){return wh(this)&&wh(this).uid||null},t.cc=function(t){this.addAuthTokenListener(t),this.u++,0<this.u&&wh(this)&&Ol(wh(this))},t.Pc=function(t){var e=this;H(this.s,(function(n){n==t&&e.u--})),0>this.u&&(this.u=0),0==this.u&&wh(this)&&xl(wh(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.s.push(t),Ih(this,this.h.then((function(){e.l||Y(e.s,t)&&t(Eh(e))})))},t.removeAuthTokenListener=function(t){X(this.s,(function(e){return e==t}))},t.delete=function(){this.l=!0;for(var t=0;t<this.P.length;t++)this.P[t].cancel("app-deleted");return this.P=[],this.i&&(t=this.i).b.removeListener(sh("local"),t.a,this.ja),this.b&&(qc(this.b,this),Qc(this.b.b)),Promise.resolve()},t.hc=function(t){return Ih(this,function(t,e){return au(t,Oa,{identifier:e,continueUri:Li()?fi():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.a,t))},t.Bc=function(t){return!!Mo(t)},t.xb=function(t,e){var n=this;return Ih(this,Ne().then((function(){var t=new Dr(e);if(!t.c)throw new k("argument-error",Mr+" must be true when sending sign in link to email");return Br(t)})).then((function(e){return n.a.xb(t,e)})).then((function(){})))},t.jd=function(t){return this.Sa(t).then((function(t){return t.data.email}))},t.ob=function(t,e){return Ih(this,this.a.ob(t,e).then((function(){})))},t.Sa=function(t){return Ih(this,this.a.Sa(t).then((function(t){return new lr(t)})))},t.kb=function(t){return Ih(this,this.a.kb(t).then((function(){})))},t.wb=function(t,e){var n=this;return Ih(this,Ne().then((function(){return void 0===e||pt(e)?{}:Br(new Dr(e))})).then((function(e){return n.a.wb(t,e)})).then((function(){})))},t.Wc=function(t,e){return Ih(this,il(this,t,e,w(this.ab,this)))},t.Vc=function(t,e){var n=this;return Ih(this,Ne().then((function(){var i=e||fi(),r=Lo(t,i);if(!(i=Mo(i)))throw new k("argument-error","Invalid email link!");if(i.tenantId!==n.T())throw new k("tenant-id-mismatch");return n.ab(r)})))},Th.prototype.render=function(){},Th.prototype.reset=function(){},Th.prototype.getResponse=function(){},Th.prototype.execute=function(){};var Sh=null;function Ah(t,e){return(e=Nh(e))&&t.a[e]||null}function Nh(t){return(t=void 0===t?1e12:t)?t.toString():null}function Ph(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=le(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():hn(this.f,"click",this.i)}function Oh(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function xh(){}function Dh(){}kh.prototype.render=function(t,e){return this.a[this.b.toString()]=new Ph(t,e),this.b++},kh.prototype.reset=function(t){var e=Ah(this,t);t=Nh(t),e&&t&&(e.delete(),delete this.a[t])},kh.prototype.getResponse=function(t){return(t=Ah(this,t))?t.getResponse():null},kh.prototype.execute=function(t){(t=Ah(this,t))&&t.execute()},Ph.prototype.getResponse=function(){return Oh(this),this.b},Ph.prototype.execute=function(){Oh(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},Ph.prototype.delete=function(){Oh(this),this.g=!0,clearTimeout(this.a),this.a=null,pn(this.f,"click",this.i)},Ji(xh,"FACTOR_ID","phone"),Dh.prototype.g=function(){return Sh||(Sh=new kh),Ne(Sh)},Dh.prototype.c=function(){};var Rh=null;function Lh(){this.b=a.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Mh=new _t(Ct,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),jh=new Hi(3e4,6e4);Lh.prototype.g=function(t){var e=this;return new Ee((function(n,i){var r=setTimeout((function(){i(new k("network-request-failed"))}),jh.get());!a.grecaptcha||t!==e.f&&!e.b?(a[e.a]=function(){if(a.grecaptcha){e.f=t;var o=a.grecaptcha.render;a.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(r),n(a.grecaptcha)}else clearTimeout(r),i(new k("internal-error"));delete a[e.a]},Ne(Gs(St(Mh,{onload:e.a,hl:t||""}))).o((function(){clearTimeout(r),i(new k("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(r),n(a.grecaptcha))}))},Lh.prototype.c=function(){this.b--};var Fh=null;function qh(t,e,n,i,r,o,s){if(Ji(this,"type","recaptcha"),this.c=this.f=null,this.J=!1,this.v=e,this.g=null,s?(Rh||(Rh=new Dh),s=Rh):(Fh||(Fh=new Lh),s=Fh),this.m=s,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Wh])throw new k("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Bh],!a.document)throw new k("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!le(e)||!this.i&&le(e).hasChildNodes())throw new k("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new ta(t,o||null,r||null),this.u=i||function(){return null};var u=this;this.l=[];var c=this.a[Uh];this.a[Uh]=function(t){if(Hh(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=xi(c,a);"function"==typeof e&&e(t)}};var l=this.a[Vh];this.a[Vh]=function(){if(Hh(u,null),"function"==typeof l)l();else if("string"==typeof l){var t=xi(l,a);"function"==typeof t&&t()}}}var Uh="callback",Vh="expired-callback",Wh="sitekey",Bh="size";function Hh(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function zh(t,e){return t.h.push(e),e.oa((function(){$(t.h,e)})),e}function Kh(t){if(t.J)throw new k("internal-error","RecaptchaVerifier instance has been destroyed.")}function Gh(t,e,n){var i=!1;try{this.b=n||zi.Z.app()}catch(t){throw new k("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new k("invalid-api-key");n=this.b.options.apiKey;var r=this,o=null;try{o=this.b.auth().Ga()}catch(t){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}o=zi.Z.SDK_VERSION?Pi(zi.Z.SDK_VERSION,o):null,qh.call(this,n,t,e,(function(){try{var t=r.b.auth().la()}catch(e){t=null}return t}),o,x(A),i)}function Yh(t,e,n,i){t:{n=Array.prototype.slice.call(n);for(var r=0,o=!1,s=0;s<e.length;s++)if(e[s].optional)o=!0;else{if(o)throw new k("internal-error","Argument validator encountered a required argument after an optional argument.");r++}if(o=e.length,n.length<r||o<n.length)i="Expected "+(r==o?1==r?"1 argument":r+" arguments":r+"-"+o+" arguments")+" but got "+n.length+".";else{for(r=0;r<n.length;r++)if(o=e[r].optional&&void 0===n[r],!e[r].M(n[r])&&!o){if(e=e[r],0>r||r>=$h.length)throw new k("internal-error","Argument validator received an unsupported number of arguments.");n=$h[r],i=(i?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.K+".";break t}i=null}}if(i)throw new k("argument-error",t+" failed: "+i)}(t=qh.prototype).Ia=function(){var t=this;return this.f?this.f:this.f=zh(this,Ne().then((function(){if(Li()&&!Ci())return bi();throw new k("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.m.g(t.u())})).then((function(e){return t.g=e,au(t.s,Ha,{})})).then((function(e){t.a[Wh]=e.recaptchaSiteKey})).o((function(e){throw t.f=null,e})))},t.render=function(){Kh(this);var t=this;return zh(this,this.Ia().then((function(){if(null===t.c){var e=t.v;if(!t.i){var n=le(e);e=function(t,e,n){var i=arguments,r=document,o=String(i[0]),s=i[1];if(!ce&&s&&(s.name||s.type)){if(o=["<",o],s.name&&o.push(' name="',Ht(s.name),'"'),s.type){o.push(' type="',Ht(s.type),'"');var a={};mt(a,s),delete a.type,s=a}o.push(">"),o=o.join("")}return o=ge(r,o),s&&("string"==typeof s?o.className=s:Array.isArray(s)?o.className=s.join(" "):he(o,s)),2<i.length&&ve(r,o,i),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},t.verify=function(){Kh(this);var t=this;return zh(this,this.render().then((function(e){return new Ee((function(n){var i=t.g.getResponse(e);if(i)n(i);else{var r=function(e){e&&(function(t,e){X(t.l,(function(t){return t==e}))}(t,r),n(e))};t.l.push(r),t.i&&t.g.execute(t.c)}}))})))},t.reset=function(){Kh(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Kh(this),this.J=!0,this.m.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=le(this.v);for(var e;e=t.firstChild;)t.removeChild(e)}},I(Gh,qh);var $h="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Xh(t,e){return{name:t||"",K:"a valid string",optional:!!e,M:function(t){return"string"==typeof t}}}function Qh(t,e){return{name:t||"",K:"a boolean",optional:!!e,M:function(t){return"boolean"==typeof t}}}function Zh(t,e){return{name:t||"",K:"a valid object",optional:!!e,M:v}}function Jh(t,e){return{name:t||"",K:"a function",optional:!!e,M:function(t){return"function"==typeof t}}}function tf(t,e){return{name:t||"",K:"null",optional:!!e,M:function(t){return null===t}}}function ef(t){return{name:t?t+"Credential":"credential",K:t?"a valid "+t+" credential":"a valid credential",optional:!1,M:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ka||!n)}}}function nf(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&"function"==typeof t.Ha}function rf(t){return v(t)&&"string"==typeof t.uid}function of(t,e,n,i){return{name:n||"",K:t.K+" or "+e.K,optional:!!i,M:function(n){return t.M(n)||e.M(n)}}}function sf(t,e){for(var n in e){var i=e[n].name;t[i]=cf(i,t[n],e[n].j)}}function af(t,e){for(var n in e){var i=e[n].name;i!==n&&Object.defineProperty(t,i,{get:E((function(t){return this[t]}),n),set:E((function(t,e,n,i){Yh(t,[n],[i],!0),this[e]=i}),i,n,e[n].lb),enumerable:!0})}}function uf(t,e,n,i){t[e]=cf(e,n,i)}function cf(t,e,n){function i(){var t=Array.prototype.slice.call(arguments);return Yh(o,n,t),e.apply(this,t)}if(!n)return e;var r,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(r in e)i[r]=e[r];for(r in e.prototype)i.prototype[r]=e.prototype[r];return i}sf(hh.prototype,{kb:{name:"applyActionCode",j:[Xh("code")]},Sa:{name:"checkActionCode",j:[Xh("code")]},ob:{name:"confirmPasswordReset",j:[Xh("code"),Xh("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[Xh("email"),Xh("password")]},hc:{name:"fetchSignInMethodsForEmail",j:[Xh("email")]},ra:{name:"getRedirectResult",j:[]},Bc:{name:"isSignInWithEmailLink",j:[Xh("emailLink")]},Hc:{name:"onAuthStateChanged",j:[of(Zh(),Jh(),"nextOrObserver"),Jh("opt_error",!0),Jh("opt_completed",!0)]},Ic:{name:"onIdTokenChanged",j:[of(Zh(),Jh(),"nextOrObserver"),Jh("opt_error",!0),Jh("opt_completed",!0)]},wb:{name:"sendPasswordResetEmail",j:[Xh("email"),of(Zh("opt_actionCodeSettings",!0),tf(null,!0),"opt_actionCodeSettings",!0)]},xb:{name:"sendSignInLinkToEmail",j:[Xh("email"),Zh("actionCodeSettings")]},yb:{name:"setPersistence",j:[Xh("persistence")]},Sc:{name:"signInAndRetrieveDataWithCredential",j:[ef()]},Ab:{name:"signInAnonymously",j:[]},ab:{name:"signInWithCredential",j:[ef()]},Tc:{name:"signInWithCustomToken",j:[Xh("token")]},Uc:{name:"signInWithEmailAndPassword",j:[Xh("email"),Xh("password")]},Vc:{name:"signInWithEmailLink",j:[Xh("email"),Xh("emailLink",!0)]},Wc:{name:"signInWithPhoneNumber",j:[Xh("phoneNumber"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Xc:{name:"signInWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Yc:{name:"signInWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},dd:{name:"updateCurrentUser",j:[of({name:"user",K:"an instance of Firebase User",optional:!1,M:function(t){return!!(t&&t instanceof Il)}},tf(),"user")]},Bb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Xh(null,!0)]},fd:{name:"useDeviceLanguage",j:[]},gd:{name:"useEmulator",j:[Xh("url"),Zh("options",!0)]},jd:{name:"verifyPasswordResetCode",j:[Xh("code")]}}),af(hh.prototype,{lc:{name:"languageCode",lb:of(Xh(),tf(),"languageCode")},ti:{name:"tenantId",lb:of(Xh(),tf(),"tenantId")}}),hh.Persistence=ic,hh.Persistence.LOCAL="local",hh.Persistence.SESSION="session",hh.Persistence.NONE="none",sf(Il.prototype,{delete:{name:"delete",j:[]},oc:{name:"getIdTokenResult",j:[Qh("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Qh("opt_forceRefresh",!0)]},Cc:{name:"linkAndRetrieveDataWithCredential",j:[ef()]},rb:{name:"linkWithCredential",j:[ef()]},Dc:{name:"linkWithPhoneNumber",j:[Xh("phoneNumber"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Ec:{name:"linkWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Fc:{name:"linkWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Lc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[ef()]},ub:{name:"reauthenticateWithCredential",j:[ef()]},Mc:{name:"reauthenticateWithPhoneNumber",j:[Xh("phoneNumber"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Nc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Oc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},vb:{name:"sendEmailVerification",j:[of(Zh("opt_actionCodeSettings",!0),tf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Xh(null,!0)]},cd:{name:"unlink",j:[Xh("provider")]},Cb:{name:"updateEmail",j:[Xh("email")]},Db:{name:"updatePassword",j:[Xh("password")]},ed:{name:"updatePhoneNumber",j:[ef("phone")]},Eb:{name:"updateProfile",j:[Zh("profile")]},Fb:{name:"verifyBeforeUpdateEmail",j:[Xh("email"),of(Zh("opt_actionCodeSettings",!0),tf(null,!0),"opt_actionCodeSettings",!0)]}}),sf(kh.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),sf(Th.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),sf(Ee.prototype,{oa:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),af(el.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",lb:Qh("appVerificationDisabledForTesting")}}),sf(nl.prototype,{confirm:{name:"confirm",j:[Xh("verificationCode")]}}),uf(fo,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[bo,Do,Fo,mo],i=0;i<n.length;i++)if(e=n[i](t))return e;return null}),[of(Xh(),Zh(),"json")]),uf(Ro,"credential",(function(t,e){return new xo(t,e)}),[Xh("email"),Xh("password")]),sf(xo.prototype,{w:{name:"toJSON",j:[Xh(null,!0)]}}),sf(Io.prototype,{Ca:{name:"addScope",j:[Xh("scope")]},Ka:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),uf(Io,"credential",To,[of(Xh(),Zh(),"token")]),uf(Ro,"credentialWithLink",Lo,[Xh("email"),Xh("emailLink")]),sf(ko.prototype,{Ca:{name:"addScope",j:[Xh("scope")]},Ka:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),uf(ko,"credential",So,[of(Xh(),Zh(),"token")]),sf(Ao.prototype,{Ca:{name:"addScope",j:[Xh("scope")]},Ka:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),uf(Ao,"credential",No,[of(Xh(),of(Zh(),tf()),"idToken"),of(Xh(),tf(),"accessToken",!0)]),sf(Po.prototype,{Ka:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),uf(Po,"credential",Oo,[of(Xh(),Zh(),"token"),Xh("secret",!0)]),sf(Co.prototype,{Ca:{name:"addScope",j:[Xh("scope")]},credential:{name:"credential",j:[of(Xh(),of(Zh(),tf()),"optionsOrIdToken"),of(Xh(),tf(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[Zh("customOAuthParameters")]}}),sf(yo.prototype,{w:{name:"toJSON",j:[Xh(null,!0)]}}),sf(vo.prototype,{w:{name:"toJSON",j:[Xh(null,!0)]}}),uf(Uo,"credential",Vo,[Xh("verificationId"),Xh("verificationCode")]),sf(Uo.prototype,{gb:{name:"verifyPhoneNumber",j:[of(Xh(),{name:"phoneInfoOptions",K:"valid phone info options",optional:!1,M:function(t){return!!t&&(t.session&&t.phoneNumber?nf(t.session,lo)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?nf(t.session,ho)&&rf(t.multiFactorHint):t.session&&t.multiFactorUid?nf(t.session,ho)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]}}),sf(jo.prototype,{w:{name:"toJSON",j:[Xh(null,!0)]}}),sf(k.prototype,{toJSON:{name:"toJSON",j:[Xh(null,!0)]}}),sf(Xo.prototype,{toJSON:{name:"toJSON",j:[Xh(null,!0)]}}),sf($o.prototype,{toJSON:{name:"toJSON",j:[Xh(null,!0)]}}),sf(ul.prototype,{toJSON:{name:"toJSON",j:[Xh(null,!0)]}}),sf(ol.prototype,{Rc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(t){return!!t&&!!t.tb}}]}}),sf(pl.prototype,{Sb:{name:"getSession",j:[]},fc:{name:"enroll",j:[{name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(t){return!!t&&!!t.tb}},Xh("displayName",!0)]},bd:{name:"unenroll",j:[of({name:"multiFactorInfo",K:"a valid multiFactorInfo",optional:!1,M:rf},Xh(),"multiFactorInfoIdentifier")]}}),sf(Gh.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),uf(Ir,"parseLink",xr,[Xh("link")]),uf(xh,"assertion",(function(t){return new fl(t)}),[ef("phone")]),function(){if(void 0===zi.Z||!zi.Z.INTERNAL||!zi.Z.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:fr,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:hr,VERIFY_AND_CHANGE_EMAIL:dr,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:hh,AuthCredential:fo,Error:k};uf(t,"EmailAuthProvider",Ro,[]),uf(t,"FacebookAuthProvider",Io,[]),uf(t,"GithubAuthProvider",ko,[]),uf(t,"GoogleAuthProvider",Ao,[]),uf(t,"TwitterAuthProvider",Po,[]),uf(t,"OAuthProvider",Co,[Xh("providerId")]),uf(t,"SAMLAuthProvider",Eo,[Xh("providerId")]),uf(t,"PhoneAuthProvider",Uo,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(t){return!!(t&&t instanceof hh)}}]),uf(t,"RecaptchaVerifier",Gh,[of(Xh(),{name:"",K:"an HTML element",optional:!1,M:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Zh("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(t){return!!(t&&t instanceof zi.Z.app.App)}}]),uf(t,"ActionCodeURL",Ir,[]),uf(t,"PhoneMultiFactorGenerator",xh,[]),zi.Z.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new hh(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC",onInstanceCreated:function(t){t.getProvider("auth-internal").initialize()}}),zi.Z.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:w((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:w(t.nc,t),addAuthTokenListener:w(t.cc,t),removeAuthTokenListener:w(t.Pc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),zi.Z.registerVersion("@firebase/auth","0.16.8"),zi.Z.INTERNAL.extendNamespace({User:Il})}()}.apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});n(446),n(669);const Gi=n(973);zi.Z.initializeApp({apiKey:"AIzaSyBSgoh5f8HCzFs5lfy64_xS4gEeW-kjvVY",authDomain:"baseparavr2020-7b4bf.firebaseapp.com",databaseURL:"https://baseparavr2020-7b4bf-default-rtdb.firebaseio.com",projectId:"baseparavr2020-7b4bf",storageBucket:"baseparavr2020-7b4bf.appspot.com",messagingSenderId:"763953069297",appId:"1:763953069297:web:b774d310a1492100967d50",measurementId:"G-3ZVJ39E39V"});var Yi=zi.Z.database().ref("/");document.querySelector("#btn-send").onclick=()=>{!function(t){if(!t)return void Gi.showAlert("不可輸入空白","確認",(()=>{}));Gi.showLoading("loading","查詢中..."),Yi.get().then((e=>{if(Gi.hideLoading("loading"),e.exists()){let n=e.val(),i=[];for(const e of Object.values(n))e.account==t&&i.push(e);!function(t){let e=document.querySelector("#list-container");e.innerHTML="",t.sort(((t,e)=>t.UsingDate.toUpperCase()>e.UsingDate.toUpperCase()?-1:1));let n=t.length,i=document.querySelector("#count-text");i.innerText=n>0?`共${n}筆資料`:"查無資料";t.forEach((t=>{t.account;let n=t.UsingDate,i=t.PlayImageUrl;0;let r=document.createElement("button");r.classList.add("list-group-item","list-group-item-action","d-flex","w-100","justify-content-between"),r.innerText=n;let o=document.createElement("span");o.classList.add("ps-2","pe-2"),o.innerHTML="查閱圖片",o.style.backgroundColor="orange",o.style.borderRadius="5px",r.insertAdjacentElement("beforeend",o),e.appendChild(r),r.onclick=()=>{window.open(i,"_blank")}}))}(i)}else Gi.hideLoading("loading"),Gi.showAlert("無資料","確認",(()=>{}))})).catch((t=>{Gi.showAlert("錯誤："+t,"確認",(()=>{}))}))}(document.querySelector("#search-keywoard").value)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,